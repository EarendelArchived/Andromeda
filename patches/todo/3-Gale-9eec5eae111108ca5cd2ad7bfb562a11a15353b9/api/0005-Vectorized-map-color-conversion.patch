From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Thu, 24 Nov 2022 17:03:21 +0100
Subject: [PATCH] Vectorized map color conversion

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Gale - https://galemc.org

This patch is based on the following patch:
"Optimize map rendering"
By: Kevin Raneri <kevin.raneri@gmail.com>
As part of: Pufferfish (https://github.com/pufferfish-gg/Pufferfish)
Licensed under: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)

* Pufferfish description *

This patch does not add any API that should be used by plugins. Any
classes and methods added by this patch should NOT be used in plugins.

diff --git a/src/main/java/gg/pufferfish/pufferfish/simd/VectorMapPalette.java b/src/main/java/gg/pufferfish/pufferfish/simd/VectorMapPalette.java
new file mode 100644
index 0000000000000000000000000000000000000000..88b98e6bd23a2ab4aeb9e09977ff1d1bd959ad66
--- /dev/null
+++ b/src/main/java/gg/pufferfish/pufferfish/simd/VectorMapPalette.java
@@ -0,0 +1,86 @@
+// Gale - Pufferfish - vectorize map color conversion
+
+package gg.pufferfish.pufferfish.simd;
+
+import jdk.incubator.vector.FloatVector;
+import jdk.incubator.vector.IntVector;
+import jdk.incubator.vector.VectorMask;
+import jdk.incubator.vector.VectorSpecies;
+import org.bukkit.map.MapPalette;
+
+import java.awt.*;
+
+@Deprecated
+public class VectorMapPalette {
+	
+	private static final VectorSpecies<Integer> I_SPEC = IntVector.SPECIES_PREFERRED;
+	private static final VectorSpecies<Float> F_SPEC = FloatVector.SPECIES_PREFERRED;
+	
+	@Deprecated
+	public static void matchColorVectorized(int[] in, byte[] out) {
+		int speciesLength = I_SPEC.length();
+		int i;
+		for (i = 0; i < in.length - speciesLength; i += speciesLength) {
+			float[] redsArr = new float[speciesLength];
+			float[] bluesArr = new float[speciesLength];
+			float[] greensArr = new float[speciesLength];
+			int[] alphasArr = new int[speciesLength];
+			
+			for (int j = 0; j < speciesLength; j++) {
+				alphasArr[j] = (in[i + j] >> 24) & 0xFF;
+				redsArr[j] = (in[i + j] >> 16) & 0xFF;
+				greensArr[j] = (in[i + j] >> 8) & 0xFF;
+				bluesArr[j] = (in[i + j] >> 0) & 0xFF;
+			}
+			
+			IntVector alphas = IntVector.fromArray(I_SPEC, alphasArr, 0);
+			FloatVector reds = FloatVector.fromArray(F_SPEC, redsArr, 0);
+			FloatVector greens = FloatVector.fromArray(F_SPEC, greensArr, 0);
+			FloatVector blues = FloatVector.fromArray(F_SPEC, bluesArr, 0);
+			IntVector resultIndex = IntVector.zero(I_SPEC);
+			VectorMask<Integer> modificationMask = VectorMask.fromLong(I_SPEC, 0xffffffff);
+			
+			modificationMask = modificationMask.and(alphas.lt(128).not());
+			FloatVector bestDistances = FloatVector.broadcast(F_SPEC, Float.MAX_VALUE);
+			
+			for (int c = 4; c < MapPalette.colors.length; c++) {
+				// We're using 32-bit floats here because it's 2x faster and nobody will know the difference.
+				// For correctness, the original algorithm uses 64-bit floats instead. Completely unnecessary.
+				FloatVector compReds = FloatVector.broadcast(F_SPEC, MapPalette.colors[c].getRed());
+				FloatVector compGreens = FloatVector.broadcast(F_SPEC, MapPalette.colors[c].getGreen());
+				FloatVector compBlues = FloatVector.broadcast(F_SPEC, MapPalette.colors[c].getBlue());
+				
+				FloatVector rMean = reds.add(compReds).div(2.0f);
+				FloatVector rDiff = reds.sub(compReds);
+				FloatVector gDiff = greens.sub(compGreens);
+				FloatVector bDiff = blues.sub(compBlues);
+				
+				FloatVector weightR = rMean.div(256.0f).add(2);
+				FloatVector weightG = FloatVector.broadcast(F_SPEC, 4.0f);
+				FloatVector weightB = FloatVector.broadcast(F_SPEC, 255.0f).sub(rMean).div(256.0f).add(2.0f);
+				
+				FloatVector distance = weightR.mul(rDiff).mul(rDiff).add(weightG.mul(gDiff).mul(gDiff)).add(weightB.mul(bDiff).mul(bDiff));
+				
+				// Now we compare to the best distance we've found.
+				// This mask contains a "1" if better, and a "0" otherwise.
+				VectorMask<Float> bestDistanceMask = distance.lt(bestDistances);
+				bestDistances = bestDistances.blend(distance, bestDistanceMask); // Update the best distances
+				
+				// Update the result array
+				// We also AND with the modification mask because we don't want to interfere if the alpha value isn't large enough.
+				resultIndex = resultIndex.blend(c, bestDistanceMask.cast(I_SPEC).and(modificationMask)); // Update the results
+			}
+			
+			for (int j = 0; j < speciesLength; j++) {
+				int index = resultIndex.lane(j);
+				out[i + j] = (byte) (index < 128 ? index : -129 + (index - 127));
+			}
+		}
+		
+		// For the final ones, fall back to the regular method
+		for (; i < in.length; i++) {
+			out[i] = MapPalette.matchColor(new Color(in[i], true));
+		}
+	}
+	
+}
diff --git a/src/main/java/org/bukkit/map/MapPalette.java b/src/main/java/org/bukkit/map/MapPalette.java
index 3a9aaca2e76411a9c27f9f5e0f22d060d5a66d06..f2061156b9a0ce79d10935b443d641bb8b3a837a 100644
--- a/src/main/java/org/bukkit/map/MapPalette.java
+++ b/src/main/java/org/bukkit/map/MapPalette.java
@@ -5,6 +5,8 @@ import java.awt.Color;
 import java.awt.Graphics2D;
 import java.awt.Image;
 import java.awt.image.BufferedImage;
+
+import gg.pufferfish.pufferfish.simd.SIMDDetection;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -40,7 +42,7 @@ public final class MapPalette {
     }
 
     @NotNull
-    static final Color[] colors = {
+    public static final Color[] colors = { // Gale - Pufferfish - vectorized map color conversion - package -> public
         c(0, 0, 0, 0), c(0, 0, 0, 0), c(0, 0, 0, 0), c(0, 0, 0, 0),
         c(89, 125, 39), c(109, 153, 48), c(127, 178, 56), c(67, 94, 29),
         c(174, 164, 115), c(213, 201, 140), c(247, 233, 163), c(130, 123, 86),
@@ -211,9 +213,15 @@ public final class MapPalette {
         temp.getRGB(0, 0, temp.getWidth(), temp.getHeight(), pixels, 0, temp.getWidth());
 
         byte[] result = new byte[temp.getWidth() * temp.getHeight()];
+        if (!SIMDDetection.isEnabled) { // Gale - Pufferfish - vectorized map color conversion
         for (int i = 0; i < pixels.length; i++) {
             result[i] = matchColor(new Color(pixels[i], true));
         }
+        // Gale start - Pufferfish - vectorized map color conversion
+        } else {
+            gg.pufferfish.pufferfish.simd.VectorMapPalette.matchColorVectorized(pixels, result);
+        }
+        // Gale end - Pufferfish - vectorized map color conversion
         return result;
     }
 
