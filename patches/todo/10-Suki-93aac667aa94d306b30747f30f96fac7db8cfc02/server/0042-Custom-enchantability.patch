From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sun, 19 Jun 2022 22:33:29 +0200
Subject: [PATCH] Custom enchantability


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 6f835d848bd5fe41f7dae92ea88d3d7cb8c1af8b..734f05ee6f4ff997403f900760037a4f474effa4 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -12,6 +12,7 @@ import net.minecraft.network.protocol.game.ServerboundPlaceRecipePacket;
 import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.Bukkit; // Pufferfish
 import org.checkerframework.checker.nullness.qual.Nullable;
+import org.checkerframework.checker.units.qual.A;
 import org.spongepowered.configurate.objectmapping.ConfigSerializable;
 import org.spongepowered.configurate.objectmapping.meta.Comment;
 import org.spongepowered.configurate.objectmapping.meta.Required;
diff --git a/src/main/java/net/minecraft/server/commands/EnchantCommand.java b/src/main/java/net/minecraft/server/commands/EnchantCommand.java
index 7c012f1e37b0085c0939797b0dae8996b4953ab8..7dbd1a69909efbad2da3731a935c2556d957fed0 100644
--- a/src/main/java/net/minecraft/server/commands/EnchantCommand.java
+++ b/src/main/java/net/minecraft/server/commands/EnchantCommand.java
@@ -17,6 +17,7 @@ import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public class EnchantCommand {
     private static final DynamicCommandExceptionType ERROR_NOT_LIVING_ENTITY = new DynamicCommandExceptionType((entityName) -> {
@@ -54,7 +55,7 @@ public class EnchantCommand {
                     LivingEntity livingEntity = (LivingEntity)entity;
                     ItemStack itemStack = livingEntity.getMainHandItem();
                     if (!itemStack.isEmpty()) {
-                        if (enchantment.canEnchant(itemStack) && EnchantmentHelper.isEnchantmentCompatible(EnchantmentHelper.getEnchantments(itemStack).keySet(), enchantment)) {
+                        if (enchantment.canEnchant(itemStack, EnchantmentSource.ENCHANT_COMMAND) && EnchantmentHelper.isEnchantmentCompatible(EnchantmentHelper.getEnchantments(itemStack).keySet(), enchantment)) { // Suki - custom enchantability
                             itemStack.enchant(enchantment, level);
                             ++i;
                         } else if (targets.size() == 1) {
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 447c2ea9603f6482aead79dcb6c729e13cdaf975..6abc2b7be00ce4f8ba1ee3308fa27ed5293a78ba 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -75,6 +75,7 @@ import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.level.storage.loot.LootContext;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.craftbukkit.util.permissions.CraftDefaultPermissions;
@@ -1186,7 +1187,7 @@ public abstract class Mob extends LivingEntity {
 
     protected void enchantSpawnedWeapon(RandomSource random, float power) {
         if (!this.getMainHandItem().isEmpty() && random.nextFloat() < 0.25F * power) {
-            this.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(random, this.getMainHandItem(), (int) (5.0F + power * (float) random.nextInt(18)), false));
+            this.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(random, this.getMainHandItem(), (int) (5.0F + power * (float) random.nextInt(18)), false, EnchantmentSource.SPAWNED_MOB_MAIN_HAND)); // Suki - custom enchantability
         }
 
     }
@@ -1195,7 +1196,7 @@ public abstract class Mob extends LivingEntity {
         ItemStack itemstack = this.getItemBySlot(slot);
 
         if (!itemstack.isEmpty() && random.nextFloat() < 0.5F * power) {
-            this.setItemSlot(slot, EnchantmentHelper.enchantItem(random, itemstack, (int) (5.0F + power * (float) random.nextInt(18)), false));
+            this.setItemSlot(slot, EnchantmentHelper.enchantItem(random, itemstack, (int) (5.0F + power * (float) random.nextInt(18)), false, EnchantmentSource.SPAWNED_MOB_ARMOR)); // Suki - custom enchantability
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
index 68887c1a475c119d061c8325136c5245011cdcbb..8eef7b83645aa059e3c561f65288ef0ed0a57367 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
@@ -13,6 +13,7 @@ import net.minecraft.world.entity.monster.Skeleton;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public class SkeletonTrapGoal extends Goal {
 
@@ -82,8 +83,10 @@ public class SkeletonTrapGoal extends Goal {
             entityskeleton.setItemSlot(EquipmentSlot.HEAD, new ItemStack(Items.IRON_HELMET));
         }
 
-        entityskeleton.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getMainHandItem()), (int) (5.0F + localDifficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false));
-        entityskeleton.setItemSlot(EquipmentSlot.HEAD, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getItemBySlot(EquipmentSlot.HEAD)), (int) (5.0F + localDifficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false));
+        // Suki start - custom enchantability
+        entityskeleton.setItemSlot(EquipmentSlot.MAINHAND, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getMainHandItem()), (int) (5.0F + localDifficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false, EnchantmentSource.SPAWNED_SKELETON_TRAP_MAIN_HAND));
+        entityskeleton.setItemSlot(EquipmentSlot.HEAD, EnchantmentHelper.enchantItem(entityskeleton.getRandom(), this.disenchant(entityskeleton.getItemBySlot(EquipmentSlot.HEAD)), (int) (5.0F + localDifficulty.getSpecialMultiplier() * (float) entityskeleton.getRandom().nextInt(18)), false, EnchantmentSource.SPAWNED_SKELETON_TRAP_HELMET));
+        // Suki end - custom enchantability
         return entityskeleton;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index 770a91fcc351a2d1de4762c0fd9bae2b49c363b5..2c1c6b1c352161eb98ead4518f74a0c64bc9fef4 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -44,6 +44,7 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.levelgen.structure.Structure;
 import net.minecraft.world.level.saveddata.maps.MapDecoration;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public class VillagerTrades {
     private static final int DEFAULT_SUPPLY = 12;
@@ -224,7 +225,7 @@ public class VillagerTrades {
         @Override
         public MerchantOffer getOffer(Entity entity, RandomSource random) {
             int i = 5 + random.nextInt(15);
-            ItemStack itemStack = EnchantmentHelper.enchantItem(random, new ItemStack(this.itemStack.getItem()), i, false);
+            ItemStack itemStack = EnchantmentHelper.enchantItem(random, new ItemStack(this.itemStack.getItem()), i, false, EnchantmentSource.VILLAGER_TRADE); // Suki - custom enchantability
             int j = Math.min(this.baseEmeraldCost + i, 64);
             ItemStack itemStack2 = new ItemStack(Items.EMERALD, j);
             return new MerchantOffer(itemStack2, itemStack, this.maxUses, this.villagerXp, this.priceMultiplier);
diff --git a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
index 506d758efbf16da9467f120321d2359a8832e477..6cbe9f0ba1e8c9effe1dd362d51440d0eb31492b 100644
--- a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
@@ -14,6 +14,7 @@ import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.level.block.AnvilBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 
@@ -191,7 +192,7 @@ public class AnvilMenu extends ItemCombinerMenu {
                             int i2 = (Integer) map1.get(enchantment);
 
                             i2 = l1 == i2 ? i2 + 1 : Math.max(i2, l1);
-                            boolean flag3 = enchantment.canEnchant(itemstack);
+                            boolean flag3 = enchantment.canEnchant(itemstack, EnchantmentSource.ANVIL); // Suki - custom enchantability
 
                             if (this.player.getAbilities().instabuild || itemstack.is(Items.ENCHANTED_BOOK)) {
                                 flag3 = true;
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index f7404f41c2df202a428711e7e09a9a6eb11bf527..876c6a9902e39d3f94d4a98d5166ff9943d7cdd1 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -26,6 +26,7 @@ import java.util.Map;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.EnchantmentInstance;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.bukkit.Location;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.inventory.CraftInventoryEnchanting;
@@ -315,7 +316,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
 
     private List<EnchantmentInstance> getEnchantmentList(ItemStack stack, int slot, int level) {
         this.random.setSeed((long) (this.enchantmentSeed.get() + slot));
-        List<EnchantmentInstance> list = EnchantmentHelper.selectEnchantment(this.random, stack, level, false);
+        List<EnchantmentInstance> list = EnchantmentHelper.selectEnchantment(this.random, stack, level, false, EnchantmentSource.ENCHANTING_TABLE); // Suki - custom enchantability
 
         if (stack.is(Items.BOOK) && list.size() > 1) {
             list.remove(this.random.nextInt(list.size()));
diff --git a/src/main/java/net/minecraft/world/item/enchantment/DamageEnchantment.java b/src/main/java/net/minecraft/world/item/enchantment/DamageEnchantment.java
index d6c354856c71d9629828e2ddbe316306bfaf6ea6..42788c1b16caebcad408c3b29ac4e4806b9d48e6 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/DamageEnchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/DamageEnchantment.java
@@ -50,10 +50,12 @@ public class DamageEnchantment extends Enchantment {
         return !(other instanceof DamageEnchantment);
     }
 
+    // Suki start - custom enchantability
     @Override
-    public boolean canEnchant(ItemStack stack) {
-        return stack.getItem() instanceof AxeItem ? true : super.canEnchant(stack);
+    public boolean canEnchantInVanilla(ItemStack stack) {
+        return stack.getItem() instanceof AxeItem ? true : super.canEnchantInVanilla(stack);
     }
+    // Suki end - custom enchantability
 
     @Override
     public void doPostAttack(LivingEntity user, Entity target, int level) {
diff --git a/src/main/java/net/minecraft/world/item/enchantment/DigDurabilityEnchantment.java b/src/main/java/net/minecraft/world/item/enchantment/DigDurabilityEnchantment.java
index cbd39863b75245f1a5a16ab49f09238c034e09d2..804de17ddb3423bbbef875391c3e9beb0c9a5a94 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/DigDurabilityEnchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/DigDurabilityEnchantment.java
@@ -25,10 +25,12 @@ public class DigDurabilityEnchantment extends Enchantment {
         return 3;
     }
 
+    // Suki start - custom enchantability
     @Override
-    public boolean canEnchant(ItemStack stack) {
-        return stack.isDamageableItem() ? true : super.canEnchant(stack);
+    public boolean canEnchantInVanilla(ItemStack stack) {
+        return stack.isDamageableItem() ? true : super.canEnchantInVanilla(stack);
     }
+    // Suki end - custom enchantability
 
     public static boolean shouldIgnoreDurabilityDrop(ItemStack item, int level, RandomSource random) {
         if (item.getItem() instanceof ArmorItem && random.nextFloat() < 0.6F) {
diff --git a/src/main/java/net/minecraft/world/item/enchantment/DiggingEnchantment.java b/src/main/java/net/minecraft/world/item/enchantment/DiggingEnchantment.java
index c55b492e9bcf5a9eef1bf86d9a0ada7231c459e9..1856cf3776167c8d0082eb198bcaa7fd7b04e777 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/DiggingEnchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/DiggingEnchantment.java
@@ -24,8 +24,11 @@ public class DiggingEnchantment extends Enchantment {
         return 5;
     }
 
+    // Suki start - custom enchantability
     @Override
-    public boolean canEnchant(ItemStack stack) {
-        return stack.is(Items.SHEARS) ? true : super.canEnchant(stack);
+    public boolean canEnchantInVanilla(ItemStack stack) {
+        return stack.is(Items.SHEARS) ? true : super.canEnchantInVanilla(stack);
     }
+    // Suki end - custom enchantability
+
 }
diff --git a/src/main/java/net/minecraft/world/item/enchantment/Enchantment.java b/src/main/java/net/minecraft/world/item/enchantment/Enchantment.java
index 971179e713944593cdcb6409588619e290d17170..7ddb35de5f469c7aad5fe7502df2c089c0a8d68e 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/Enchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/Enchantment.java
@@ -14,6 +14,7 @@ import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MobType;
 import net.minecraft.world.item.ItemStack;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public abstract class Enchantment {
     public final EquipmentSlot[] slots;
@@ -109,10 +110,19 @@ public abstract class Enchantment {
         return mutableComponent;
     }
 
-    public boolean canEnchant(ItemStack stack) {
-        return this.category.canEnchant(stack.getItem());
+    // Suki start - custom enchantability
+
+    public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+        // Enchantment.canEnchantInVanilla and EnchantmentCategory.canEnchant could both be overridden
+        return this.canEnchantInVanilla(stack) || this.category.canEnchant(stack.getItem(), source);
+    }
+
+    public boolean canEnchantInVanilla(ItemStack stack) {
+        return this.category.canEnchantInVanilla(stack.getItem());
     }
 
+    // Suki end - custom enchantability
+
     public void doPostAttack(LivingEntity user, Entity target, int level) {
     }
 
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
index 6f6106ca4d74d50a7b74b086adc96c58c7906cb6..b689a24f23f341d555e7e3b7818582ee3e9d33cc 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentCategory.java
@@ -12,92 +12,108 @@ import net.minecraft.world.item.TridentItem;
 import net.minecraft.world.item.Vanishable;
 import net.minecraft.world.item.Wearable;
 import net.minecraft.world.level.block.Block;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public enum EnchantmentCategory {
     ARMOR {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof ArmorItem;
         }
     },
     ARMOR_FEET {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof ArmorItem && ((ArmorItem)item).getSlot() == EquipmentSlot.FEET;
         }
     },
     ARMOR_LEGS {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof ArmorItem && ((ArmorItem)item).getSlot() == EquipmentSlot.LEGS;
         }
     },
     ARMOR_CHEST {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof ArmorItem && ((ArmorItem)item).getSlot() == EquipmentSlot.CHEST;
         }
     },
     ARMOR_HEAD {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof ArmorItem && ((ArmorItem)item).getSlot() == EquipmentSlot.HEAD;
         }
     },
     WEAPON {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof SwordItem;
         }
     },
     DIGGER {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof DiggerItem;
         }
     },
     FISHING_ROD {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof FishingRodItem;
         }
     },
     TRIDENT {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof TridentItem;
         }
     },
     BREAKABLE {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item.canBeDepleted();
         }
     },
     BOW {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof BowItem;
         }
     },
     WEARABLE {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof Wearable || Block.byItem(item) instanceof Wearable;
         }
     },
     CROSSBOW {
         @Override
-        public boolean canEnchant(Item item) {
+        public boolean canEnchantInVanilla(Item item) { // Suki - custom enchantability
             return item instanceof CrossbowItem;
         }
     },
     VANISHABLE {
+        // Suki start - custom enchantability
         @Override
-        public boolean canEnchant(Item item) {
-            return item instanceof Vanishable || Block.byItem(item) instanceof Vanishable || BREAKABLE.canEnchant(item);
+        public boolean canEnchant(Item item, EnchantmentSource source) {
+            return item instanceof Vanishable || Block.byItem(item) instanceof Vanishable || BREAKABLE.canEnchant(item, source);
         }
+        @Override
+        public boolean canEnchantInVanilla(Item item) {
+            return item instanceof Vanishable || Block.byItem(item) instanceof Vanishable || BREAKABLE.canEnchantInVanilla(item);
+        }
+        // Suki end - custom enchantability
     };
 
-    public abstract boolean canEnchant(Item item);
+    // Suki start - custom enchantability
+
+    public boolean canEnchant(Item item, EnchantmentSource source) {
+        return this.canEnchantInVanilla(item);
+    }
+
+    public abstract boolean canEnchantInVanilla(Item item);
+
+    // Suki end - custom enchantability
+
 }
diff --git a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
index e694a256a72479cff28b65a86ce31a8ca0b1eba6..599798d218c05b22e5a39e525477cfdb08017c60 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/EnchantmentHelper.java
@@ -26,6 +26,7 @@ import net.minecraft.world.item.EnchantedBookItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.apache.commons.lang3.mutable.MutableFloat;
 import org.apache.commons.lang3.mutable.MutableInt;
 
@@ -319,8 +320,10 @@ public class EnchantmentHelper {
         }
     }
 
-    public static ItemStack enchantItem(RandomSource random, ItemStack target, int level, boolean treasureAllowed) {
-        List<EnchantmentInstance> list = selectEnchantment(random, target, level, treasureAllowed);
+    // Suki start - custom enchantability
+    public static ItemStack enchantItem(RandomSource random, ItemStack target, int level, boolean treasureAllowed, EnchantmentSource source) {
+        List<EnchantmentInstance> list = selectEnchantment(random, target, level, treasureAllowed, source);
+        // Suki end - custom enchantability
         boolean bl = target.is(Items.BOOK);
         if (bl) {
             target = new ItemStack(Items.ENCHANTED_BOOK);
@@ -337,7 +340,7 @@ public class EnchantmentHelper {
         return target;
     }
 
-    public static List<EnchantmentInstance> selectEnchantment(RandomSource random, ItemStack stack, int level, boolean treasureAllowed) {
+    public static List<EnchantmentInstance> selectEnchantment(RandomSource random, ItemStack stack, int level, boolean treasureAllowed, EnchantmentSource source) { // Suki - custom enchantability
         List<EnchantmentInstance> list = Lists.newArrayList();
         Item item = stack.getItem();
         int i = item.getEnchantmentValue();
@@ -347,7 +350,7 @@ public class EnchantmentHelper {
             level += 1 + random.nextInt(i / 4 + 1) + random.nextInt(i / 4 + 1);
             float f = (random.nextFloat() + random.nextFloat() - 1.0F) * 0.15F;
             level = Mth.clamp(carpetfixes.helpers.FastMath.round((float)level + (float)level * f), 1, Integer.MAX_VALUE); // Mirai
-            List<EnchantmentInstance> list2 = getAvailableEnchantmentResults(level, stack, treasureAllowed);
+            List<EnchantmentInstance> list2 = getAvailableEnchantmentResults(level, stack, treasureAllowed, source);
             if (!list2.isEmpty()) {
                 WeightedRandom.getRandomItem(random, list2).ifPresent(list::add);
 
@@ -390,13 +393,13 @@ public class EnchantmentHelper {
         return true;
     }
 
-    public static List<EnchantmentInstance> getAvailableEnchantmentResults(int power, ItemStack stack, boolean treasureAllowed) {
+    public static List<EnchantmentInstance> getAvailableEnchantmentResults(int power, ItemStack stack, boolean treasureAllowed, EnchantmentSource source) { // Suki - custom enchantability
         List<EnchantmentInstance> list = Lists.newArrayList();
         Item item = stack.getItem();
         boolean bl = stack.is(Items.BOOK);
 
         for(Enchantment enchantment : Registry.ENCHANTMENT) {
-            if ((!enchantment.isTreasureOnly() || treasureAllowed) && enchantment.isDiscoverable() && (enchantment.category.canEnchant(item) || bl)) {
+            if ((!enchantment.isTreasureOnly() || treasureAllowed) && enchantment.isDiscoverable() && (enchantment.category.canEnchant(item, source) || bl)) { // Suki - custom enchantability
                 for(int i = enchantment.getMaxLevel(); i > enchantment.getMinLevel() - 1; --i) {
                     if (power >= enchantment.getMinCost(i) && power <= enchantment.getMaxCost(i)) {
                         list.add(new EnchantmentInstance(enchantment, i));
diff --git a/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java b/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java
index be33c4c28bbc0bf80cbf2921664fcc4aaa465950..4fe2497cbaf2006548b8978531b349060eaf62ee 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/Enchantments.java
@@ -2,42 +2,355 @@ package net.minecraft.world.item.enchantment;
 
 import net.minecraft.core.Registry;
 import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.item.AxeItem;
+import net.minecraft.world.item.HoeItem;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
+import net.minecraft.world.item.PickaxeItem;
+import net.minecraft.world.item.ShovelItem;
+import net.minecraft.world.item.SwordItem;
+import org.sucraft.suki.configuration.SukiGlobalConfiguration;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public class Enchantments {
 
     private static final EquipmentSlot[] ARMOR_SLOTS = new EquipmentSlot[]{EquipmentSlot.HEAD, EquipmentSlot.CHEST, EquipmentSlot.LEGS, EquipmentSlot.FEET};
-    public static final Enchantment ALL_DAMAGE_PROTECTION = Enchantments.register("protection", new ProtectionEnchantment(Enchantment.Rarity.COMMON, ProtectionEnchantment.Type.ALL, Enchantments.ARMOR_SLOTS));
-    public static final Enchantment FIRE_PROTECTION = Enchantments.register("fire_protection", new ProtectionEnchantment(Enchantment.Rarity.UNCOMMON, ProtectionEnchantment.Type.FIRE, Enchantments.ARMOR_SLOTS));
+    // Suki start - custom enchantability
+
+    /**
+     * Can be added to elytras and shields via the enchanting table or anvil (or command)
+     */
+    public static final boolean canProtectionEnchant(ItemStack stack, EnchantmentSource source) {
+        if (source == EnchantmentSource.ENCHANTING_TABLE || source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if ((SukiGlobalConfiguration.get().enchantability.protection.elytra && stack.is(Items.ELYTRA)) ||
+                (SukiGlobalConfiguration.get().enchantability.protection.shield && stack.is(Items.SHIELD))) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Can be added to elytras and shields via the enchanting table or anvil (or command)
+     */
+    public static final boolean canThornsEnchant(ItemStack stack, EnchantmentSource source) {
+        if (source == EnchantmentSource.ENCHANTING_TABLE || source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if ((SukiGlobalConfiguration.get().enchantability.thorns.elytra && stack.is(Items.ELYTRA)) ||
+                (SukiGlobalConfiguration.get().enchantability.thorns.shield && stack.is(Items.SHIELD))) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Can be added to bows, crossbows, tridents, axes, pickaxes, shovels and hoes via the enchanting table or anvil (or command)
+     */
+    public static final boolean canLootingEnchant(ItemStack stack, EnchantmentSource source) {
+        if (source == EnchantmentSource.ENCHANTING_TABLE || source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if ((SukiGlobalConfiguration.get().enchantability.looting.bow && stack.is(Items.BOW)) ||
+                (SukiGlobalConfiguration.get().enchantability.looting.crossbow && stack.is(Items.CROSSBOW)) ||
+                (SukiGlobalConfiguration.get().enchantability.looting.trident && stack.is(Items.TRIDENT)) ||
+                (SukiGlobalConfiguration.get().enchantability.looting.axe && stack.getItem() instanceof AxeItem) ||
+                (SukiGlobalConfiguration.get().enchantability.looting.pickaxe && stack.getItem() instanceof PickaxeItem) ||
+                (SukiGlobalConfiguration.get().enchantability.looting.shovel && stack.getItem() instanceof ShovelItem) ||
+                (SukiGlobalConfiguration.get().enchantability.looting.hoe && stack.getItem() instanceof HoeItem)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Can be added to pickaxes, shovels and hoes via the enchanting table or anvil (or command)
+     */
+    public static final boolean canMeleeDamageEnchant(ItemStack stack, EnchantmentSource source, SukiGlobalConfiguration.Enchantability.MeleeDamage configuration) {
+        if (source == EnchantmentSource.ENCHANTING_TABLE || source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if ((configuration.pickaxe && stack.getItem() instanceof PickaxeItem) ||
+                (configuration.shovel && stack.getItem() instanceof ShovelItem) ||
+                (configuration.hoe && stack.getItem() instanceof HoeItem)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * @see #canMeleeDamageEnchant(ItemStack, EnchantmentSource, SukiGlobalConfiguration.Enchantability.MeleeDamage)
+     */
+    public static final boolean canSharpnessEnchant(ItemStack stack, EnchantmentSource source) {
+        return canMeleeDamageEnchant(stack, source, SukiGlobalConfiguration.get().enchantability.sharpness);
+    }
+
+    /**
+     * @see #canMeleeDamageEnchant(ItemStack, EnchantmentSource, SukiGlobalConfiguration.Enchantability.MeleeDamage)
+     */
+    public static final boolean canSmiteEnchant(ItemStack stack, EnchantmentSource source) {
+        return canMeleeDamageEnchant(stack, source, SukiGlobalConfiguration.get().enchantability.smite);
+    }
+
+    /**
+     * @see #canMeleeDamageEnchant(ItemStack, EnchantmentSource, SukiGlobalConfiguration.Enchantability.MeleeDamage)
+     */
+    public static final boolean canBaneOfArthropodsEnchant(ItemStack stack, EnchantmentSource source) {
+        return canMeleeDamageEnchant(stack, source, SukiGlobalConfiguration.get().enchantability.baneOfArthropods);
+    }
+
+    /**
+     * Can be added to axes, pickaxes, shovels and hoes via the enchanting table or anvil (or command)
+     */
+    public static final boolean canMeleeEffectEnchant(ItemStack stack, EnchantmentSource source, SukiGlobalConfiguration.Enchantability.MeleeEffect configuration) {
+        if (source == EnchantmentSource.ENCHANTING_TABLE || source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if ((configuration.axe && stack.getItem() instanceof AxeItem) ||
+                (configuration.pickaxe && stack.getItem() instanceof PickaxeItem) ||
+                (configuration.shovel && stack.getItem() instanceof ShovelItem) ||
+                (configuration.hoe && stack.getItem() instanceof HoeItem)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * @see #canMeleeEffectEnchant(ItemStack, EnchantmentSource, SukiGlobalConfiguration.Enchantability.MeleeEffect)
+     */
+    public static final boolean canKnockbackEnchant(ItemStack stack, EnchantmentSource source) {
+        return canMeleeEffectEnchant(stack, source, SukiGlobalConfiguration.get().enchantability.knockback);
+    }
+
+    /**
+     * @see #canMeleeEffectEnchant(ItemStack, EnchantmentSource, SukiGlobalConfiguration.Enchantability.MeleeEffect)
+     */
+    public static final boolean canFireAspectEnchant(ItemStack stack, EnchantmentSource source) {
+        return canMeleeEffectEnchant(stack, source, SukiGlobalConfiguration.get().enchantability.fireAspect);
+    }
+
+    /**
+     * Can be added to swords via the anvil (or command)
+     */
+    public static final boolean canEfficiencyEnchant(ItemStack stack, EnchantmentSource source) {
+        if (source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if (SukiGlobalConfiguration.get().enchantability.efficiency.sword && stack.getItem() instanceof SwordItem) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Can be added to swords via the anvil (or command)
+     */
+    public static final boolean canFortuneEnchant(ItemStack stack, EnchantmentSource source) {
+        if (source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if (SukiGlobalConfiguration.get().enchantability.fortune.sword && stack.getItem() instanceof SwordItem) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Can be added to swords via the anvil (or command)
+     */
+    public static final boolean canSilkTouchEnchant(ItemStack stack, EnchantmentSource source) {
+        if (source == EnchantmentSource.ANVIL || source == EnchantmentSource.ENCHANT_COMMAND) {
+            if (SukiGlobalConfiguration.get().enchantability.silkTouch.sword && stack.getItem() instanceof SwordItem) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private static final EquipmentSlot[] ARMOR_AND_OFFHAND_SLOTS = new EquipmentSlot[]{EquipmentSlot.HEAD, EquipmentSlot.CHEST, EquipmentSlot.LEGS, EquipmentSlot.FEET, EquipmentSlot.OFFHAND};
+    public static final Enchantment ALL_DAMAGE_PROTECTION = Enchantments.register("protection", new ProtectionEnchantment(Enchantment.Rarity.COMMON, ProtectionEnchantment.Type.ALL, Enchantments.ARMOR_AND_OFFHAND_SLOTS) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canProtectionEnchant(stack, source);
+        }
+    });
+    public static final Enchantment FIRE_PROTECTION = Enchantments.register("fire_protection", new ProtectionEnchantment(Enchantment.Rarity.UNCOMMON, ProtectionEnchantment.Type.FIRE, Enchantments.ARMOR_AND_OFFHAND_SLOTS) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canProtectionEnchant(stack, source);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment FALL_PROTECTION = Enchantments.register("feather_falling", new ProtectionEnchantment(Enchantment.Rarity.UNCOMMON, ProtectionEnchantment.Type.FALL, Enchantments.ARMOR_SLOTS));
-    public static final Enchantment BLAST_PROTECTION = Enchantments.register("blast_protection", new ProtectionEnchantment(Enchantment.Rarity.RARE, ProtectionEnchantment.Type.EXPLOSION, Enchantments.ARMOR_SLOTS));
-    public static final Enchantment PROJECTILE_PROTECTION = Enchantments.register("projectile_protection", new ProtectionEnchantment(Enchantment.Rarity.UNCOMMON, ProtectionEnchantment.Type.PROJECTILE, Enchantments.ARMOR_SLOTS));
+    // Suki start - custom enchantability
+    public static final Enchantment BLAST_PROTECTION = Enchantments.register("blast_protection", new ProtectionEnchantment(Enchantment.Rarity.RARE, ProtectionEnchantment.Type.EXPLOSION, Enchantments.ARMOR_AND_OFFHAND_SLOTS) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canProtectionEnchant(stack, source);
+        }
+    });
+    public static final Enchantment PROJECTILE_PROTECTION = Enchantments.register("projectile_protection", new ProtectionEnchantment(Enchantment.Rarity.UNCOMMON, ProtectionEnchantment.Type.PROJECTILE, Enchantments.ARMOR_AND_OFFHAND_SLOTS) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canProtectionEnchant(stack, source);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment RESPIRATION = Enchantments.register("respiration", new OxygenEnchantment(Enchantment.Rarity.RARE, Enchantments.ARMOR_SLOTS));
     public static final Enchantment AQUA_AFFINITY = Enchantments.register("aqua_affinity", new WaterWorkerEnchantment(Enchantment.Rarity.RARE, Enchantments.ARMOR_SLOTS));
-    public static final Enchantment THORNS = Enchantments.register("thorns", new ThornsEnchantment(Enchantment.Rarity.VERY_RARE, Enchantments.ARMOR_SLOTS));
+    // Suki start - custom enchantability
+    public static final Enchantment THORNS = Enchantments.register("thorns", new ThornsEnchantment(Enchantment.Rarity.VERY_RARE, Enchantments.ARMOR_AND_OFFHAND_SLOTS) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canThornsEnchant(stack, source);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment DEPTH_STRIDER = Enchantments.register("depth_strider", new WaterWalkerEnchantment(Enchantment.Rarity.RARE, Enchantments.ARMOR_SLOTS));
     public static final Enchantment FROST_WALKER = Enchantments.register("frost_walker", new FrostWalkerEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.FEET}));
     public static final Enchantment BINDING_CURSE = Enchantments.register("binding_curse", new BindingCurseEnchantment(Enchantment.Rarity.VERY_RARE, Enchantments.ARMOR_SLOTS));
     public static final Enchantment SOUL_SPEED = Enchantments.register("soul_speed", new SoulSpeedEnchantment(Enchantment.Rarity.VERY_RARE, new EquipmentSlot[]{EquipmentSlot.FEET}));
     public static final Enchantment SWIFT_SNEAK = Enchantments.register("swift_sneak", new SwiftSneakEnchantment(Enchantment.Rarity.VERY_RARE, new EquipmentSlot[]{EquipmentSlot.LEGS}));
-    public static final Enchantment SHARPNESS = Enchantments.register("sharpness", new DamageEnchantment(Enchantment.Rarity.COMMON, 0, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment SMITE = Enchantments.register("smite", new DamageEnchantment(Enchantment.Rarity.UNCOMMON, 1, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment BANE_OF_ARTHROPODS = Enchantments.register("bane_of_arthropods", new DamageEnchantment(Enchantment.Rarity.UNCOMMON, 2, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment KNOCKBACK = Enchantments.register("knockback", new KnockbackEnchantment(Enchantment.Rarity.UNCOMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment FIRE_ASPECT = Enchantments.register("fire_aspect", new FireAspectEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment MOB_LOOTING = Enchantments.register("looting", new LootBonusEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.WEAPON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
+    // Suki start - custom enchantability
+    public static final Enchantment SHARPNESS = Enchantments.register("sharpness", new DamageEnchantment(Enchantment.Rarity.COMMON, 0, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canSharpnessEnchant(stack, source);
+        }
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Incompatible with Impaling
+            if (other == Enchantments.IMPALING) {
+                return false;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    public static final Enchantment SMITE = Enchantments.register("smite", new DamageEnchantment(Enchantment.Rarity.UNCOMMON, 1, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canSmiteEnchant(stack, source);
+        }
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Incompatible with Impaling
+            if (other == Enchantments.IMPALING) {
+                return false;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    public static final Enchantment BANE_OF_ARTHROPODS = Enchantments.register("bane_of_arthropods", new DamageEnchantment(Enchantment.Rarity.UNCOMMON, 2, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canBaneOfArthropodsEnchant(stack, source);
+        }
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Incompatible with Impaling
+            if (other == Enchantments.IMPALING) {
+                return false;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    public static final Enchantment KNOCKBACK = Enchantments.register("knockback", new KnockbackEnchantment(Enchantment.Rarity.UNCOMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canKnockbackEnchant(stack, source) ||
+                // Can spawn on top of pickaxes in generated loot or as a weapon held by mobs
+                ((source == EnchantmentSource.GENERATED_LOOT || source == EnchantmentSource.SPAWNED_MOB_MAIN_HAND || source == EnchantmentSource.SPAWNED_SKELETON_TRAP_MAIN_HAND) && (SukiGlobalConfiguration.get().enchantability.knockback.pickaxe && stack.getItem() instanceof PickaxeItem)) ||
+                // Can spawn on top of shovels as a weapon held by mobs
+                ((source == EnchantmentSource.SPAWNED_MOB_MAIN_HAND || source == EnchantmentSource.SPAWNED_SKELETON_TRAP_MAIN_HAND) && (SukiGlobalConfiguration.get().enchantability.knockback.shovel && stack.getItem() instanceof ShovelItem));
+        }
+    });
+    public static final Enchantment FIRE_ASPECT = Enchantments.register("fire_aspect", new FireAspectEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canFireAspectEnchant(stack, source) ||
+                // Can spawn on top of shovels in generated loot or as a weapon held by mobs
+                ((source == EnchantmentSource.GENERATED_LOOT || source == EnchantmentSource.SPAWNED_MOB_MAIN_HAND || source == EnchantmentSource.SPAWNED_SKELETON_TRAP_MAIN_HAND) && (SukiGlobalConfiguration.get().enchantability.fireAspect.shovel && stack.getItem() instanceof ShovelItem));
+        }
+    });
+    public static final Enchantment MOB_LOOTING = Enchantments.register("looting", new LootBonusEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.WEAPON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canLootingEnchant(stack, source);
+        }
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Compatible with Silk Touch and Fortune
+            if (other == Enchantments.SILK_TOUCH || other == Enchantments.BLOCK_FORTUNE) {
+                return true;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment SWEEPING_EDGE = Enchantments.register("sweeping", new SweepingEdgeEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment BLOCK_EFFICIENCY = Enchantments.register("efficiency", new DiggingEnchantment(Enchantment.Rarity.COMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment SILK_TOUCH = Enchantments.register("silk_touch", new UntouchingEnchantment(Enchantment.Rarity.VERY_RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
+    // Suki start - custom enchantability
+    public static final Enchantment BLOCK_EFFICIENCY = Enchantments.register("efficiency", new DiggingEnchantment(Enchantment.Rarity.COMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canEfficiencyEnchant(stack, source);
+        }
+    });
+    public static final Enchantment SILK_TOUCH = Enchantments.register("silk_touch", new UntouchingEnchantment(Enchantment.Rarity.VERY_RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canSilkTouchEnchant(stack, source);
+        }
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Compatible with Looting and Luck of the Sea
+            if (other == Enchantments.MOB_LOOTING || other == Enchantments.FISHING_LUCK) {
+                return true;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment UNBREAKING = Enchantments.register("unbreaking", new DigDurabilityEnchantment(Enchantment.Rarity.UNCOMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment BLOCK_FORTUNE = Enchantments.register("fortune", new LootBonusEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.DIGGER, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
+    // Suki start - custom enchantability
+    public static final Enchantment BLOCK_FORTUNE = Enchantments.register("fortune", new LootBonusEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.DIGGER, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean canEnchant(ItemStack stack, EnchantmentSource source) {
+            return super.canEnchant(stack, source) || canFortuneEnchant(stack, source);
+        }
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Compatible with Looting and Luck of the Sea
+            if (other == Enchantments.MOB_LOOTING || other == Enchantments.FISHING_LUCK) {
+                return true;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment POWER_ARROWS = Enchantments.register("power", new ArrowDamageEnchantment(Enchantment.Rarity.COMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
     public static final Enchantment PUNCH_ARROWS = Enchantments.register("punch", new ArrowKnockbackEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
     public static final Enchantment FLAMING_ARROWS = Enchantments.register("flame", new ArrowFireEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
     public static final Enchantment INFINITY_ARROWS = Enchantments.register("infinity", new ArrowInfiniteEnchantment(Enchantment.Rarity.VERY_RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment FISHING_LUCK = Enchantments.register("luck_of_the_sea", new LootBonusEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.FISHING_ROD, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
+    // Suki start - custom enchantability
+    public static final Enchantment FISHING_LUCK = Enchantments.register("luck_of_the_sea", new LootBonusEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.FISHING_ROD, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Compatible with Silk Touch and Fortune
+            if (other == Enchantments.SILK_TOUCH || other == Enchantments.BLOCK_FORTUNE) {
+                return true;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment FISHING_SPEED = Enchantments.register("lure", new FishingSpeedEnchantment(Enchantment.Rarity.RARE, EnchantmentCategory.FISHING_ROD, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
     public static final Enchantment LOYALTY = Enchantments.register("loyalty", new TridentLoyaltyEnchantment(Enchantment.Rarity.UNCOMMON, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
-    public static final Enchantment IMPALING = Enchantments.register("impaling", new TridentImpalerEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
+    // Suki start - custom enchantability
+    public static final Enchantment IMPALING = Enchantments.register("impaling", new TridentImpalerEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}) {
+        @Override
+        public boolean checkCompatibility(Enchantment other) {
+            // Incompatible with Sharpness, Smite and Bane of Arthropods
+            if (other == Enchantments.SHARPNESS || other == Enchantments.SMITE || other == Enchantments.BANE_OF_ARTHROPODS) {
+                return false;
+            }
+            return super.checkCompatibility(other);
+        }
+    });
+    // Suki end - custom enchantability
     public static final Enchantment RIPTIDE = Enchantments.register("riptide", new TridentRiptideEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
     public static final Enchantment CHANNELING = Enchantments.register("channeling", new TridentChannelingEnchantment(Enchantment.Rarity.VERY_RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
     public static final Enchantment MULTISHOT = Enchantments.register("multishot", new MultiShotEnchantment(Enchantment.Rarity.RARE, new EquipmentSlot[]{EquipmentSlot.MAINHAND}));
diff --git a/src/main/java/net/minecraft/world/item/enchantment/ThornsEnchantment.java b/src/main/java/net/minecraft/world/item/enchantment/ThornsEnchantment.java
index 97f61bfdf39def907d7d3686914189f7545937ef..d519d04e64a29eb5de22adcba63a4e9bc318876b 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/ThornsEnchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/ThornsEnchantment.java
@@ -31,10 +31,12 @@ public class ThornsEnchantment extends Enchantment {
         return 3;
     }
 
+    // Suki start - custom enchantability
     @Override
-    public boolean canEnchant(ItemStack stack) {
-        return stack.getItem() instanceof ArmorItem ? true : super.canEnchant(stack);
+    public boolean canEnchantInVanilla(ItemStack stack) {
+        return stack.getItem() instanceof ArmorItem ? true : super.canEnchantInVanilla(stack);
     }
+    // Suki end - custom enchantability
 
     @Override
     public void doPostHurt(LivingEntity user, Entity attacker, int level) {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
index 2bfb9ff77839e9ed91c9c48ad34abb46361c04b7..f4e817c209f3bd2d0db8b6318cd7bd2de5b34095 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantRandomlyFunction.java
@@ -27,6 +27,7 @@ import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentInstance;
 import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.slf4j.Logger;
 
 public class EnchantRandomlyFunction extends LootItemConditionalFunction {
@@ -49,9 +50,11 @@ public class EnchantRandomlyFunction extends LootItemConditionalFunction {
         Enchantment enchantment;
         if (this.enchantments.isEmpty()) {
             boolean bl = stack.is(Items.BOOK);
-            List<Enchantment> list = Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((enchantment) -> {
-                return bl || enchantment.canEnchant(stack);
+            // Suki start - custom enchantability
+            List<Enchantment> list = Registry.ENCHANTMENT.stream().filter(Enchantment::isDiscoverable).filter((consideredEnchantment) -> {
+                return bl || consideredEnchantment.canEnchant(stack, EnchantmentSource.GENERATED_LOOT);
             }).collect(Collectors.toList());
+            // Suki end - custom enchantability
             if (list.isEmpty()) {
                 LOGGER.warn("Couldn't find a compatible enchantment for {}", (Object)stack);
                 return stack;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction.java
index acaeecd0abb972c461c2302c9c011b3c2052e497..e40d9235c7bcd76999797ec122fa06cec1b1b245 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/EnchantWithLevelsFunction.java
@@ -12,6 +12,7 @@ import net.minecraft.world.level.storage.loot.LootContext;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParam;
 import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
 import net.minecraft.world.level.storage.loot.providers.number.NumberProvider;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 
 public class EnchantWithLevelsFunction extends LootItemConditionalFunction {
     final NumberProvider levels;
@@ -36,7 +37,7 @@ public class EnchantWithLevelsFunction extends LootItemConditionalFunction {
     @Override
     public ItemStack run(ItemStack stack, LootContext context) {
         RandomSource randomSource = context.getRandom();
-        return EnchantmentHelper.enchantItem(randomSource, stack, this.levels.getInt(context), this.treasure);
+        return EnchantmentHelper.enchantItem(randomSource, stack, this.levels.getInt(context), this.treasure, EnchantmentSource.GENERATED_LOOT); // Suki - custom enchantability
     }
 
     public static EnchantWithLevelsFunction.Builder enchantWithLevels(NumberProvider range) {
diff --git a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
index 873185fd4d4c994130f2e7c271b3e03cefb2278c..9d145bd881c05466b5a75d1b05b8c241047b31f9 100644
--- a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
+++ b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.enchantments;
 import net.minecraft.core.Registry;
 import net.minecraft.world.item.enchantment.BindingCurseEnchantment;
 import net.minecraft.world.item.enchantment.VanishingCurseEnchantment;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.enchantments.Enchantment;
@@ -74,11 +75,20 @@ public class CraftEnchantment extends Enchantment {
         return this.target.isCurse(); // Paper
     }
 
+    // Suki start - custom enchantability
+
     @Override
-    public boolean canEnchantItem(ItemStack item) {
-        return this.target.canEnchant(CraftItemStack.asNMSCopy(item));
+    public boolean canEnchantItem(ItemStack item, EnchantmentSource source) {
+        return this.target.canEnchant(CraftItemStack.asNMSCopy(item), source);
     }
 
+    @Override
+    public boolean canEnchantItemInVanilla(ItemStack item) {
+        return this.target.canEnchantInVanilla(CraftItemStack.asNMSCopy(item));
+    }
+
+    // Suki end - custom enchantability
+
     @Override
     public String getName() {
         // PAIL: migration paths
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 09b6475b77ebc7f43c13861aa2af26e2f6e6a8b5..ed97c55780e9e99dd6b6fa3933b538501588601d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -7,6 +7,7 @@ import net.minecraft.core.HolderLookup;
 import net.minecraft.core.Registry;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.world.item.Item;
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 import org.bukkit.Material;
@@ -382,21 +383,32 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     // Paper start
+
+    // Suki start - custom enchantability
+
     @Override
     public ItemStack enchantWithLevels(ItemStack itemStack, int levels, boolean allowTreasure, java.util.Random random) {
+        return this.enchantWithLevels(itemStack, levels, allowTreasure, random, EnchantmentSource.BUKKIT_API);
+    }
+
+    @Override
+    public ItemStack enchantWithLevels(ItemStack itemStack, int levels, boolean allowTreasure, java.util.Random random, EnchantmentSource source) {
         Validate.notNull(itemStack, "Argument 'itemStack' must not be null");
         Validate.isTrue(itemStack.getType() != Material.AIR, "Argument 'itemStack' must not be of type AIR");
         Validate.isTrue(itemStack.getAmount() > 0, "Argument 'itemStack' amount must be greater than 0");
         Validate.isTrue(levels > 0 && levels <= 30, "Argument 'levels' must be in range [1, 30] (attempted " + levels + ")");
         Validate.notNull(random, "Argument 'random' must not be null");
+        Validate.notNull(source, "Argument 'source' must not be null");
         final net.minecraft.world.item.ItemStack internalStack = CraftItemStack.asNMSCopy(itemStack);
         if (internalStack.tag != null) {
             internalStack.tag.remove(net.minecraft.world.item.ItemStack.TAG_ENCH);
         }
-        final net.minecraft.world.item.ItemStack enchanted = net.minecraft.world.item.enchantment.EnchantmentHelper.enchantItem(new org.bukkit.craftbukkit.util.RandomSourceWrapper(random), internalStack, levels, allowTreasure);
+        final net.minecraft.world.item.ItemStack enchanted = net.minecraft.world.item.enchantment.EnchantmentHelper.enchantItem(new org.bukkit.craftbukkit.util.RandomSourceWrapper(random), internalStack, levels, allowTreasure, source);
         return CraftItemStack.asCraftMirror(enchanted);
     }
 
+    // Suki end - custom enchantability
+
     @Override
     public net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final ItemStack item, final java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op) {
         final net.minecraft.nbt.CompoundTag tag = CraftItemStack.asNMSCopy(item).getTag();
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
index 1514bda6b828df88258d8dbb89d8c542313cbfc1..790c13919b4b65f4554692b80d51eebf711daae1 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
@@ -291,4 +291,102 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
 
     // Suki end - network-constrained chunk sending
 
+    // Suki start - custom enchantability
+
+    public Enchantability enchantability;
+
+    public class Enchantability extends ConfigurationPart {
+
+        public Protection protection;
+
+        public class Protection extends ConfigurationPart {
+
+            public boolean elytra = false;
+
+            /**
+             * Not functional yet
+             */
+            public transient boolean shield = false;
+
+        }
+
+        public Thorns thorns;
+
+        public class Thorns extends ConfigurationPart {
+
+            public boolean elytra = false;
+
+            /**
+             * Not functional yet
+             */
+            public transient boolean shield = false;
+
+        }
+
+        public Looting looting;
+
+        public class Looting extends ConfigurationPart {
+
+            public boolean bow = false;
+            public boolean crossbow = false;
+            public boolean trident = false;
+            public boolean axe = false;
+            public boolean pickaxe = false;
+            public boolean shovel = false;
+            public boolean hoe = false;
+
+        }
+
+        public Sharpness sharpness;
+        public Smite smite;
+        public BaneOfArthropods baneOfArthropods;
+
+        public class Sharpness extends MeleeDamage {}
+
+        public class Smite extends MeleeDamage {}
+
+        public class BaneOfArthropods extends MeleeDamage {}
+
+        public abstract class MeleeDamage extends ConfigurationPart {
+
+            public boolean pickaxe = false;
+            public boolean shovel = false;
+            public boolean hoe = false;
+
+        }
+
+        public Knockback knockback;
+        public FireAspect fireAspect;
+
+        public class Knockback extends MeleeEffect {}
+
+        public class FireAspect extends MeleeEffect {}
+
+        public abstract class MeleeEffect extends ConfigurationPart {
+
+            public boolean axe = false;
+            public boolean pickaxe = false;
+            public boolean shovel = false;
+            public boolean hoe = false;
+
+        }
+
+        public Efficiency efficiency;
+        public Fortune fortune;
+        public SilkTouch silkTouch;
+
+        public class Efficiency extends AdditionalSwordEnchantment {}
+
+        public class Fortune extends AdditionalSwordEnchantment {}
+
+        public class SilkTouch extends AdditionalSwordEnchantment {}
+
+        public abstract class AdditionalSwordEnchantment extends ConfigurationPart {
+            public boolean sword = false;
+        }
+
+    }
+
+    // Suki end - custom enchantability
+
 }
