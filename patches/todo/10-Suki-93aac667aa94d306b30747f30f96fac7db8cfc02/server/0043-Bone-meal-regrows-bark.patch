From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Wed, 22 Jun 2022 20:34:42 +0200
Subject: [PATCH] Bone meal regrows bark


diff --git a/src/main/java/net/minecraft/world/item/BoneMealItem.java b/src/main/java/net/minecraft/world/item/BoneMealItem.java
index ad0af20dc32a518110c5e74a7ac54ea1c3b93bcb..75d6e48bf0be169ff7fd5263afc0b68bcaa10395 100644
--- a/src/main/java/net/minecraft/world/item/BoneMealItem.java
+++ b/src/main/java/net/minecraft/world/item/BoneMealItem.java
@@ -7,10 +7,12 @@ import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.BiomeTags;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
@@ -43,7 +45,7 @@ public class BoneMealItem extends Item {
         BlockPos blockposition = itemactioncontext.getClickedPos();
         BlockPos blockposition1 = blockposition.relative(itemactioncontext.getClickedFace());
 
-        if (BoneMealItem.growCrop(itemactioncontext.getItemInHand(), world, blockposition)) {
+        if (BoneMealItem.growCrop(itemactioncontext.getPlayer(), itemactioncontext.getItemInHand(), world, blockposition)) { // Suki - bone meal regrows bark
             if (!world.isClientSide) {
                 world.levelEvent(1505, blockposition, 0);
             }
@@ -66,6 +68,12 @@ public class BoneMealItem extends Item {
     }
 
     public static boolean growCrop(ItemStack stack, Level world, BlockPos pos) {
+        // Suki start - bone meal regrows bark
+        return growCrop(null, stack, world, pos);
+    }
+
+    public static boolean growCrop(@Nullable Player player, ItemStack stack, Level world, BlockPos pos) {
+        // Suki end - bone meal regrows bark
         BlockState iblockdata = world.getBlockState(pos);
 
         if (iblockdata.getBlock() instanceof BonemealableBlock) {
@@ -73,11 +81,15 @@ public class BoneMealItem extends Item {
 
             if (iblockfragileplantelement.isValidBonemealTarget(world, pos, iblockdata, world.isClientSide)) {
                 if (world instanceof ServerLevel) {
-                    if (iblockfragileplantelement.isBonemealSuccess(world, world.random, pos, iblockdata)) {
-                        iblockfragileplantelement.performBonemeal((ServerLevel) world, world.random, pos, iblockdata);
+                    // Suki start - bone meal regrows bark
+                    boolean success = iblockfragileplantelement.isBonemealSuccess(world, world.random, pos, iblockdata);
+                    if (success) {
+                        iblockfragileplantelement.performBonemeal(player, (ServerLevel) world, world.random, pos, iblockdata);
                     }
-
-                    stack.shrink(1);
+                    if (iblockfragileplantelement.isBonemealUsedUp(world, world.random, pos, iblockdata, success)) {
+                        stack.shrink(1);
+                    }
+                    // Suki end - bone meal regrows bark
                 }
 
                 return true;
diff --git a/src/main/java/net/minecraft/world/level/block/Blocks.java b/src/main/java/net/minecraft/world/level/block/Blocks.java
index 5dc3605fed7fb2ff8cc6c965d1bf99c462e0b14a..9b15d0a0fe5bc8c1ecb4b89eaed7a6e264940ce6 100644
--- a/src/main/java/net/minecraft/world/level/block/Blocks.java
+++ b/src/main/java/net/minecraft/world/level/block/Blocks.java
@@ -34,6 +34,7 @@ import net.minecraft.world.level.block.state.properties.WoodType;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.level.material.Material;
 import net.minecraft.world.level.material.MaterialColor;
+import org.jetbrains.annotations.NotNull;
 
 public class Blocks {
     public static final Block AIR = register("air", new AirBlock(BlockBehaviour.Properties.of(Material.AIR).noCollission().noLootTable().air()));
@@ -87,13 +88,15 @@ public class Blocks {
     public static final Block MANGROVE_LOG = register("mangrove_log", log(MaterialColor.COLOR_RED, MaterialColor.PODZOL));
     public static final Block MANGROVE_ROOTS = register("mangrove_roots", new MangroveRootsBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(0.7F).randomTicks().sound(SoundType.MANGROVE_ROOTS).noOcclusion().isSuffocating(Blocks::never).isViewBlocking(Blocks::never).noOcclusion()));
     public static final Block MUDDY_MANGROVE_ROOTS = register("muddy_mangrove_roots", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.DIRT, MaterialColor.PODZOL).strength(0.7F).sound(SoundType.MUDDY_MANGROVE_ROOTS)));
-    public static final Block STRIPPED_SPRUCE_LOG = register("stripped_spruce_log", log(MaterialColor.PODZOL, MaterialColor.PODZOL));
-    public static final Block STRIPPED_BIRCH_LOG = register("stripped_birch_log", log(MaterialColor.SAND, MaterialColor.SAND));
-    public static final Block STRIPPED_JUNGLE_LOG = register("stripped_jungle_log", log(MaterialColor.DIRT, MaterialColor.DIRT));
-    public static final Block STRIPPED_ACACIA_LOG = register("stripped_acacia_log", log(MaterialColor.COLOR_ORANGE, MaterialColor.COLOR_ORANGE));
-    public static final Block STRIPPED_DARK_OAK_LOG = register("stripped_dark_oak_log", log(MaterialColor.COLOR_BROWN, MaterialColor.COLOR_BROWN));
-    public static final Block STRIPPED_OAK_LOG = register("stripped_oak_log", log(MaterialColor.WOOD, MaterialColor.WOOD));
-    public static final Block STRIPPED_MANGROVE_LOG = register("stripped_mangrove_log", log(MaterialColor.COLOR_RED, MaterialColor.COLOR_RED));
+    // Suki start - bone meal regrows bark
+    public static final Block STRIPPED_SPRUCE_LOG = register("stripped_spruce_log", strippedLog(SPRUCE_LOG, MaterialColor.PODZOL, MaterialColor.PODZOL));
+    public static final Block STRIPPED_BIRCH_LOG = register("stripped_birch_log", strippedLog(BIRCH_LOG, MaterialColor.SAND, MaterialColor.SAND));
+    public static final Block STRIPPED_JUNGLE_LOG = register("stripped_jungle_log", strippedLog(JUNGLE_LOG, MaterialColor.DIRT, MaterialColor.DIRT));
+    public static final Block STRIPPED_ACACIA_LOG = register("stripped_acacia_log", strippedLog(ACACIA_LOG, MaterialColor.COLOR_ORANGE, MaterialColor.COLOR_ORANGE));
+    public static final Block STRIPPED_DARK_OAK_LOG = register("stripped_dark_oak_log", strippedLog(DARK_OAK_LOG, MaterialColor.COLOR_BROWN, MaterialColor.COLOR_BROWN));
+    public static final Block STRIPPED_OAK_LOG = register("stripped_oak_log", strippedLog(OAK_LOG, MaterialColor.WOOD, MaterialColor.WOOD));
+    public static final Block STRIPPED_MANGROVE_LOG = register("stripped_mangrove_log", strippedLog(MANGROVE_LOG, MaterialColor.COLOR_RED, MaterialColor.COLOR_RED));
+    // Suki end - bone meal regrows bark
     public static final Block OAK_WOOD = register("oak_wood", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
     public static final Block SPRUCE_WOOD = register("spruce_wood", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
     public static final Block BIRCH_WOOD = register("birch_wood", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
@@ -101,13 +104,15 @@ public class Blocks {
     public static final Block ACACIA_WOOD = register("acacia_wood", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_GRAY).strength(2.0F).sound(SoundType.WOOD)));
     public static final Block DARK_OAK_WOOD = register("dark_oak_wood", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
     public static final Block MANGROVE_WOOD = register("mangrove_wood", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_RED).strength(2.0F).sound(SoundType.WOOD)));
-    public static final Block STRIPPED_OAK_WOOD = register("stripped_oak_wood", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.WOOD).strength(2.0F).sound(SoundType.WOOD)));
-    public static final Block STRIPPED_SPRUCE_WOOD = register("stripped_spruce_wood", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD)));
-    public static final Block STRIPPED_BIRCH_WOOD = register("stripped_birch_wood", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.SAND).strength(2.0F).sound(SoundType.WOOD)));
-    public static final Block STRIPPED_JUNGLE_WOOD = register("stripped_jungle_wood", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.DIRT).strength(2.0F).sound(SoundType.WOOD)));
-    public static final Block STRIPPED_ACACIA_WOOD = register("stripped_acacia_wood", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_ORANGE).strength(2.0F).sound(SoundType.WOOD)));
-    public static final Block STRIPPED_DARK_OAK_WOOD = register("stripped_dark_oak_wood", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.COLOR_BROWN).strength(2.0F).sound(SoundType.WOOD)));
-    public static final Block STRIPPED_MANGROVE_WOOD = register("stripped_mangrove_wood", log(MaterialColor.COLOR_RED, MaterialColor.COLOR_RED));
+    // Suki start - bone meal regrows bark
+    public static final Block STRIPPED_OAK_WOOD = register("stripped_oak_wood", strippedWood(OAK_WOOD, MaterialColor.WOOD));
+    public static final Block STRIPPED_SPRUCE_WOOD = register("stripped_spruce_wood", strippedWood(SPRUCE_WOOD, MaterialColor.PODZOL));
+    public static final Block STRIPPED_BIRCH_WOOD = register("stripped_birch_wood", strippedWood(BIRCH_WOOD, MaterialColor.SAND));
+    public static final Block STRIPPED_JUNGLE_WOOD = register("stripped_jungle_wood", strippedWood(JUNGLE_WOOD, MaterialColor.DIRT));
+    public static final Block STRIPPED_ACACIA_WOOD = register("stripped_acacia_wood", strippedWood(ACACIA_WOOD, MaterialColor.COLOR_ORANGE));
+    public static final Block STRIPPED_DARK_OAK_WOOD = register("stripped_dark_oak_wood", strippedWood(DARK_OAK_WOOD, MaterialColor.COLOR_BROWN));
+    public static final Block STRIPPED_MANGROVE_WOOD = register("stripped_mangrove_wood", strippedWood(MANGROVE_WOOD, MaterialColor.COLOR_RED));
+    // Suki end - bone meal regrows bark
     public static final Block OAK_LEAVES = register("oak_leaves", leaves(SoundType.GRASS));
     public static final Block SPRUCE_LEAVES = register("spruce_leaves", leaves(SoundType.GRASS));
     public static final Block BIRCH_LEAVES = register("birch_leaves", leaves(SoundType.GRASS));
@@ -835,9 +840,9 @@ public class Blocks {
     public static final Block SOUL_CAMPFIRE = register("soul_campfire", new CampfireBlock(false, 2, BlockBehaviour.Properties.of(Material.WOOD, MaterialColor.PODZOL).strength(2.0F).sound(SoundType.WOOD).lightLevel(litBlockEmission(10)).noOcclusion()));
     public static final Block SWEET_BERRY_BUSH = register("sweet_berry_bush", new SweetBerryBushBlock(BlockBehaviour.Properties.of(Material.PLANT).randomTicks().noCollission().sound(SoundType.SWEET_BERRY_BUSH)));
     public static final Block WARPED_STEM = register("warped_stem", netherStem(MaterialColor.WARPED_STEM));
-    public static final Block STRIPPED_WARPED_STEM = register("stripped_warped_stem", netherStem(MaterialColor.WARPED_STEM));
+    public static final Block STRIPPED_WARPED_STEM = register("stripped_warped_stem", strippedStem(WARPED_STEM, MaterialColor.WARPED_STEM)); // Suki - bone meal regrows bark
     public static final Block WARPED_HYPHAE = register("warped_hyphae", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.NETHER_WOOD, MaterialColor.WARPED_HYPHAE).strength(2.0F).sound(SoundType.STEM)));
-    public static final Block STRIPPED_WARPED_HYPHAE = register("stripped_warped_hyphae", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.NETHER_WOOD, MaterialColor.WARPED_HYPHAE).strength(2.0F).sound(SoundType.STEM)));
+    public static final Block STRIPPED_WARPED_HYPHAE = register("stripped_warped_hyphae", strippedHyphae(WARPED_HYPHAE, MaterialColor.WARPED_HYPHAE)); // Suki - bone meal regrows bark
     public static final Block WARPED_NYLIUM = register("warped_nylium", new NyliumBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.WARPED_NYLIUM).requiresCorrectToolForDrops().strength(0.4F).sound(SoundType.NYLIUM).randomTicks()));
     public static final Block WARPED_FUNGUS = register("warped_fungus", new FungusBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.COLOR_CYAN).instabreak().noCollission().sound(SoundType.FUNGUS), () -> {
         return TreeFeatures.WARPED_FUNGUS_PLANTED;
@@ -846,9 +851,9 @@ public class Blocks {
     public static final Block WARPED_ROOTS = register("warped_roots", new RootsBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_FIREPROOF_PLANT, MaterialColor.COLOR_CYAN).noCollission().instabreak().sound(SoundType.ROOTS).offsetType(BlockBehaviour.OffsetType.XZ)));
     public static final Block NETHER_SPROUTS = register("nether_sprouts", new NetherSproutsBlock(BlockBehaviour.Properties.of(Material.REPLACEABLE_FIREPROOF_PLANT, MaterialColor.COLOR_CYAN).noCollission().instabreak().sound(SoundType.NETHER_SPROUTS).offsetType(BlockBehaviour.OffsetType.XZ)));
     public static final Block CRIMSON_STEM = register("crimson_stem", netherStem(MaterialColor.CRIMSON_STEM));
-    public static final Block STRIPPED_CRIMSON_STEM = register("stripped_crimson_stem", netherStem(MaterialColor.CRIMSON_STEM));
+    public static final Block STRIPPED_CRIMSON_STEM = register("stripped_crimson_stem", strippedStem(CRIMSON_STEM, MaterialColor.CRIMSON_STEM)); // Suki - bone meal regrows bark
     public static final Block CRIMSON_HYPHAE = register("crimson_hyphae", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.NETHER_WOOD, MaterialColor.CRIMSON_HYPHAE).strength(2.0F).sound(SoundType.STEM)));
-    public static final Block STRIPPED_CRIMSON_HYPHAE = register("stripped_crimson_hyphae", new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.NETHER_WOOD, MaterialColor.CRIMSON_HYPHAE).strength(2.0F).sound(SoundType.STEM)));
+    public static final Block STRIPPED_CRIMSON_HYPHAE = register("stripped_crimson_hyphae", strippedHyphae(CRIMSON_HYPHAE, MaterialColor.CRIMSON_HYPHAE)); // Suki - bone meal regrows bark
     public static final Block CRIMSON_NYLIUM = register("crimson_nylium", new NyliumBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.CRIMSON_NYLIUM).requiresCorrectToolForDrops().strength(0.4F).sound(SoundType.NYLIUM).randomTicks()));
     public static final Block CRIMSON_FUNGUS = register("crimson_fungus", new FungusBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.NETHER).instabreak().noCollission().sound(SoundType.FUNGUS), () -> {
         return TreeFeatures.CRIMSON_FUNGUS_PLANTED;
@@ -1091,7 +1096,7 @@ public class Blocks {
     }
 
     private static Boolean ocelotOrParrot(BlockState state, BlockGetter world, BlockPos pos, EntityType<?> type) {
-        return (boolean)type == EntityType.OCELOT || type == EntityType.PARROT;
+        return type == EntityType.OCELOT || type == EntityType.PARROT;
     }
 
     private static BedBlock bed(DyeColor color) {
@@ -1106,6 +1111,27 @@ public class Blocks {
         }).strength(2.0F).sound(SoundType.WOOD));
     }
 
+
+    // Suki start - bone meal regrows bark
+
+    private static StrippedLogBlock strippedLog(@NotNull Block unstrippedBlock, MaterialColor topMapColor, MaterialColor sideMapColor) {
+        return new StrippedLogBlock(unstrippedBlock, topMapColor, sideMapColor);
+    }
+
+    private static StrippedWoodBlock strippedWood(@NotNull Block unstrippedBlock, MaterialColor mapColor) {
+        return new StrippedWoodBlock(unstrippedBlock, mapColor);
+    }
+
+    private static StrippedStemBlock strippedStem(@NotNull Block unstrippedBlock, MaterialColor mapColor) {
+        return new StrippedStemBlock(unstrippedBlock, mapColor);
+    }
+
+    private static StrippedHyphaeBlock strippedHyphae(@NotNull Block unstrippedBlock, MaterialColor mapColor) {
+        return new StrippedHyphaeBlock(unstrippedBlock, mapColor);
+    }
+
+    // Suki end - bone meal regrows bark
+
     private static Block netherStem(MaterialColor mapColor) {
         return new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.NETHER_WOOD, (state) -> {
             return mapColor;
diff --git a/src/main/java/net/minecraft/world/level/block/BonemealableBlock.java b/src/main/java/net/minecraft/world/level/block/BonemealableBlock.java
index 7ee556bed7009292331158ed51d97714ab5b777b..90e77749ec5cb64fd4fd478f06ccceab8ca63912 100644
--- a/src/main/java/net/minecraft/world/level/block/BonemealableBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BonemealableBlock.java
@@ -2,10 +2,13 @@ package net.minecraft.world.level.block;
 
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.RandomSource;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
+import org.jetbrains.annotations.Nullable;
 
 public interface BonemealableBlock {
     boolean isValidBonemealTarget(BlockGetter world, BlockPos pos, BlockState state, boolean isClient);
@@ -13,4 +16,17 @@ public interface BonemealableBlock {
     boolean isBonemealSuccess(Level world, RandomSource random, BlockPos pos, BlockState state);
 
     void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state);
+
+    // Suki start - bone meal regrows bark
+
+    default void performBonemeal(@Nullable Player player, ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
+        performBonemeal(world, random, pos, state);
+    }
+
+    default boolean isBonemealUsedUp(Level world, RandomSource random, BlockPos pos, BlockState state, boolean success) {
+        return true;
+    }
+
+    // Suki end - bone meal regrows bark
+
 }
diff --git a/src/main/java/net/minecraft/world/level/block/StrippedBlock.java b/src/main/java/net/minecraft/world/level/block/StrippedBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..e333c1722d1b2eb02c2f45cb0cf640b184b22bfa
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/block/StrippedBlock.java
@@ -0,0 +1,72 @@
+// Suki - bone meal regrows bark
+
+package net.minecraft.world.level.block;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.sounds.SoundEvents;
+import net.minecraft.sounds.SoundSource;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.gameevent.GameEvent;
+import net.minecraft.world.level.material.Material;
+import net.minecraft.world.level.material.MaterialColor;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public abstract class StrippedBlock extends RotatedPillarBlock implements BonemealableBlock {
+
+    public final @NotNull Block unstrippedBlock;
+
+    public StrippedBlock(@NotNull Block unstrippedBlock, BlockBehaviour.Properties settingsWithoutStrenthOrSound, SoundType soundType) {
+        super(settingsWithoutStrenthOrSound.strength(2.0F).sound(soundType));
+        this.unstrippedBlock = unstrippedBlock;
+    }
+
+    public StrippedBlock(@NotNull Block unstrippedBlock, Material material, MaterialColor mapColor, SoundType soundType) {
+        this(
+            unstrippedBlock,
+            Properties.of(
+                material,
+                mapColor
+            ), soundType
+        );
+    }
+
+    @Override
+    public boolean isValidBonemealTarget(BlockGetter world, BlockPos pos, BlockState state, boolean isClient) {
+        if (world instanceof Level level) {
+            return level.sukiConfig().boneMealRegrowsBark.enabled;
+        }
+        return false;
+    }
+
+    @Override
+    public boolean isBonemealSuccess(Level world, RandomSource random, BlockPos pos, BlockState state) {
+        return true;
+    }
+
+    @Override
+    public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
+        performBonemeal(null, world, random, pos, state);
+    }
+
+    @Override
+    public void performBonemeal(@Nullable Player player, ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
+        world.playSound(null, pos, SoundEvents.AXE_STRIP, SoundSource.BLOCKS, 1.0F, 1.0F);
+        BlockState newState = unstrippedBlock.defaultBlockState().setValue(RotatedPillarBlock.AXIS, state.getValue(RotatedPillarBlock.AXIS));
+        world.setBlock(pos, newState, 3);
+        world.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(player, newState));
+    }
+
+    @Override
+    public boolean isBonemealUsedUp(Level world, RandomSource random, BlockPos pos, BlockState state, boolean success) {
+        return (double) world.random.nextFloat() < world.sukiConfig().boneMealRegrowsBark.boneMealIsUsedUpChance;
+    }
+
+}
diff --git a/src/main/java/net/minecraft/world/level/block/StrippedHyphaeBlock.java b/src/main/java/net/minecraft/world/level/block/StrippedHyphaeBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..c18aca56348a11bd33597710f770f977aa8da873
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/block/StrippedHyphaeBlock.java
@@ -0,0 +1,20 @@
+// Suki - bone meal regrows bark
+
+package net.minecraft.world.level.block;
+
+import net.minecraft.world.level.material.Material;
+import net.minecraft.world.level.material.MaterialColor;
+import org.jetbrains.annotations.NotNull;
+
+public class StrippedHyphaeBlock extends StrippedBlock {
+
+    public StrippedHyphaeBlock(@NotNull Block unstrippedBlock, MaterialColor mapColor) {
+        super(
+            unstrippedBlock,
+            Material.NETHER_WOOD,
+            mapColor,
+            SoundType.STEM
+        );
+    }
+
+}
diff --git a/src/main/java/net/minecraft/world/level/block/StrippedLogBlock.java b/src/main/java/net/minecraft/world/level/block/StrippedLogBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..0a1dbd9fa8086d6d7b3b231de859ffbd9f0f5653
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/block/StrippedLogBlock.java
@@ -0,0 +1,24 @@
+// Suki - bone meal regrows bark
+
+package net.minecraft.world.level.block;
+
+import net.minecraft.core.Direction;
+import net.minecraft.world.level.block.state.BlockBehaviour;
+import net.minecraft.world.level.material.Material;
+import net.minecraft.world.level.material.MaterialColor;
+import org.jetbrains.annotations.NotNull;
+
+public class StrippedLogBlock extends StrippedBlock {
+
+    public StrippedLogBlock(@NotNull Block unstrippedBlock, MaterialColor topMapColor, MaterialColor sideMapColor) {
+        super(
+            unstrippedBlock,
+            BlockBehaviour.Properties.of(
+                Material.WOOD,
+                state -> state.getValue(RotatedPillarBlock.AXIS) == Direction.Axis.Y ? topMapColor : sideMapColor
+            ),
+            SoundType.WOOD
+        );
+    }
+
+}
diff --git a/src/main/java/net/minecraft/world/level/block/StrippedStemBlock.java b/src/main/java/net/minecraft/world/level/block/StrippedStemBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..6ff782b536a1a2a6afb6ec233cb68b825be36183
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/block/StrippedStemBlock.java
@@ -0,0 +1,20 @@
+// Suki - bone meal regrows bark
+
+package net.minecraft.world.level.block;
+
+import net.minecraft.world.level.material.Material;
+import net.minecraft.world.level.material.MaterialColor;
+import org.jetbrains.annotations.NotNull;
+
+public class StrippedStemBlock extends StrippedBlock {
+
+    public StrippedStemBlock(@NotNull Block unstrippedBlock, MaterialColor mapColor) {
+        super(
+            unstrippedBlock,
+            Material.NETHER_WOOD,
+            mapColor,
+            SoundType.STEM
+        );
+    }
+
+}
diff --git a/src/main/java/net/minecraft/world/level/block/StrippedWoodBlock.java b/src/main/java/net/minecraft/world/level/block/StrippedWoodBlock.java
new file mode 100644
index 0000000000000000000000000000000000000000..32d7035f98aa575c4b65d154c312a13047a24fb7
--- /dev/null
+++ b/src/main/java/net/minecraft/world/level/block/StrippedWoodBlock.java
@@ -0,0 +1,20 @@
+// Suki - bone meal regrows bark
+
+package net.minecraft.world.level.block;
+
+import net.minecraft.world.level.material.Material;
+import net.minecraft.world.level.material.MaterialColor;
+import org.jetbrains.annotations.NotNull;
+
+public class StrippedWoodBlock extends StrippedBlock {
+
+    public StrippedWoodBlock(@NotNull Block unstrippedBlock, MaterialColor mapColor) {
+        super(
+            unstrippedBlock,
+            Material.WOOD,
+            mapColor,
+            SoundType.WOOD
+        );
+    }
+
+}
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java
index d7f59a828a3258f3208881f3e720f81010207ca8..14bee02adbf2322e226bc90c4fb27c70b0a3b844 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java
@@ -582,4 +582,18 @@ public class SukiWorldConfiguration extends ConfigurationPart {
 
     // Suki end - network-constrained chunk sending
 
+    // Suki start - bone meal regrows bark
+
+    public BoneMealRegrowsBark boneMealRegrowsBark;
+
+    public class BoneMealRegrowsBark extends ConfigurationPart {
+
+        public boolean enabled = false;
+
+        public double boneMealIsUsedUpChance = 1.0;
+
+    }
+
+    // Suki end - bone meal regrows bark
+
 }
