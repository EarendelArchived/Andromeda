From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sun, 9 Oct 2022 17:22:02 +0200
Subject: [PATCH] Hide player game modes


diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 734f05ee6f4ff997403f900760037a4f474effa4..03bc6298d6b50fe9a321dbf916000109889987be 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -10,7 +10,9 @@ import net.kyori.adventure.text.format.NamedTextColor;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ServerboundPlaceRecipePacket;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.level.GameType;
 import org.bukkit.Bukkit; // Pufferfish
+import org.bukkit.GameMode;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.checker.units.qual.A;
 import org.spongepowered.configurate.objectmapping.ConfigSerializable;
@@ -19,6 +21,7 @@ import org.spongepowered.configurate.objectmapping.meta.Required;
 import org.spongepowered.configurate.objectmapping.meta.Setting;
 
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
 import java.util.logging.Level; // Pufferfish
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 7187c57fb9c7b9f5b04728d942e4de1dade525d7..4bc4cbb55b0a1040788d2e1e41ff58c7c0310292 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -36,6 +36,7 @@ import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.PacketFlow;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket;
 import net.minecraft.network.protocol.login.ClientboundLoginDisconnectPacket;
 import net.minecraft.server.RunningOnDifferentThreadException;
 import net.minecraft.util.LazyLoadedValue;
@@ -458,7 +459,8 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         // Paper start - add flush parameter
         this.doSendPacket(packet, callbacks, packetState, currentState, true);
     }
-    private void doSendPacket(Packet<?> packet, @Nullable PacketSendListener callbacks, ConnectionProtocol packetState, ConnectionProtocol currentState, boolean flush) {
+
+    private void doSendPacket(Packet<?> givenPacket, @Nullable PacketSendListener callbacks, ConnectionProtocol packetState, ConnectionProtocol currentState, boolean flush) { // Suki - hide game modes
         // Paper end - add flush parameter
         if (packetState != currentState) {
             this.setProtocol(packetState);
@@ -467,10 +469,18 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         // Paper start
         net.minecraft.server.level.ServerPlayer player = getPlayer();
         if (!isConnected()) {
-            packet.onPacketDispatchFinish(player, null);
+            givenPacket.onPacketDispatchFinish(player, null); // Suki - hide game modes
             return;
         }
 
+        // Suki start - hide game modes
+        Packet<?> replaceablePacket = givenPacket;
+        if (replaceablePacket instanceof ClientboundPlayerInfoPacket playerInfoPacket) {
+            replaceablePacket = playerInfoPacket.cloneForPacketReceiver(player);
+        }
+        Packet<?> packet = replaceablePacket;
+        // Suki end - hide game modes
+
         try {
             // Paper end
         ChannelFuture channelfuture = flush ? this.channel.writeAndFlush(packet) : this.channel.write(packet); // Paper - add flush parameter
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
index 46ae5d40c26264e6b0ca253afa65b7846e6e5e6d..a83bb31c246503005f174c15f36454fb9895988b 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
@@ -3,15 +3,20 @@ package net.minecraft.network.protocol.game;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
+
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 import javax.annotation.Nullable;
+
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.player.ProfilePublicKey;
 import net.minecraft.world.level.GameType;
+import org.bukkit.craftbukkit.util.permissions.CraftDefaultPermissions;
+import org.sucraft.suki.configuration.SukiGlobalConfiguration;
 
 public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListener> {
     private final ClientboundPlayerInfoPacket.Action action;
@@ -37,6 +42,39 @@ public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListe
 
     }
 
+    // Suki start - hide game modes
+
+    public ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action action, List<ClientboundPlayerInfoPacket.PlayerUpdate> entries) {
+        this.action = action;
+        this.entries = entries;
+    }
+
+    public ClientboundPlayerInfoPacket cloneForPacketReceiver(ServerPlayer packetReceiver) {
+        // Only initialize the new entries if it contains any differences to the original entries
+        List<ClientboundPlayerInfoPacket.PlayerUpdate> newEntries = null;
+        for (int entryI = 0; entryI < this.entries.size(); entryI++) {
+            ClientboundPlayerInfoPacket.PlayerUpdate entry = this.entries.get(entryI);
+            ClientboundPlayerInfoPacket.PlayerUpdate newEntry = entry.cloneForPacketReceiver(packetReceiver);
+            // Only if the new entry is different from the original entry
+            if (entry != newEntry) {
+                // Initialize the new entries if not initialized yet
+                if (newEntries == null) {
+                    newEntries = new ArrayList<>(this.entries);
+                }
+                // Replace the entry
+                newEntries.set(entryI, newEntry);
+            }
+        }
+        // If no entries were replaced, we do not have to create a clone
+        if (newEntries == null) {
+            return this;
+        }
+        // Otherwise, instantiate and return a clone with the new entries
+        return new ClientboundPlayerInfoPacket(this.action, newEntries);
+    }
+
+    // Suki end - hide game modes
+
     public ClientboundPlayerInfoPacket(FriendlyByteBuf buf) {
         this.action = buf.readEnum(ClientboundPlayerInfoPacket.Action.class);
         this.entries = buf.readList(this.action::read);
@@ -87,7 +125,7 @@ public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListe
             @Override
             protected void write(FriendlyByteBuf buf, ClientboundPlayerInfoPacket.PlayerUpdate entry) {
                 buf.writeGameProfile(entry.getProfile());
-                buf.writeVarInt(entry.getGameMode().getId());
+                buf.writeVarInt((entry.isRealGameModeVisible ? entry.getGameMode() : SukiGlobalConfiguration.get().hideGameModes.replace(entry.getGameMode())).getId()); // Suki - hide game modes
                 buf.writeVarInt(entry.getLatency());
                 buf.writeNullable(entry.getDisplayName(), FriendlyByteBuf::writeComponent);
                 buf.writeNullable(entry.getProfilePublicKey(), (buf2, publicKeyData) -> {
@@ -106,7 +144,7 @@ public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListe
             @Override
             protected void write(FriendlyByteBuf buf, ClientboundPlayerInfoPacket.PlayerUpdate entry) {
                 buf.writeUUID(entry.getProfile().getId());
-                buf.writeVarInt(entry.getGameMode().getId());
+                buf.writeVarInt((entry.isRealGameModeVisible ? entry.getGameMode() : SukiGlobalConfiguration.get().hideGameModes.replace(entry.getGameMode())).getId()); // Suki - hide game modes
             }
         },
         UPDATE_LATENCY {
@@ -156,6 +194,7 @@ public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListe
     }
 
     public static class PlayerUpdate {
+        private boolean isRealGameModeVisible; // Suki - hide game modes
         private final int latency;
         private final GameType gameMode;
         private final GameProfile profile;
@@ -165,6 +204,7 @@ public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListe
         private final ProfilePublicKey.Data profilePublicKey;
 
         public PlayerUpdate(GameProfile profile, int latency, @Nullable GameType gameMode, @Nullable Component displayName, @Nullable ProfilePublicKey.Data publicKeyData) {
+            this.isRealGameModeVisible = false; // Suki - hide game modes
             this.profile = profile;
             this.latency = latency;
             this.gameMode = gameMode;
@@ -172,6 +212,32 @@ public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListe
             this.profilePublicKey = publicKeyData;
         }
 
+        // Suki start - hide game modes
+
+        public PlayerUpdate cloneWithRealGameModeVisible() {
+            if (this.isRealGameModeVisible) {
+                return this;
+            }
+            PlayerUpdate clone = new PlayerUpdate(this.profile, this.latency, this.gameMode, this.displayName, this.profilePublicKey);
+            clone.isRealGameModeVisible = true;
+            return clone;
+        }
+
+        public PlayerUpdate cloneForPacketReceiver(ServerPlayer packetReceiver) {
+            // Players receive their own real game mode
+            if (packetReceiver.gameProfile.equals(this.profile)) {
+                return this.cloneWithRealGameModeVisible();
+            }
+            // Players with permission to see all game modes receive the real game mode
+            if (packetReceiver.getBukkitEntity().hasPermission(CraftDefaultPermissions.seeRealGameModes)) {
+                return this.cloneWithRealGameModeVisible();
+            }
+            // Otherwise, the sent game mode may be replaced if configured in the configuration
+            return this;
+        }
+
+        // Suki end - hide game modes
+
         public GameProfile getProfile() {
             return this.profile;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java b/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java
index e33d03616979e3ddf8745514e2cdbe548dd784e6..09ca1113c2442576c9184dca9df0a9f995126a14 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/permissions/CraftDefaultPermissions.java
@@ -18,6 +18,8 @@ public final class CraftDefaultPermissions {
     public static Permission putAllBlocksAndItemsOnHead;
     // Suki end - more items placeable on head
 
+    public static Permission seeRealGameModes; // Suki - hide game modes
+
     private CraftDefaultPermissions() {}
 
     public static void registerCorePermissions() {
@@ -36,6 +38,7 @@ public final class CraftDefaultPermissions {
         putBannersOnHead = DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".moreitemsonhead.banner", "Gives the user the ability to put banners into their head armor slot", org.bukkit.permissions.PermissionDefault.FALSE, parent);
         putAllBlocksAndItemsOnHead = DefaultPermissions.registerPermission(CraftDefaultPermissions.ROOT + ".moreitemsonhead.all", "Gives the user the ability to put any block or item into their head armor slot", org.bukkit.permissions.PermissionDefault.FALSE, parent);
         // Suki end - more items placeable on head
+        seeRealGameModes = DefaultPermissions.registerPermission(CraftDefaultPermissions.SUKI_ROOT + ".seerealgamemodes", "Gives the user the permission to receive the real game modes of other players", org.bukkit.permissions.PermissionDefault.OP, parent); // Suki - hide game modes
         // Spigot end
         parent.recalculatePermissibles();
     }
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
index 790c13919b4b65f4554692b80d51eebf711daae1..b8b4c2189811640a1aca73c2bdc2043ee96782fe 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
@@ -5,8 +5,12 @@ package org.sucraft.suki.configuration;
 import io.papermc.paper.configuration.Configuration;
 import io.papermc.paper.configuration.ConfigurationPart;
 import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.level.GameType;
+import org.bukkit.GameMode;
 import org.spongepowered.configurate.objectmapping.meta.Setting;
 
+import java.util.Locale;
+
 @SuppressWarnings({"CanBeFinal", "FieldCanBeLocal", "FieldMayBeFinal", "NotNullFieldNotInitialized", "InnerClassMayBeStatic"})
 public class SukiGlobalConfiguration extends ConfigurationPart {
     static final int CURRENT_VERSION = 18;
@@ -389,4 +393,42 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
 
     // Suki end - custom enchantability
 
+    // Suki start - hide game modes
+
+    public HideGameModes hideGameModes;
+
+    public class HideGameModes extends ConfigurationPart {
+
+        /**
+         * Any of the following (case-insensitive):
+         * <ul>
+         * <li>survival</li>
+         * <li>creative</li>
+         * <li>adventure</li>
+         * <li>spectator</li>
+         * </ul>
+         * Any other value disables this feature
+         */
+        public String replacement = "none";
+
+        public GameMode replace(GameMode original) {
+            try {
+                return GameMode.valueOf(replacement.toUpperCase(Locale.ROOT));
+            } catch (Exception ignored) {
+                return original;
+            }
+        }
+
+        public GameType replace(GameType original) {
+            try {
+                return GameType.valueOf(replacement.toUpperCase(Locale.ROOT));
+            } catch (Exception ignored) {
+                return original;
+            }
+        }
+
+    }
+
+    // Suki end - hide game modes
+
 }
