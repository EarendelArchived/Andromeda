From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Thu, 9 Jun 2022 01:17:32 +0200
Subject: [PATCH] Network-constrained chunk sending


diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
index 9da5a6086323ff4c4fd62a035fa8f7efc3d92e38..d9b224efd0792a3309973fc0aeb013d76b1fb63a 100644
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -50,6 +50,15 @@ public final class MinecraftTimings {
 
     public static final Timing midTickChunkTasks = Timings.ofSafe("Mid Tick Chunk Tasks");
 
+    // Suki start - network-constrained chunk sending - PlayerChunkLoader timings
+    public static final Timing playerChunkLoaderMidTick = Timings.ofSafe("PlayerChunkLoader - Mid Tick");
+    public static final Timing playerChunkLoaderTrySendChunks = Timings.ofSafe("PlayerChunkLoader - trySendChunks");
+    public static final Timing playerChunkLoaderTryLoadChunks = Timings.ofSafe("PlayerChunkLoader - tryLoadChunks");
+    public static final Timing playerChunkLoaderPopulateChunkSendWaitQueue = Timings.ofSafe("PlayerChunkLoader - Populate chunkSendWaitQueue");
+    public static final Timing playerChunkLoaderPopulateChunkSendQueue = Timings.ofSafe("PlayerChunkLoader - Populate chunkSendQueue");
+    public static final Timing playerChunkLoaderSendChunks = Timings.ofSafe("PlayerChunkLoader - Send chunks");
+    // Suki end - network-constrained chunk sending - PlayerChunkLoader timings
+
     private static final Map<Class<?>, String> taskNameCache = new MapMaker().weakKeys().makeMap();
 
     private MinecraftTimings() {}
diff --git a/src/main/java/co/aikar/timings/WorldTimingsHandler.java b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
index dda0f831d0e3768f5798705695742d0c9052f963..92adec4f5a81e94c81cbb96db878e9427971074f 100644
--- a/src/main/java/co/aikar/timings/WorldTimingsHandler.java
+++ b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
@@ -90,6 +90,11 @@ public class WorldTimingsHandler {
     public final Timing chunkUnloadPOISerialization;
     public final Timing chunkUnloadDataSave;
 
+    // Suki start - network-constrained chunk sending - timings
+    public final Timing removeOverdueChunkInitializationPacketsInTransit;
+    public final Timing removePacketsInTransitUpToKeepaliveId;
+    // Suki end - network-constrained chunk sending - timings
+
     public WorldTimingsHandler(Level server) {
         String name = ((PrimaryLevelData) server.getLevelData()).getLevelName() + " - ";
 
@@ -174,6 +179,12 @@ public class WorldTimingsHandler {
         chunkUnloadPrepareSave = Timings.ofSafe(name + "Chunk unload - Async Save Prepare");
         chunkUnloadPOISerialization = Timings.ofSafe(name + "Chunk unload - POI Data Serialization");
         chunkUnloadDataSave = Timings.ofSafe(name + "Chunk unload - Data Serialization");
+
+        // Suki start - network-constrained chunk sending - timings
+        removeOverdueChunkInitializationPacketsInTransit = Timings.ofSafe("Disregard overdue chunk packets");
+        removePacketsInTransitUpToKeepaliveId = Timings.ofSafe("Remove received chunk packets");
+        // Suki end - network-constrained chunk sending - timings
+
     }
 
     public static Timing getTickList(ServerLevel worldserver, String timingsType) {
diff --git a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
index 831dd74063fc576b9475fde96da7da71181fbb46..1b8ab77ffa907700b37f9edbfcd9b57b5448492c 100644
--- a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
@@ -25,7 +25,9 @@ import org.bukkit.entity.Player;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
+import java.util.NoSuchElementException;
 import java.util.TreeSet;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -112,26 +114,35 @@ public final class PlayerChunkLoader {
         return Integer.compare(System.identityHashCode(p1), System.identityHashCode(p2));
     });
 
-    protected final TreeSet<PlayerLoaderData> chunkSendWaitQueue = new TreeSet<>((final PlayerLoaderData p1, final PlayerLoaderData p2) -> {
-        if (p1 == p2) {
-            return 0;
-        }
+    // Suki start - network-constrained chunk sending
 
-        final int timeCompare = Long.compare(p1.nextChunkSendTarget, p2.nextChunkSendTarget);
-        if (timeCompare != 0) {
-            return timeCompare;
-        }
+    protected TreeSet<PlayerLoaderData> createSendWaitQueue() {
+        return new TreeSet<>((final PlayerLoaderData p1, final PlayerLoaderData p2) -> {
+            if (p1 == p2) {
+                return 0;
+            }
 
-        final int idCompare = Integer.compare(p1.player.getId(), p2.player.getId());
+            final int timeCompare = Long.compare(p1.nextChunkSendTarget, p2.nextChunkSendTarget);
+            if (timeCompare != 0) {
+                return timeCompare;
+            }
 
-        if (idCompare != 0) {
-            return idCompare;
-        }
+            final int idCompare = Integer.compare(p1.player.getId(), p2.player.getId());
 
-        // last resort
-        return Integer.compare(System.identityHashCode(p1), System.identityHashCode(p2));
-    });
+            if (idCompare != 0) {
+                return idCompare;
+            }
 
+            // last resort
+            return Integer.compare(System.identityHashCode(p1), System.identityHashCode(p2));
+        });
+    }
+
+    protected final TreeSet<PlayerLoaderData> transmittingWaitQueue = createSendWaitQueue();
+
+    protected final TreeSet<PlayerLoaderData> chunkSendWaitQueue = createSendWaitQueue();
+
+    // Suki end - network-constrained chunk sending
 
     // no throttling is applied below this VD for loading
 
@@ -522,6 +533,7 @@ public final class PlayerChunkLoader {
         loaderData.remove();
         this.chunkLoadQueue.remove(loaderData);
         this.chunkSendQueue.remove(loaderData);
+        this.transmittingWaitQueue.remove(loaderData);
         this.chunkSendWaitQueue.remove(loaderData);
         synchronized (this.sendingChunkCounts) {
             final int count = this.sendingChunkCounts.removeInt(loaderData);
@@ -558,11 +570,37 @@ public final class PlayerChunkLoader {
     protected final Reference2IntOpenHashMap<PlayerLoaderData> sendingChunkCounts = new Reference2IntOpenHashMap<>();
     private static long nextChunkSend;
     private void trySendChunks() {
+        co.aikar.timings.MinecraftTimings.playerChunkLoaderTrySendChunks.startTiming(); try { // Suki - network-constrained chunk sending - PlayerChunkLoader timings
         final long time = System.nanoTime();
         if (time < nextChunkSend) {
             return;
         }
+        // Suki start - network-constrained chunk sending
+        // drain entries from busy transmitting wait queue
+        co.aikar.timings.MinecraftTimings.playerChunkLoaderPopulateChunkSendWaitQueue.startTiming(); try { // Suki - network-constrained chunk sending - PlayerChunkLoader timings
+        Iterator<PlayerLoaderData> transmittingWaitQueueIterator = this.transmittingWaitQueue.iterator();
+        while (transmittingWaitQueueIterator.hasNext()) {
+            PlayerLoaderData data = transmittingWaitQueueIterator.next();
+            ChunkPriorityHolder firstQueuedSend;
+            {
+                var trackSendQueue = data.getSendQueue(true);
+                firstQueuedSend = trackSendQueue.isEmpty() ? null : trackSendQueue.first();
+            }
+            if (firstQueuedSend == null) {
+                var seeSendQueue = data.getSendQueue(false);
+                firstQueuedSend = seeSendQueue.isEmpty() ? null : seeSendQueue.first();
+            }
+            if (firstQueuedSend != null) {
+                if (data.player.canSendChunkInitializationPacketNow(new ChunkPos(firstQueuedSend.chunkX, firstQueuedSend.chunkZ))) {
+                    transmittingWaitQueueIterator.remove();
+                    this.chunkSendWaitQueue.add(data);
+                }
+            }
+        }
+        } finally { co.aikar.timings.MinecraftTimings.playerChunkLoaderPopulateChunkSendWaitQueue.stopTiming(); } // Suki - network-constrained chunk sending - PlayerChunkLoader timings
+        // Suki end - network-constrained chunk sending
         // drain entries from wait queue
+        co.aikar.timings.MinecraftTimings.playerChunkLoaderPopulateChunkSendQueue.startTiming(); try { // Suki - network-constrained chunk sending - PlayerChunkLoader timings
         while (!this.chunkSendWaitQueue.isEmpty()) {
             final PlayerLoaderData data = this.chunkSendWaitQueue.first();
 
@@ -574,11 +612,13 @@ public final class PlayerChunkLoader {
 
             this.chunkSendQueue.add(data);
         }
+        } finally { co.aikar.timings.MinecraftTimings.playerChunkLoaderPopulateChunkSendQueue.stopTiming(); } // Suki - network-constrained chunk sending - PlayerChunkLoader timings
 
         if (this.chunkSendQueue.isEmpty()) {
             return;
         }
 
+        co.aikar.timings.MinecraftTimings.playerChunkLoaderSendChunks.startTiming(); try { // Suki - network-constrained chunk sending - PlayerChunkLoader timings
         final int maxSends = this.getMaxConcurrentChunkSends();
         final long nextPlayerDeadline = this.getTargetSendPerPlayerAddend() + time;
         for (;;) {
@@ -599,13 +639,21 @@ public final class PlayerChunkLoader {
             final PlayerLoaderData data = this.chunkSendQueue.removeFirst();
 
             // Suki start - per-player track and see view distance
-            ChunkPriorityHolder queuedSend = data.getSendQueue(true).pollFirst();
+
+            ChunkPriorityHolder queuedSend;
+            {
+                var trackSendQueue = data.getSendQueue(true);
+                queuedSend = trackSendQueue.isEmpty() ? null : trackSendQueue.pollFirst();
+            }
             boolean concernsTracking = true;
             if (queuedSend == null) {
-                queuedSend = data.getSendQueue(false).pollFirst();
+                var seeSendQueue = data.getSendQueue(false);
+                queuedSend = seeSendQueue.isEmpty() ? null : seeSendQueue.pollFirst();
                 concernsTracking = false;
             }
+
             // Suki end - per-player track and see view distance
+
             if (queuedSend == null) {
                 concurrentChunkSends.getAndDecrement(); // we never sent, so decrease
                 // stop iterating over players who have nothing to send
@@ -621,7 +669,7 @@ public final class PlayerChunkLoader {
             }
 
             data.nextChunkSendTarget = nextPlayerDeadline;
-            this.chunkSendWaitQueue.add(data);
+            this.transmittingWaitQueue.add(data);
 
             synchronized (this.sendingChunkCounts) {
                 this.sendingChunkCounts.addTo(data, 1);
@@ -649,6 +697,8 @@ public final class PlayerChunkLoader {
                 break;
             }
         }
+        } finally { co.aikar.timings.MinecraftTimings.playerChunkLoaderSendChunks.stopTiming(); } // Suki - network-constrained chunk sending - PlayerChunkLoader timings
+        } finally { co.aikar.timings.MinecraftTimings.playerChunkLoaderTrySendChunks.stopTiming(); } // Suki - network-constrained chunk sending - PlayerChunkLoader timings
     }
 
     protected int concurrentChunkLoads;
@@ -657,6 +707,7 @@ public final class PlayerChunkLoader {
     // this interval ensures the rate is kept between ticks correctly
     protected static final IntervalledCounter TICKET_ADDITION_COUNTER_LONG = new IntervalledCounter((long)(1.0e6 * 1000.0)); // 1000ms
     private void tryLoadChunks() {
+        co.aikar.timings.MinecraftTimings.playerChunkLoaderTryLoadChunks.startTiming(); try { // Suki - network-constrained chunk sending - PlayerChunkLoader timings
         if (this.chunkLoadQueue.isEmpty()) {
             return;
         }
@@ -780,14 +831,17 @@ public final class PlayerChunkLoader {
                 });
             }
         }
+        } finally { co.aikar.timings.MinecraftTimings.playerChunkLoaderTryLoadChunks.stopTiming(); } // Suki - network-constrained chunk sending - PlayerChunkLoader timings
     }
 
     public void tickMidTick() {
+        co.aikar.timings.MinecraftTimings.playerChunkLoaderMidTick.startTiming(); try { // Suki - network-constrained chunk sending - PlayerChunkLoader timings
         // try to send more chunks
         this.trySendChunks();
 
         // try to queue more chunks to load
         this.tryLoadChunks();
+        } finally { co.aikar.timings.MinecraftTimings.playerChunkLoaderMidTick.stopTiming(); } // Suki - network-constrained chunk sending - PlayerChunkLoader timings
     }
 
     static final class ChunkPriorityHolder {
@@ -1022,6 +1076,7 @@ public final class PlayerChunkLoader {
         // Suki start - per-player view distance
         public void update(boolean recalculateMapsIfOnlyViewDistanceChanged) { // Only recalculate the chunk loading maps if only the view distance changed in specific scenarios (world change, tick) and not every time the player moves (in which case we will still update the chunk loading maps if the player moved to a different chunk, of course)
             this.player.level.timings.playerChunkLoaderUpdate.startTiming(); try {
+            this.player.removeOverdueChunkInitializationPacketsInTransit(); // Suki - network-constrained chunk sending
             this.player.level.timings.playerChunkLoaderUpdateGetViewDistances.startTiming();
             final int loadViewDistance = this.player.getLoadViewDistance();
             // load view cannot be less-than tick view + 1
@@ -1043,7 +1098,7 @@ public final class PlayerChunkLoader {
                     this.player.getAbilities().flying);
 
             // make sure we're in the send queue
-            this.loader.chunkSendWaitQueue.add(this);
+            this.loader.transmittingWaitQueue.add(this);
 
             this.player.level.timings.playerChunkLoaderUpdateDecideWhetherToRecalculate.startTiming(); try { // Suki - per-player view distance
             if (
diff --git a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
index 0130e2c3c047055fbea9c3d893a9b4593fa10ed2..6f835d848bd5fe41f7dae92ea88d3d7cb8c1af8b 100644
--- a/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/GlobalConfiguration.java
@@ -2,12 +2,14 @@ package io.papermc.paper.configuration;
 
 import co.aikar.timings.MinecraftTimings;
 import com.destroystokyo.paper.io.chunk.ChunkTaskManager;
+import com.google.common.graph.Network;
 import io.papermc.paper.configuration.constraint.Constraint;
 import io.papermc.paper.configuration.constraint.Constraints;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.format.NamedTextColor;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ServerboundPlaceRecipePacket;
+import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.Bukkit; // Pufferfish
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.spongepowered.configurate.objectmapping.ConfigSerializable;
diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index 37a6894fba46eb8b091d88e9ab73b801d6ba6213..60c40bf42045a3ebc59349a23cafcc8e8fa69cd3 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -2,6 +2,7 @@ package io.papermc.paper.configuration;
 
 import com.google.common.collect.HashBasedTable;
 import com.google.common.collect.Table;
+import com.google.common.graph.Network;
 import com.mojang.logging.LogUtils;
 import io.papermc.paper.configuration.constraint.Constraint;
 import io.papermc.paper.configuration.constraint.Constraints;
@@ -34,6 +35,8 @@ import net.minecraft.world.item.Item;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.NaturalSpawner;
 import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.slf4j.Logger;
 import org.spigotmc.SpigotWorldConfig;
 import org.spongepowered.configurate.objectmapping.ConfigSerializable;
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index cc6d3cc740661b80322ed21f887aad0837fa7606..325b24b88739c64b2bafec2c30c8d540452bf4d8 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -8,6 +8,7 @@ import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 
+import java.util.ArrayDeque;
 import java.util.Collection;
 import java.util.Comparator;
 import java.util.Iterator;
@@ -20,6 +21,7 @@ import java.util.stream.Stream;
 import javax.annotation.Nullable;
 
 import io.papermc.paper.chunk.PlayerChunkLoader;
+import io.papermc.paper.configuration.GlobalConfiguration;
 import it.unimi.dsi.fastutil.Pair;
 import it.unimi.dsi.fastutil.ints.IntIntPair;
 import it.unimi.dsi.fastutil.objects.ObjectObjectImmutablePair;
@@ -537,6 +539,115 @@ public class ServerPlayer extends Player {
     public final com.destroystokyo.paper.util.PooledHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> cachedSingleMobDistanceMap;
     // Paper end
 
+    // Suki start - network-constrained chunk sending
+
+    private static class ChunkPacketInTransit {
+
+        final long keepaliveId;
+        final long sentTimestamp;
+
+        ChunkPacketInTransit(long keepaliveId, long sentTimestamp) {
+            this.keepaliveId = keepaliveId;
+            this.sentTimestamp = sentTimestamp;
+        }
+
+    }
+
+    private final Object networkConstrainedSendingLock = new Object();
+
+    private int maxNumberOfChunkPacketsInTransitBasedOnConnection = SukiGlobalConfiguration.get().networkConstrainedChunkSending.initialMaxChunkPacketsInTransit;
+    // Keep track of chunk packets in transit
+    private final ArrayDeque<ChunkPacketInTransit> chunkInitializationPacketsInTransitKeepaliveIds = new ArrayDeque<>();
+
+    public int getMaxNumberOfChunkPacketsInTransitBasedOnConnection() {
+        synchronized (this.networkConstrainedSendingLock) {
+            return this.maxNumberOfChunkPacketsInTransitBasedOnConnection;
+        }
+    }
+
+    public void setMaxNumberOfChunkPacketsInTransitBasedOnConnection(int maxNumberOfChunkPacketsInTransitBasedOnConnection) {
+        synchronized (this.networkConstrainedSendingLock) {
+            this.maxNumberOfChunkPacketsInTransitBasedOnConnection = maxNumberOfChunkPacketsInTransitBasedOnConnection;
+        }
+    }
+
+    private void addChunkInitializationPacketInTransit(long keepaliveId) {
+        ChunkPacketInTransit packet = new ChunkPacketInTransit(keepaliveId, System.currentTimeMillis());
+        synchronized (this.networkConstrainedSendingLock) {
+            this.chunkInitializationPacketsInTransitKeepaliveIds.addLast(packet);
+        }
+    }
+
+    public void removeOverdueChunkInitializationPacketsInTransit() {
+        this.level.timings.removeOverdueChunkInitializationPacketsInTransit.startTiming(); try { // Suki - network-constrained chunk sending - timings
+        if (SukiGlobalConfiguration.get().networkConstrainedChunkSending.assumePacketsInTransitArrivedAfterTime <= 0)
+            return;
+        synchronized (this.networkConstrainedSendingLock) {
+            while (!chunkInitializationPacketsInTransitKeepaliveIds.isEmpty()) {
+                if (chunkInitializationPacketsInTransitKeepaliveIds.peekFirst().sentTimestamp < System.currentTimeMillis() - SukiGlobalConfiguration.get().networkConstrainedChunkSending.assumePacketsInTransitArrivedAfterTime) {
+                    chunkInitializationPacketsInTransitKeepaliveIds.pollFirst();
+                } else {
+                    break;
+                }
+            }
+        }
+        } finally { this.level.timings.removeOverdueChunkInitializationPacketsInTransit.stopTiming(); } // Suki - network-constrained chunk sending - timings
+    }
+
+    /**
+     * @return If this keepalive id was recognized as a fake one sent after a chunk initialization
+     */
+    public boolean removePacketsInTransitUpToKeepaliveId(long keepaliveId) {
+        if (!SukiGlobalConfiguration.get().networkConstrainedChunkSending.enabled) {
+            return false;
+        }
+        this.level.timings.removePacketsInTransitUpToKeepaliveId.startTiming(); try { // Suki - network-constrained chunk sending - timings
+        synchronized (this.networkConstrainedSendingLock) {
+            if (this.chunkInitializationPacketsInTransitKeepaliveIds.stream().anyMatch(it -> it.keepaliveId == keepaliveId)) {
+                // This is a response to one of our fake keep-alive packets
+                // We will remove all chunk packets in transition up to the received one that was apparently successful
+                while (!this.chunkInitializationPacketsInTransitKeepaliveIds.isEmpty()) {
+                    if (this.chunkInitializationPacketsInTransitKeepaliveIds.peekFirst().keepaliveId == keepaliveId) {
+                        this.chunkInitializationPacketsInTransitKeepaliveIds.removeFirst();
+                        break;
+                    }
+                    this.chunkInitializationPacketsInTransitKeepaliveIds.removeFirst();
+                }
+                return true;
+            }
+        }
+        return false;
+        } finally { this.level.timings.removePacketsInTransitUpToKeepaliveId.stopTiming(); } // Suki - network-constrained chunk sending - timings
+    }
+
+    public boolean canSendChunkInitializationPacketNow(ChunkPos chunk) {
+        if (!SukiGlobalConfiguration.get().networkConstrainedChunkSending.enabled) {
+            return true;
+        }
+        if (getChessboardDistanceToChunk(chunk) <= SukiGlobalConfiguration.get().networkConstrainedChunkSending.ignoreNetworkConditionsForChunksWithinChessboardDistance) return true;
+        synchronized (this.networkConstrainedSendingLock) {
+            return this.chunkInitializationPacketsInTransitKeepaliveIds.size() < this.maxNumberOfChunkPacketsInTransitBasedOnConnection;
+        }
+    }
+
+    public void sendKeepaliveForChunkInTransit() {
+
+        if (!SukiGlobalConfiguration.get().networkConstrainedChunkSending.enabled) {
+            return;
+        }
+
+        // Quickly write a keepalive packet after sending a chunk
+        // Generate a keepalive challenge that is not the same as any real one (the real ones use the current system time itself)
+        long keepAliveChallenge = -System.currentTimeMillis();
+
+        Packet<?> followingKeepAlivePacket = new net.minecraft.network.protocol.game.ClientboundKeepAlivePacket(keepAliveChallenge);
+        this.addChunkInitializationPacketInTransit(keepAliveChallenge);
+        this.connection.send(followingKeepAlivePacket);
+
+    }
+
+    // Suki end - network-constrained chunk sending
+
     // CraftBukkit start
     public String displayName;
     public net.kyori.adventure.text.Component adventure$displayName; // Paper
@@ -2530,6 +2641,7 @@ public class ServerPlayer extends Player {
             }
             // Paper end
         }
+        this.sendKeepaliveForChunkInTransit(); // Suki - network-constrained chunk sending
     }
 
     public void untrackChunk(ChunkPos chunkPos, boolean concernsTracking) {
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index b5caf4c74864b03c4cb351e3b2747cb956ac7880..cdf24b62d11ded92d7b6e550ab84e06dc2459777 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -7,6 +7,7 @@ import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+import io.papermc.paper.configuration.GlobalConfiguration;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
@@ -3650,12 +3651,14 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
     @Override
     public void handleKeepAlive(ServerboundKeepAlivePacket packet) {
+        if (player.removePacketsInTransitUpToKeepaliveId(packet.getId())) return; // Suki - network-constrained chunk sending
         // Purpur start
         if (wtf.etil.mirai.MiraiConfig.useAlternateKeepAlive) {
             long id = packet.getId();
             if (keepAlives.size() > 0 && keepAlives.contains(id)) {
                 int ping = (int) (Util.getMillis() - id);
                 player.latency = (player.latency * 3 + ping) / 4;
+                this.updateMaxNumberOfPacketsInTransitAfterLatencyUpdate(); // Suki - network-constrained chunk sending
                 keepAlives.clear(); // we got a valid response, lets roll with it and forget the rest
             }
         } else
@@ -3665,6 +3668,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             int i = (int) (Util.getMillis() - this.keepAliveTime);
 
             this.player.latency = (this.player.latency * 3 + i) / 4;
+            this.updateMaxNumberOfPacketsInTransitAfterLatencyUpdate(); // Suki - network-constrained chunk sending
             this.keepAlivePending = false;
         } else if (!this.isSingleplayerOwner()) {
             // Suki start - configurable keep-alive no disconnect on late or wrong keep-alive
@@ -3681,6 +3685,85 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
     }
 
+    // Suki start - network-constrained chunk sending
+    private void updateMaxNumberOfPacketsInTransitAfterLatencyUpdate() {
+        if (!SukiGlobalConfiguration.get().networkConstrainedChunkSending.enabled) {
+            return;
+        }
+//            // Player ping was updated: if it is too high we update the max number of chunk packets in transit
+//            // TODO turn into configuration options
+//            if (this.player.latency > 500) {
+//                // This ping is unacceptable
+//                this.player.setMaxNumberOfChunkPacketsInTransitBasedOnConnection(player.level.paperConfig().networkConstrainedChunkSending.maxChunkPacketsInTransit.min);
+//            } else {
+//                int maxNumberOfChunkPacketsInTransitChange = 0;
+//                if (this.player.latency > 330) {
+//                    // This ping is very undesired
+//                    maxNumberOfChunkPacketsInTransitChange = -2;
+//                } else if (this.player.latency > 260) {
+//                    // This ping is quite undesired
+//                    maxNumberOfChunkPacketsInTransitChange = -1;
+//                } else if (this.player.latency < 50) {
+//                    // This ping is very good
+//                    maxNumberOfChunkPacketsInTransitChange = 2;
+//                } else if (this.player.latency < 130) {
+//                    // This ping is quite good
+//                    maxNumberOfChunkPacketsInTransitChange = 1;
+//                }
+//                if (maxNumberOfChunkPacketsInTransitChange != 0) {
+//                    this.player.setMaxNumberOfChunkPacketsInTransitBasedOnConnection(Math.max(
+//                        player.level.paperConfig().networkConstrainedChunkSending.maxChunkPacketsInTransit.min,
+//                        Math.min(
+//                            player.level.paperConfig().networkConstrainedChunkSending.maxChunkPacketsInTransit.max,
+//                            this.player.getMaxNumberOfChunkPacketsInTransitBasedOnConnection() + maxNumberOfChunkPacketsInTransitChange
+//                        )
+//                    ));
+//                }
+//            }
+        // Player ping was updated:
+        // we updated the max number of chunk packets in transit,
+        // in such a way that the maximum number of chunks that can be sent is at least the configured player chunk send rate
+        // (we want the max number of chunk packets in transit to be as low as possible, but we cannot set it very low for poor ping connections,
+        // because then the chunk sending speed would become too low)
+        // For example: if the configured player chunk send rate is 50 chunks/sec, we want to set the max number of chunk packets in transit
+        // so that we can reach at least 50 chunks/sec based on that system (because we should not unnecessarily limit a setting that
+        // we have already apparently decided is good - we assume that the configured player chunk send rate is well chosen for a nice
+        // world loading speed), if we use a factor of 1.5, we should reach 75 chunks/sec in this way, and then if we have a ping of 20ms,
+        // we would be limited to 50 chunks/sec if we have a max of 1 chunk packet in transit, and 100 chunks/sec if we have a max of 2 chunk packets
+        // in transit, so we set the max number of chunk packets in transit to 2 so we are at least above the 75 chunks/sec (which is the configured
+        // player chunk send rate with a margin, that we want to be above)
+        // Note that this can lead to a very high number of chunk packets in transit for connections with very poor ping, which is not desirable,
+        // because it would overload any client suddenly due to a burst of packets, so we still do not set the max number of chunk packets in transit
+        // higher than a certain limit (like 12 or so) because we have decided at that point even poor connections still have an okay world loading speed
+        // so we don't need to boost it into levels that the client CPU/GPU can't handle
+        var level = this.player.level;
+        if (level != null) {
+            if (this.player.latency > 0) {
+                var playerChunkSendRateWithMargin = GlobalConfiguration.get().chunkLoading.targetPlayerChunkSendRate * level.sukiConfig().networkConstrainedChunkSending.maxChunkPacketsInTransit.targetPlayerChunkSendRateMarginFactor;
+                var chunksPerSecondIfMaxOneChunkPacketInTransit = 1000.0 / this.player.latency;
+                int newMaxNumberOfChunkPacketsInTransitBasedOnConnection = (int) Math.ceil(playerChunkSendRateWithMargin / chunksPerSecondIfMaxOneChunkPacketInTransit);
+                if (player.level.sukiConfig().networkConstrainedChunkSending.maxChunkPacketsInTransit.max > 0) {
+                    newMaxNumberOfChunkPacketsInTransitBasedOnConnection = Math.min(
+                        newMaxNumberOfChunkPacketsInTransitBasedOnConnection,
+                        player.level.sukiConfig().networkConstrainedChunkSending.maxChunkPacketsInTransit.max
+                    );
+                }
+                if (player.level.sukiConfig().networkConstrainedChunkSending.maxChunkPacketsInTransit.min > 0) {
+                    newMaxNumberOfChunkPacketsInTransitBasedOnConnection = Math.max(
+                        newMaxNumberOfChunkPacketsInTransitBasedOnConnection,
+                        player.level.sukiConfig().networkConstrainedChunkSending.maxChunkPacketsInTransit.min
+                    );
+                }
+                newMaxNumberOfChunkPacketsInTransitBasedOnConnection = Math.max(
+                    newMaxNumberOfChunkPacketsInTransitBasedOnConnection,
+                    1
+                );
+                this.player.setMaxNumberOfChunkPacketsInTransitBasedOnConnection(newMaxNumberOfChunkPacketsInTransitBasedOnConnection);
+            }
+        }
+    }
+    // Suki end - network-constrained chunk sending
+
     @Override
     public void handlePlayerAbilities(ServerboundPlayerAbilitiesPacket packet) {
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.getLevel());
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
index 99ee7401b4c9742389d1f1536e7f111a860391ee..1514bda6b828df88258d8dbb89d8c542313cbfc1 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiGlobalConfiguration.java
@@ -265,4 +265,30 @@ public class SukiGlobalConfiguration extends ConfigurationPart {
 
     // Suki end - configurable login timeout
 
+    // Suki start - network-constrained chunk sending
+
+    public NetworkConstrainedChunkSending networkConstrainedChunkSending;
+
+    public class NetworkConstrainedChunkSending extends ConfigurationPart {
+
+        public boolean enabled = false;
+
+        public transient int initialMaxChunkPacketsInTransit = 12;
+
+        /**
+         * In milliseconds
+         * <br>
+         * A nonpositive value disables this feature
+         */
+        public int assumePacketsInTransitArrivedAfterTime = 600;
+
+        /**
+         * A negative value disables this feature
+         */
+        public int ignoreNetworkConditionsForChunksWithinChessboardDistance = 1;
+
+    }
+
+    // Suki end - network-constrained chunk sending
+
 }
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java
index f5b51d75d57a5ede752b4b34af1f7242dcf226c1..d7f59a828a3258f3208881f3e720f81010207ca8 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java
@@ -560,4 +560,26 @@ public class SukiWorldConfiguration extends ConfigurationPart {
 
     // Suki end - per-player view distance
 
+    // Suki start - network-constrained chunk sending
+
+    public NetworkConstrainedChunkSending networkConstrainedChunkSending;
+
+    public class NetworkConstrainedChunkSending extends ConfigurationPart {
+
+        public MaxChunkPacketsInTransit maxChunkPacketsInTransit;
+
+        public class MaxChunkPacketsInTransit extends ConfigurationPart {
+
+            public transient int min = -1;
+
+            public transient int max = -1;
+
+            public double targetPlayerChunkSendRateMarginFactor = 1.15;
+
+        }
+
+    }
+
+    // Suki end - network-constrained chunk sending
+
 }
diff --git a/src/test/java/io/papermc/paper/configuration/GlobalConfigTestingBase.java b/src/test/java/io/papermc/paper/configuration/GlobalConfigTestingBase.java
index 0396589795da1f83ddf62426236dde9a3afa1376..b603df6188503edc32fa40a0f5f872d2a2a3b4c9 100644
--- a/src/test/java/io/papermc/paper/configuration/GlobalConfigTestingBase.java
+++ b/src/test/java/io/papermc/paper/configuration/GlobalConfigTestingBase.java
@@ -1,3 +1,8 @@
+
+
+
+
+
 package io.papermc.paper.configuration;
 
 import org.spongepowered.configurate.ConfigurationNode;
