From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Fri, 28 Jan 2022 16:58:29 +0100
Subject: [PATCH] More entity activation configuration


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 7b1211b2d2e6a43763a80ea6ac7e43b6a83830f8..8aa45702f3033c2d5375e8eca1450b935b93b352 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -38,6 +38,7 @@ import org.bukkit.configuration.MemorySection;
 import org.bukkit.entity.EntityType;
 import org.json.simple.JSONObject;
 import org.json.simple.JSONValue;
+import org.sucraft.suki.configuration.SukiWorldConfiguration;
 import oshi.SystemInfo;
 import oshi.hardware.HardwareAbstractionLayer;
 
@@ -241,7 +242,7 @@ public class TimingsExport extends Thread {
 
         // Suki start - Suki configuration - include vanilla server.properties in timings
 
-        var vanillaServerSettingsJSON = new JSONObject();
+        JSONObject vanillaServerSettingsJSON = new JSONObject();
         {
             var server = (DedicatedServer) MinecraftServer.getServer();
             var properties = server.getProperties();
@@ -287,6 +288,31 @@ public class TimingsExport extends Thread {
 
         // Suki end - Suki configuration - include vanilla server.properties in timings
 
+        // Suki start - configurable ratio of skipped active entities - include computed fraction in timings
+
+        JSONObject sukiConfigJSON = mapAsJSON(Bukkit.spigot().getSukiConfig(), null);
+        {
+            JSONObject sukiConfigWorldsJSON = (JSONObject) sukiConfigJSON.get("__________WORLDS__________");
+            for (Object worldEntry : sukiConfigWorldsJSON.entrySet()) {
+                JSONObject configWorldJSON = (JSONObject) ((Map.Entry<?, ?>) worldEntry).getValue();
+                JSONObject entityTickingJSON = (JSONObject) configWorldJSON.get("entity-ticking");
+                if (entityTickingJSON != null) {
+                    JSONObject skippedActiveEntityRatioJSON = (JSONObject) entityTickingJSON.get("skipped-active-entity-ratio");
+                    if (skippedActiveEntityRatioJSON != null) {
+                        String ratioString = (String) skippedActiveEntityRatioJSON.get("ratio");
+                        if (ratioString != null) {
+                            double ratio = Double.parseDouble(ratioString);
+                            var fraction = SukiWorldConfiguration.EntityTicking.SkippedActiveEntityRatio.computeNumeratorAndDenominator(ratio);
+                            skippedActiveEntityRatioJSON.put("_numerator", fraction.first());
+                            skippedActiveEntityRatioJSON.put("_denominator", fraction.second());
+                        }
+                    }
+                }
+            }
+        }
+
+        // Suki end - configurable ratio of skipped active entities - include computed fraction in timings
+
         parent.put("config", createObject(
             pair("server.properties", vanillaServerSettingsJSON), // Suki - Suki configuration- include vanilla server.properties in timings
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
@@ -294,7 +320,7 @@ public class TimingsExport extends Thread {
             pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)), // Pufferfish
             pair("pufferfish", mapAsJSON(gg.pufferfish.pufferfish.PufferfishConfig.getConfigCopy(), null)), // Pufferfish // Mirai
             pair("mirai", mapAsJSON(wtf.etil.mirai.MiraiConfig.getConfigCopy(), null)), // Mirai // Suki - Suki configuration
-            pair("suki", mapAsJSON(Bukkit.spigot().getSukiConfig(), null)) // Suki - Suki configuration
+            pair("suki", sukiConfigJSON) // Suki - Suki configuration // Suki - configurable ratio of skipped active entities - include computed fraction in timings
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 70b5b307193dc288a6257d90ca96762cb4a8345a..0153b40cef8b07660eb20e3a0dcb4fb19a1d44c8 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -10,12 +10,25 @@ import net.minecraft.world.entity.LightningBolt;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.PathfinderMob;
+import net.minecraft.world.entity.TamableAnimal;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ambient.AmbientCreature;
 import net.minecraft.world.entity.animal.Animal;
 import net.minecraft.world.entity.animal.Bee;
+import net.minecraft.world.entity.animal.Cat;
+import net.minecraft.world.entity.animal.Chicken;
+import net.minecraft.world.entity.animal.Fox;
+import net.minecraft.world.entity.animal.IronGolem;
+import net.minecraft.world.entity.animal.Ocelot;
+import net.minecraft.world.entity.animal.PolarBear;
+import net.minecraft.world.entity.animal.Rabbit;
 import net.minecraft.world.entity.animal.Sheep;
+import net.minecraft.world.entity.animal.SnowGolem;
+import net.minecraft.world.entity.animal.Squid;
+import net.minecraft.world.entity.animal.Turtle;
 import net.minecraft.world.entity.animal.WaterAnimal;
+import net.minecraft.world.entity.animal.Wolf;
+import net.minecraft.world.entity.animal.axolotl.Axolotl;
 import net.minecraft.world.entity.animal.horse.Llama;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EndCrystal;
@@ -23,8 +36,15 @@ import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.boss.wither.WitherBoss;
 import net.minecraft.world.entity.item.PrimedTnt;
 import net.minecraft.world.entity.monster.Creeper;
+import net.minecraft.world.entity.monster.Endermite;
 import net.minecraft.world.entity.monster.Enemy;
+import net.minecraft.world.entity.monster.Guardian;
 import net.minecraft.world.entity.monster.Pillager;
+import net.minecraft.world.entity.monster.Witch;
+import net.minecraft.world.entity.monster.WitherSkeleton;
+import net.minecraft.world.entity.monster.Zoglin;
+import net.minecraft.world.entity.monster.hoglin.Hoglin;
+import net.minecraft.world.entity.monster.piglin.AbstractPiglin;
 import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.projectile.AbstractArrow;
@@ -40,8 +60,9 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.AABB;
 // Pufferfish start
 import net.minecraft.world.phys.Vec3;
-import java.util.List;
 // Pufferfish end
+import org.bukkit.entity.Enderman;
+import org.bukkit.entity.Fish;
 
 public class ActivationRange
 {
@@ -306,6 +327,9 @@ public class ActivationRange
         {
             return 1; // Paper
         }
+        // Suki start - more entity activation configuration
+        var sukiConfig = entity.level.sukiConfig().entityTicking;
+        // Suki end - more entity activation configuration
         // special cases.
         if ( entity instanceof LivingEntity )
         {
@@ -316,7 +340,68 @@ public class ActivationRange
             }
             if ( entity instanceof Mob && ((Mob) entity ).getTarget() != null) // Paper
             {
-                return 20; // Paper
+                // Suki start - configurable mob target inactivity immunity
+                var mobTargetMobConfig = sukiConfig.immuneFromInactive.ticks.mobTargetingMob;
+                int hunterImmunityFor = mobTargetMobConfig.defaultValue;
+                LivingEntity target = ((Mob) entity ).getTarget();
+                if (entity instanceof Wolf) {
+                    if (target instanceof Sheep) {
+                        hunterImmunityFor = mobTargetMobConfig.wolfTargetingSheep;
+                    } else if (target instanceof Fox) {
+                        hunterImmunityFor = mobTargetMobConfig.wolfTargetingFox;
+                    }
+                } else if (entity instanceof Guardian && target instanceof Squid) {
+                    hunterImmunityFor = mobTargetMobConfig.guardianTargetingSquid;
+                } else if (entity instanceof Llama && target instanceof Wolf) {
+                    hunterImmunityFor = mobTargetMobConfig.llamaTargetingWolf;
+                } else if (entity instanceof PolarBear && target instanceof Fox) {
+                    hunterImmunityFor = mobTargetMobConfig.polarBearTargetingFox;
+                } else if (entity instanceof Fox && target instanceof Chicken) {
+                    hunterImmunityFor = mobTargetMobConfig.foxTargetingChicken;
+                } else if (entity instanceof Ocelot && target instanceof Chicken) {
+                    hunterImmunityFor = mobTargetMobConfig.ocelotTargetingChicken;
+                } else if (entity instanceof Cat && target instanceof Rabbit) {
+                    hunterImmunityFor = mobTargetMobConfig.catTargetingRabbit;
+                } else if (entity instanceof Enderman && target instanceof Endermite) {
+                    hunterImmunityFor = mobTargetMobConfig.endermanTargetingEndermite;
+                } else if (entity instanceof AbstractPiglin) {
+                    if (target instanceof Hoglin) {
+                        hunterImmunityFor = mobTargetMobConfig.piglinTargetingHoglin;
+                    } else if (target instanceof WitherSkeleton) {
+                        hunterImmunityFor = mobTargetMobConfig.piglinTargetingWitherSkeleton;
+                    }
+                } else if (entity instanceof WitherSkeleton) {
+                    if (target instanceof AbstractPiglin) {
+                        hunterImmunityFor = mobTargetMobConfig.witherSkeletonTargetingPiglin;
+                    } else if (target instanceof IronGolem) {
+                        hunterImmunityFor = mobTargetMobConfig.witherSkeletonTargetingIronGolem;
+                    } else if (target instanceof SnowGolem) {
+                        hunterImmunityFor = mobTargetMobConfig.witherSkeletonTargetingSnowGolem;
+                    }
+                } else if (entity instanceof SnowGolem) {
+                    if (!(target instanceof Player)) {
+                        hunterImmunityFor = mobTargetMobConfig.snowGolemTargetingNonPlayer;
+                    }
+                } else if (entity instanceof Zoglin) {
+                    if (!(target instanceof Player)) {
+                        hunterImmunityFor = mobTargetMobConfig.zoglinTargetingNonPlayer;
+                    }
+                } else if (entity instanceof Axolotl) {
+                    if (target instanceof Fish) {
+                        hunterImmunityFor = mobTargetMobConfig.axolotlTargetingFish;
+                    } else if (target instanceof Squid) {
+                        hunterImmunityFor = mobTargetMobConfig.axolotlTargetingSquid;
+                    }
+                } else if (entity instanceof Witch && target instanceof Witch) {
+                    hunterImmunityFor = mobTargetMobConfig.witchTargetingWitch;
+                }
+                if (target instanceof Turtle) {
+                    hunterImmunityFor = mobTargetMobConfig.mobTargetingTurtle;
+                }
+                if (hunterImmunityFor > 0) {
+                    return hunterImmunityFor;
+                }
+                // Suki end - configurable mob target inactivity immunity
             }
             // Paper start
             if (entity instanceof Bee) {
@@ -354,14 +439,27 @@ public class ActivationRange
             if ( entity instanceof Animal )
             {
                 Animal animal = (Animal) entity;
-                if ( animal.isBaby() || animal.isInLove() )
+                // Suki start - configurable baby inactivity immunity
+                if ( sukiConfig.immuneFromInactive.ticks.baby > 0 && animal.isBaby() ) {
+                    return sukiConfig.immuneFromInactive.ticks.baby;
+                }
+                if ( animal.isInLove() )
+                // Suki end - configurable baby inactivity immunity
                 {
                     return 5; // Paper
                 }
-                if ( entity instanceof Sheep && ( (Sheep) entity ).isSheared() )
+                if ( sukiConfig.immuneFromInactive.shearedSheep && entity instanceof Sheep && ( (Sheep) entity ).isSheared() ) // Suki - configurable sheared sheep immunity
                 {
                     return 1; // Paper
                 }
+                // Suki start - configurable non-sitting pet immunity
+                if ( sukiConfig.immuneFromInactive.nonSittingPets && animal instanceof TamableAnimal ) {
+                    TamableAnimal tamableAnimal = (TamableAnimal) animal;
+                    if (tamableAnimal.getOwnerUUID() != null && !tamableAnimal.isOrderedToSit()) {
+                        return 20;
+                    }
+                }
+                // Suki end - configurable non-sitting pet immunity
             }
             if (entity instanceof Creeper && ((Creeper) entity).isIgnited()) { // isExplosive
                 return 20; // Paper
@@ -426,11 +524,17 @@ public class ActivationRange
                 isActive = true;
 
             }
-            // Add a little performance juice to active entities. Skip 1/4 if not immune.
-        } else if ( entity.tickCount + entity.getId() + 1 % 4 == 0 && ActivationRange.checkEntityImmunities( entity ) < 0 ) // Paper
-        {
-            isActive = false;
+            // Suki start - configurable ratio of skipped active entities
+            // Add a little performance juice to active entities. Skip skippedActiveEntityRatioNumerator / skippedActiveEntityRatioDenominator of active entities if not immune.
+        } else if (entity.level.sukiConfig().entityTicking.skippedActiveEntityRatio.numerator() > 0) {
+            long someMeaninglessValueBasedOnTickCountAndEntityId = entity.level.getGameTime() + entity.getId() + 1;
+            someMeaninglessValueBasedOnTickCountAndEntityId = 31 * someMeaninglessValueBasedOnTickCountAndEntityId * someMeaninglessValueBasedOnTickCountAndEntityId + 1009 * someMeaninglessValueBasedOnTickCountAndEntityId + 171719;
+            if ( Math.floorMod( someMeaninglessValueBasedOnTickCountAndEntityId , entity.level.sukiConfig().entityTicking.skippedActiveEntityRatio.denominator()) < entity.level.sukiConfig().entityTicking.skippedActiveEntityRatio.numerator() && ActivationRange.checkEntityImmunities( entity ) < 0 ) // Paper
+            {
+                isActive = false;
+            }
         }
+        // Suki end - configurable ratio of skipped active entities
         return isActive;
     }
 }
diff --git a/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java b/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java
index 092b726d0617ce88bd00499628ce24356e046528..0c88e2b03f951340293cceeba3a4c2a789b92d8c 100644
--- a/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java
+++ b/src/main/java/org/sucraft/suki/configuration/SukiWorldConfiguration.java
@@ -5,7 +5,9 @@ package org.sucraft.suki.configuration;
 import com.mojang.logging.LogUtils;
 import io.papermc.paper.configuration.Configuration;
 import io.papermc.paper.configuration.ConfigurationPart;
+import io.papermc.paper.configuration.NestedSetting;
 import io.papermc.paper.configuration.PaperConfigurations;
+import it.unimi.dsi.fastutil.Pair;
 import net.minecraft.resources.ResourceLocation;
 import org.slf4j.Logger;
 import org.spigotmc.SpigotWorldConfig;
@@ -262,4 +264,132 @@ public class SukiWorldConfiguration extends ConfigurationPart {
 
     // Suki end - difficulty changes
 
+    // Suki start - more entity activation configuration
+
+    public EntityTicking entityTicking;
+
+    public class EntityTicking extends ConfigurationPart {
+
+        // Suki start - configurable ratio of skipped active entities
+
+        public SkippedActiveEntityRatio skippedActiveEntityRatio;
+
+        public class SkippedActiveEntityRatio extends ConfigurationPart {
+
+            public double ratio = 0.25;
+
+            private transient Double lastRatio = null;
+            private transient int lastNumerator = 1;
+            private transient int lastDenominator = 4;
+
+            private static int gcd(int a, int b) {
+                while (b != 0) {
+                    int t = b;
+                    b = a%b;
+                    a = t;
+                }
+                return a;
+            }
+
+            public static Pair<Integer, Integer> computeNumeratorAndDenominator(double ratio) {
+                double closestValue = 0;
+                int bestNumerator = 0;
+                int bestDenominator = 1;
+                for (int denominator = 2; denominator <= 9; denominator++) {
+                    for (int numerator = 1; numerator < denominator; numerator++) {
+                        if (gcd(denominator, numerator) != 1) {
+                            continue;
+                        }
+                        double value = ((double) numerator) / denominator;
+                        if (Math.abs(value - ratio) < Math.abs(closestValue - ratio)) {
+                            closestValue = value;
+                            bestNumerator = numerator;
+                            bestDenominator = denominator;
+                        }
+                    }
+                }
+                return Pair.of(bestNumerator, bestDenominator);
+            }
+
+            private synchronized void setNumeratorAndDenominator() {
+                if (lastRatio == null || ratio != lastRatio) {
+                    Pair<Integer, Integer> best = computeNumeratorAndDenominator(ratio);
+                    lastRatio = ratio;
+                    lastNumerator = best.first();
+                    lastDenominator = best.second();
+                }
+            }
+
+            public int numerator() {
+                setNumeratorAndDenominator();
+                return lastNumerator;
+            }
+
+            public int denominator() {
+                setNumeratorAndDenominator();
+                return lastDenominator;
+            }
+
+        }
+
+        // Suki end - configurable ratio of skipped active entities
+
+        public ImmuneFromInactive immuneFromInactive;
+
+        public class ImmuneFromInactive extends ConfigurationPart {
+
+            public boolean shearedSheep = true; // Suki - configurable sheared sheep immunity
+            public boolean nonSittingPets = false; // Suki - configurable non-sitting pet immunity
+            
+            public Ticks ticks;
+
+            public class Ticks extends ConfigurationPart {
+
+                // Suki start - configurable baby inactivity immunity
+                /**
+                 * A nonpositive value disables this feature
+                 */
+                public int baby = 5;
+                // Suki end - configurable baby inactivity immunity
+
+                // Suki start - configurable mob target inactivity immunity
+                public MobTargetingMob mobTargetingMob;
+                
+                public class MobTargetingMob extends ConfigurationPart {
+
+                    @NestedSetting("default")
+                    public int defaultValue = 0;
+                    public int wolfTargetingSheep = 0;
+                    public int wolfTargetingFox = 0;
+                    public int guardianTargetingSquid = 0;
+                    public int llamaTargetingWolf = 0;
+                    public int polarBearTargetingFox = 0;
+                    public int foxTargetingChicken = 0;
+                    public int ocelotTargetingChicken = 0;
+                    public int catTargetingRabbit = 0;
+                    public int endermanTargetingEndermite = 0;
+                    public int piglinTargetingHoglin = 0;
+                    public int piglinTargetingWitherSkeleton = 0;
+                    public int witherSkeletonTargetingPiglin = 0;
+                    public int witherSkeletonTargetingIronGolem = 0;
+                    public int witherSkeletonTargetingSnowGolem = 0;
+                    public int snowGolemTargetingNonPlayer = 0;
+                    public int zoglinTargetingNonPlayer = 0;
+                    public int axolotlTargetingFish = 0;
+                    public int axolotlTargetingSquid = 0;
+                    public int witchTargetingWitch = 0;
+                    public int mobTargetingTurtle = 0;
+
+                }
+                // Suki end - configurable mob target inactivity immunity
+
+            }
+
+        }
+
+    }
+
+    // Suki end - more entity activation configuration
+
+
 }
