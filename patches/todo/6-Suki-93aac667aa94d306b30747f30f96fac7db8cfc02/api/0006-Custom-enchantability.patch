From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MartijnMuijsers <martijnmuijsers@live.nl>
Date: Sun, 19 Jun 2022 22:34:03 +0200
Subject: [PATCH] Custom enchantability


diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java
index 69a048eb4e48c92db70c3d6b6aa4ae96326b9705..96ae5396632274273012ae0636d56f2d2c9a1823 100644
--- a/src/main/java/org/bukkit/enchantments/Enchantment.java
+++ b/src/main/java/org/bukkit/enchantments/Enchantment.java
@@ -2,6 +2,8 @@ package org.bukkit.enchantments;
 
 import java.util.HashMap;
 import java.util.Map;
+
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
@@ -284,17 +286,55 @@ public abstract class Enchantment implements Keyed, net.kyori.adventure.translat
      */
     public abstract boolean conflictsWith(@NotNull Enchantment other);
 
+    // Suki start - custom enchantability
+
     /**
      * Checks if this Enchantment may be applied to the given {@link
-     * ItemStack}.
+     * ItemStack} for the given reason.
      * <p>
      * This does not check if it conflicts with any enchantments already
      * applied to the item.
+     * </p>
      *
      * @param item Item to test
+     * @param source The reason for enchanting to test
      * @return True if the enchantment may be applied, otherwise False
      */
-    public abstract boolean canEnchantItem(@NotNull ItemStack item);
+    public abstract boolean canEnchantItem(@NotNull ItemStack item, @NotNull EnchantmentSource source);
+
+    /**
+     * Checks if this Enchantment may be applied to the given {@link
+     * ItemStack} in vanilla.
+     * <p>
+     * This does not check if it conflicts with any enchantments already
+     * applied to the item.
+     * </p>
+     *
+     * @param item Item to test
+     * @return True if the enchantment may be applied in vanilla, otherwise False
+     */
+    public abstract boolean canEnchantItemInVanilla(@NotNull ItemStack item);
+
+    /**
+     * Checks if this Enchantment may be applied to the given {@link
+     * ItemStack} in vanilla.
+     * <p>
+     * This does not check if it conflicts with any enchantments already
+     * applied to the item.
+     * </p>
+     *
+     * @param item Item to test
+     * @return True if the enchantment may be applied in vanilla, otherwise False
+     * @deprecated Use {@link #canEnchantItemInVanilla(ItemStack)}
+     * @see #canEnchantItemInVanilla(ItemStack)
+     */
+    @Deprecated
+    public boolean canEnchantItem(@NotNull ItemStack item) {
+        return this.canEnchantItemInVanilla(item);
+    }
+
+    // Suki end - custom enchantability
+
     // Paper start
     /**
      * Get the name of the enchantment with its applied level.
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
index 5f42a9c0c43ced10b754170d7c83793a99fce81b..cda7e174e8219f71cf33522b8314b4cad3b8da1f 100644
--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
@@ -1,5 +1,6 @@
 package org.bukkit.enchantments;
 
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
@@ -38,11 +39,20 @@ public class EnchantmentWrapper extends Enchantment {
         return getEnchantment().getItemTarget();
     }
 
+    // Suki start - custom enchantability
+
     @Override
-    public boolean canEnchantItem(@NotNull ItemStack item) {
-        return getEnchantment().canEnchantItem(item);
+    public boolean canEnchantItem(@NotNull ItemStack item, @NotNull EnchantmentSource source) {
+        return getEnchantment().canEnchantItem(item, source);
     }
 
+    @Override
+    public boolean canEnchantItemInVanilla(@NotNull ItemStack item) {
+        return getEnchantment().canEnchantItemInVanilla(item);
+    }
+
+    // Suki end - custom enchantability
+
     @NotNull
     @Override
     public String getName() {
diff --git a/src/main/java/org/bukkit/inventory/ItemFactory.java b/src/main/java/org/bukkit/inventory/ItemFactory.java
index 40edff7c93b6bf75de81102326667135b9344666..dc5dabd4174072a1318e62479da1a7a0ff4cbabc 100644
--- a/src/main/java/org/bukkit/inventory/ItemFactory.java
+++ b/src/main/java/org/bukkit/inventory/ItemFactory.java
@@ -1,5 +1,6 @@
 package org.bukkit.inventory;
 
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.Server;
@@ -161,8 +162,11 @@ public interface ItemFactory {
     Material updateMaterial(@NotNull final ItemMeta meta, @NotNull final Material material) throws IllegalArgumentException;
 
     // Paper start
+
+    // Suki start - custom enchantability
+
     /**
-     * Randomly enchants a copy of the provided {@link ItemStack} using the given experience levels.
+     * Randomly enchants a copy of the provided {@link ItemStack} using the given experience levels, and enchantment source {@link EnchantmentSource#BUKKIT_API}.
      *
      * <p>If the provided ItemStack is already enchanted, the existing enchants will be removed before enchanting.</p>
      *
@@ -177,6 +181,25 @@ public interface ItemFactory {
      */
     @NotNull ItemStack enchantWithLevels(@NotNull ItemStack itemStack, @org.jetbrains.annotations.Range(from = 1, to = 30) int levels, boolean allowTreasure, @NotNull java.util.Random random);
 
+    /**
+     * Randomly enchants a copy of the provided {@link ItemStack} using the given experience levels.
+     *
+     * <p>If the provided ItemStack is already enchanted, the existing enchants will be removed before enchanting.</p>
+     *
+     * <p>Levels must be in range {@code [1, 30]}.</p>
+     *
+     * @param itemStack ItemStack to enchant
+     * @param levels levels to use for enchanting
+     * @param allowTreasure whether to allow enchantments where {@link org.bukkit.enchantments.Enchantment#isTreasure()} returns true
+     * @param random {@link java.util.Random} instance to use for enchanting
+     * @param source The {@link EnchantmentSource} the enchantment is assumed to come from
+     * @return enchanted copy of the provided ItemStack
+     * @throws IllegalArgumentException on bad arguments
+     */
+    @NotNull ItemStack enchantWithLevels(@NotNull ItemStack itemStack, @org.jetbrains.annotations.Range(from = 1, to = 30) int levels, boolean allowTreasure, @NotNull java.util.Random random, @NotNull EnchantmentSource source);
+
+    // Suki end - custom enchantability
+
     /**
      * Creates a hover event for the given item.
      *
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index b8a344fd900dcbd4b28085a54b85b16c742e9c6f..118da06536cad9466a49e341ee7497ea23ace5ca 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -5,6 +5,8 @@ import com.google.common.collect.ImmutableMap;
 import java.util.LinkedHashMap;
 import java.util.List; // Paper
 import java.util.Map;
+
+import org.sucraft.suki.enchantments.EnchantmentSource;
 import org.bukkit.Bukkit;
 import org.bukkit.Material;
 import org.bukkit.UndefinedNullability;
@@ -397,7 +399,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
         Preconditions.checkArgument(ench != null, "Enchantment cannot be null");
         if ((level < ench.getStartLevel()) || (level > ench.getMaxLevel())) {
             throw new IllegalArgumentException("Enchantment level is either too low or too high (given " + level + ", bounds are " + ench.getStartLevel() + " to " + ench.getMaxLevel() + ")");
-        } else if (!ench.canEnchantItem(this)) {
+        } else if (!ench.canEnchantItem(this, EnchantmentSource.BUKKIT_API)) { // Suki - custom enchantability
             throw new IllegalArgumentException("Specified enchantment cannot be applied to this itemstack");
         }
 
diff --git a/src/main/java/org/sucraft/suki/enchantments/EnchantmentSource.java b/src/main/java/org/sucraft/suki/enchantments/EnchantmentSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..35d2bf59ce298650c3a7ba1a080e24a95c84f08a
--- /dev/null
+++ b/src/main/java/org/sucraft/suki/enchantments/EnchantmentSource.java
@@ -0,0 +1,21 @@
+// Suki - custom enchantability
+
+package org.sucraft.suki.enchantments;
+
+/**
+ * The various reasons for which an enchantment can be attempted to be added to an item
+ */
+public enum EnchantmentSource {
+
+    ANVIL,
+    ENCHANTING_TABLE,
+    GENERATED_LOOT,
+    BUKKIT_API,
+    ENCHANT_COMMAND,
+    VILLAGER_TRADE,
+    SPAWNED_SKELETON_TRAP_MAIN_HAND,
+    SPAWNED_SKELETON_TRAP_HELMET,
+    SPAWNED_MOB_MAIN_HAND,
+    SPAWNED_MOB_ARMOR;
+
+}
