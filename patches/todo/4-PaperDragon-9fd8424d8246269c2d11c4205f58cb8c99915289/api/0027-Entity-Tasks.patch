From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 4 Dec 2016 22:52:29 -0500
Subject: [PATCH] Entity Tasks


diff --git a/src/main/java/com/domnian/paperdragon/api/DAPI_Entity.java b/src/main/java/com/domnian/paperdragon/api/DAPI_Entity.java
index 26609a7bd33caf380542d81b7ec23694eefb4312..37b783cce0a43fa04e4eb80c453393248d497703 100644
--- a/src/main/java/com/domnian/paperdragon/api/DAPI_Entity.java
+++ b/src/main/java/com/domnian/paperdragon/api/DAPI_Entity.java
@@ -23,5 +23,75 @@
 
 package com.domnian.paperdragon.api;
 
+import org.bukkit.entity.Entity;
+import org.jetbrains.annotations.NotNull;
+import com.domnian.paperdragon.api.EntityTask.TaskHandler;
+
 public interface DAPI_Entity {
+
+    void cancelTasks(@NotNull Entity entity);
+
+    @NotNull
+    default <T extends Entity> EntityTask<T> scheduleTask(@NotNull T entity, int interval, @NotNull Runnable task) {
+        return scheduleTask(entity, interval, new EntityTask<T>() {
+            @Override
+            public void run(@NotNull T entity) {
+                task.run();
+            }
+        });
+    }
+
+    @NotNull
+    default <T extends Entity> EntityTask<T> scheduleDelayedTask(@NotNull T entity, int delay, @NotNull Runnable task) {
+        return scheduleTask(entity, delay, new EntityTask<T>(1) {
+            @Override
+            public void run(@NotNull T entity) {
+                task.run();
+            }
+        });
+    }
+
+    @NotNull
+    default <T extends Entity> EntityTask<T> scheduleDelayedTask(@NotNull T entity, int delay, @NotNull TaskHandler<T> task) {
+        return scheduleTask(entity, delay, new EntityTask<T>(1) {
+            @Override
+            public void run(@NotNull T entity) {
+                task.run(entity, this);
+            }
+        });
+    }
+
+    @NotNull
+    default <T extends Entity> EntityTask<T> scheduleTask(@NotNull T entity, int interval, @NotNull TaskHandler<T> task) {
+        return scheduleTask(entity, interval, new EntityTask<T>() {
+            @Override
+            public void run(@NotNull T entity) {
+                task.run(entity, this);
+            }
+        });
+    }
+
+    @NotNull
+    default <T extends Entity> EntityTask<T> scheduleTask(@NotNull T entity, int interval, int limit, @NotNull TaskHandler<T> task) {
+        return scheduleTask(entity, interval, new EntityTask<T>(limit) {
+            @Override
+            public void run(@NotNull T entity) {
+                task.run(entity, this);
+            }
+        });
+    }
+
+    @NotNull
+    default <T extends Entity> EntityTask<T> scheduleTask(@NotNull T entity, int interval, int limit, @NotNull Runnable task) {
+        return scheduleTask(entity, interval, new EntityTask<T>(limit) {
+            @Override
+            public void run(@NotNull T entity) {
+                task.run();
+            }
+        });
+    }
+
+    @NotNull
+    <T extends Entity> EntityTask<T> scheduleTask(@NotNull T entity, int interval, @NotNull EntityTask<T> task);
+
 }
diff --git a/src/main/java/com/domnian/paperdragon/api/EntityTask.java b/src/main/java/com/domnian/paperdragon/api/EntityTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..9e43bc4866ff39814d35815e78bf752d14427821
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/api/EntityTask.java
@@ -0,0 +1,110 @@
+/*
+ * Copyright (c) 2016 Starlis LLC / Daniel Ennis (Aikar) - MIT License
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.domnian.paperdragon.api;
+
+import org.bukkit.entity.Entity;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public abstract class EntityTask<T extends Entity> {
+    private int limit = -1;
+    private int count = 0;
+    private int nextTick = -1;
+    private int tickEvery = -1;
+    private T entity;
+
+    public EntityTask() {}
+    public EntityTask(int limit) {
+        this.limit = limit;
+    }
+
+    public void init(@NotNull T entity, int interval) {
+        if (this.entity != null) {
+            throw new IllegalStateException("Already initialized");
+        }
+        this.entity = entity;
+        nextTick = entity.getTicksLived() + interval;
+        tickEvery = interval;
+    }
+
+    public abstract void run(@NotNull T entity);
+
+    @NotNull
+    public EntityTask<T> invokeNow() {
+        run(entity);
+        return this;
+    }
+
+    public boolean tick() {
+        if (isReady()) {
+            invokeNow();
+            this.count++;
+            this.nextTick = this.entity.getTicksLived() + this.tickEvery;
+            return true;
+        }
+        return false;
+    }
+
+    public boolean isValid() {
+        return entity != null && (limit == -1 || count < limit);
+    }
+
+    public boolean isReady() {
+        return entity != null && entity.getTicksLived() == nextTick;
+    }
+
+    public int getLimit() {
+        return limit;
+    }
+
+    public int getCount() {
+        return count;
+    }
+
+    public int getNextTick() {
+        return nextTick;
+    }
+
+    public int getTickEvery() {
+        return tickEvery;
+    }
+
+    public void setTickEvery(int ticks) {
+        this.tickEvery = ticks;
+    }
+
+    @Nullable
+    public T getEntity() {
+        return entity;
+    }
+
+    public void abort() {
+        this.limit = 1;
+        this.count = 1;
+    }
+
+    public interface TaskHandler<T extends Entity> {
+        void run(@NotNull T entity, @NotNull EntityTask<T> task);
+    }
+}
