From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: chickeneer <emcchickeneer@gmail.com>
Date: Fri, 17 Jan 2020 21:27:29 -0600
Subject: [PATCH] Add a BlockHarvestBeehiveEvent


diff --git a/src/main/java/com/domnian/paperdragon/events/BlockHarvestBeehiveEvent.java b/src/main/java/com/domnian/paperdragon/events/BlockHarvestBeehiveEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..bf3c023aefefcde66a58e49a382b113f4ea7ca1f
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/events/BlockHarvestBeehiveEvent.java
@@ -0,0 +1,66 @@
+package com.domnian.paperdragon.events;
+
+import org.bukkit.block.Block;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.block.BlockEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Event fired when a dispenser harvests a nearby beehive.
+ */
+public class BlockHarvestBeehiveEvent extends BlockEvent implements Cancellable {
+    private static final HandlerList handlers = new HandlerList();
+
+    private final Block beehive;
+    private final ItemStack tool;
+    private boolean cancelled;
+
+    public BlockHarvestBeehiveEvent(@NotNull Block dispenser, @NotNull Block beehive, @NotNull ItemStack tool) {
+        super(dispenser);
+        this.beehive = beehive;
+        this.tool = tool;
+    }
+
+    /**
+     * Gets the beehive that was harvested.
+     *
+     * @return the beehive that was harvested.
+     */
+    @NotNull
+    public Block getBeehive() {
+        return beehive;
+    }
+
+    /**
+     * Gets the item used to harvest the beehive.
+     *
+     * @return the item used to harvest the beehive.
+     */
+    @NotNull
+    public ItemStack getTool() {
+        return tool.clone();
+    }
+
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    @Override
+    public void setCancelled(boolean cancelled) {
+        this.cancelled = cancelled;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
