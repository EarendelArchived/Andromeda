From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: chickeneer <emcchickeneer@gmail.com>
Date: Tue, 29 Dec 2020 01:32:45 -0600
Subject: [PATCH] Fake Player API


diff --git a/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Server.java b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Server.java
new file mode 100644
index 0000000000000000000000000000000000000000..6703b328aa81545d0845a6d4a29f4635c48f60a5
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/api/CraftDAPI_Server.java
@@ -0,0 +1,35 @@
+package com.domnian.paperdragon.api;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.google.common.collect.Maps;
+import net.kyori.adventure.text.Component;
+import org.bukkit.GameMode;
+import org.jetbrains.annotations.NotNull;
+
+import javax.annotation.Nullable;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+
+public class CraftDAPI_Server implements DAPI_Server {
+    public final Map<UUID, FakePlayer> fakePlayerMap = Maps.newHashMap();
+
+    @Nullable
+    @Override
+    public FakePlayer getFakePlayer(@NotNull UUID uuid) {
+        return fakePlayerMap.get(uuid);
+    }
+
+    @NotNull
+    @Override
+    public FakePlayer createFakePlayer(@NotNull PlayerProfile profile, int ping, @NotNull GameMode gameMode, @NotNull Component playerListName) throws IllegalArgumentException {
+        return new CraftFakePlayer(profile, ping, gameMode, playerListName);
+    }
+
+    @NotNull
+    @Override
+    public Set<FakePlayer> getJoinedFakePlayers() {
+        return Set.copyOf(fakePlayerMap.values());
+    }
+
+}
diff --git a/src/main/java/com/domnian/paperdragon/api/CraftDragonAPI.java b/src/main/java/com/domnian/paperdragon/api/CraftDragonAPI.java
index a6408aab4fb1a8ad518b8be212c6e7996bd2ee84..510944d1b28289cd420e2524cbf99cfff730dcd9 100644
--- a/src/main/java/com/domnian/paperdragon/api/CraftDragonAPI.java
+++ b/src/main/java/com/domnian/paperdragon/api/CraftDragonAPI.java
@@ -37,6 +37,11 @@ public final class CraftDragonAPI extends DragonAPI {
         meta = new CraftDAPI_Meta();
         chat = new CraftDAPI_Chat();
         heads = new CraftDAPI_Heads();
+        server = new CraftDAPI_Server();
+    }
+
+    public static CraftDAPI_Server getServer() {
+        return (CraftDAPI_Server) server;
     }
 
 }
diff --git a/src/main/java/com/domnian/paperdragon/api/CraftFakePlayer.java b/src/main/java/com/domnian/paperdragon/api/CraftFakePlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..bb70d70afa91c49be9103823e892ade01334a7f5
--- /dev/null
+++ b/src/main/java/com/domnian/paperdragon/api/CraftFakePlayer.java
@@ -0,0 +1,149 @@
+package com.domnian.paperdragon.api;
+
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.domnian.paperdragon.events.FakePlayerJoinEvent;
+import com.domnian.paperdragon.events.FakePlayerQuitEvent;
+import net.kyori.adventure.text.Component;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoPacket.Action;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.GameMode;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.util.UUID;
+
+public class CraftFakePlayer implements FakePlayer {
+    private final PlayerProfile profile;
+    // Use uuid field to ensure the PlayerProfile is not altered to change the UUID.
+    private final UUID uuid;
+    public int ping;
+    public GameMode gameMode;
+    public Component playerListName;
+    public boolean sentListPacket;
+
+    public CraftFakePlayer(@NotNull PlayerProfile profile, int ping, @NotNull GameMode gameMode, @NotNull Component playerListName) throws IllegalArgumentException {
+        this.profile = profile;
+        if (profile.getId() == null) {
+            throw new IllegalArgumentException("PlayerProfile does not contain a valid id");
+        }
+        this.uuid = profile.getId();
+        this.ping = ping;
+        this.gameMode = gameMode;
+        this.playerListName = playerListName;
+    }
+
+    @NotNull
+    @Override
+    public PlayerProfile getProfile() {
+        return profile;
+    }
+
+    @NotNull
+    @Override
+    public Component getPlayerListName() {
+        return playerListName;
+    }
+
+    @Override
+    public int getPing() {
+        return ping;
+    }
+
+    @NotNull
+    @Override
+    public GameMode getGameMode() {
+        return gameMode;
+    }
+
+    @Nullable
+    @Override
+    public UUID getUniqueId() {
+        return uuid;
+    }
+
+    @Override
+    public void join() {
+        UUID uuid = this.getUniqueId();
+        if (this.isJoined()) {
+            return;
+        }
+        new FakePlayerJoinEvent(this).callEvent();
+        CraftDragonAPI.getServer().fakePlayerMap.put(uuid, this);
+
+        ClientboundPlayerInfoPacket packet = new ClientboundPlayerInfoPacket(Action.ADD_PLAYER, this);
+        for (ServerPlayer entityPlayer : MinecraftServer.getServer().getPlayerList().players) {
+            if (entityPlayer.getBukkitEntity().canSee(this)) {
+                entityPlayer.connection.send(packet);
+            }
+        }
+    }
+
+    @Override
+    public void quit() {
+        UUID uuid = this.getUniqueId();
+        if (!this.isJoined()) {
+            return;
+        }
+        new FakePlayerQuitEvent(this).callEvent();
+        CraftDragonAPI.getServer().fakePlayerMap.remove(uuid);
+
+        ClientboundPlayerInfoPacket packet = new ClientboundPlayerInfoPacket(Action.REMOVE_PLAYER, this);
+        for (ServerPlayer entityPlayer : MinecraftServer.getServer().getPlayerList().players) {
+            if (entityPlayer.getBukkitEntity().canSee(this)) {
+                entityPlayer.connection.send(packet);
+            } else {
+                entityPlayer.getBukkitEntity().hiddenFakePlayers.remove(uuid);
+            }
+        }
+    }
+
+    @Override
+    public void setPing(int ping, boolean update) {
+        this.ping = ping;
+        if (update) {
+            this.sendUpdatePackets(Action.UPDATE_LATENCY);
+        }
+    }
+
+    @Override
+    public void setGameMode(@NotNull GameMode gameMode, boolean update) {
+        this.gameMode = gameMode;
+        if (update) {
+            this.sendUpdatePackets(Action.UPDATE_GAME_MODE);
+        }
+    }
+
+    @Override
+    public void setPlayerListName(@NotNull Component playerListName, boolean update) {
+        this.playerListName = playerListName;
+        if (update) {
+            this.sendUpdatePackets(Action.UPDATE_DISPLAY_NAME);
+        }
+    }
+
+    @Override
+    public void update() {
+        this.sendUpdatePackets(Action.UPDATE_LATENCY);
+        this.sendUpdatePackets(Action.UPDATE_GAME_MODE);
+        this.sendUpdatePackets(Action.UPDATE_DISPLAY_NAME);
+    }
+
+    private void sendUpdatePackets(@NotNull Action action) {
+        if (this.isJoined()) {
+            ClientboundPlayerInfoPacket packet = new ClientboundPlayerInfoPacket(action, this);
+            for (ServerPlayer entityPlayer : MinecraftServer.getServer().getPlayerList().players) {
+                if (entityPlayer.getBukkitEntity().canSee(this)) {
+                    entityPlayer.connection.send(packet);
+                }
+            }
+        }
+    }
+
+    @Override
+    public boolean isJoined() {
+        return CraftDragonAPI.getServer().fakePlayerMap.containsKey(this.getUniqueId());
+    }
+
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
index 46ae5d40c26264e6b0ca253afa65b7846e6e5e6d..aa4e8c1fb5acdda2d649d37e3464e8110c4e5474 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
@@ -1,11 +1,14 @@
 package net.minecraft.network.protocol.game;
 
+import com.domnian.paperdragon.api.FakePlayer; // PaperDragon
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import java.util.Collection;
 import java.util.List;
 import javax.annotation.Nullable;
+
+import io.papermc.paper.adventure.PaperAdventure; // PaperDragon
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
@@ -17,6 +20,24 @@ public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListe
     private final ClientboundPlayerInfoPacket.Action action;
     private final List<ClientboundPlayerInfoPacket.PlayerUpdate> entries;
 
+    // PaperDragon start
+    public ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action enumplayerinfoaction, FakePlayer... fakePlayers) {
+        this.action = enumplayerinfoaction;
+        this.entries = Lists.newArrayListWithCapacity(fakePlayers.length);
+        for (FakePlayer fakePlayer : fakePlayers) {
+            if (fakePlayer.getUniqueId() != null) {
+                this.entries.add(new ClientboundPlayerInfoPacket.PlayerUpdate(
+                        com.destroystokyo.paper.profile.CraftPlayerProfile.asAuthlib(fakePlayer.getProfile()),
+                        fakePlayer.getPing(),
+                        GameType.byId(fakePlayer.getGameMode().getValue()),
+                        PaperAdventure.asVanilla(fakePlayer.getPlayerListName()),
+                        null
+                ));
+            }
+        }
+    }
+    // PaperDragon end
+
     public ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action action, ServerPlayer... players) {
         this.action = action;
         this.entries = Lists.newArrayListWithCapacity(players.length);
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 58f068aa6a237d4e0b015c2e574bef0ceb33dfe2..5b983395b95b442d66509aef4fc2f133cb58c235 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1,6 +1,8 @@
 package net.minecraft.server.players;
 
 import co.aikar.timings.MinecraftTimings;
+import com.domnian.paperdragon.api.CraftDragonAPI; // PaperDragon
+import com.domnian.paperdragon.api.FakePlayer; // PaperDragon
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -385,6 +387,13 @@ public abstract class PlayerList {
         }
         // CraftBukkit end
 
+        // PaperDragon start
+        for (FakePlayer fakePlayer : CraftDragonAPI.getServer().fakePlayerMap.values()) {
+            if (player.getBukkitEntity().canSee(fakePlayer)) {
+                player.connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, fakePlayer));
+            }
+        }
+        // PaperDragon end
         // CraftBukkit start - sendAll above replaced with this loop
         ClientboundPlayerInfoPacket packet = new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, player);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 0a575836bd6f2faf4aa295d068cd2aa30fe37180..3cf8c8de1f446260f7bc3673bd4f9c1739572af0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.destroystokyo.paper.Title;
+import com.domnian.paperdragon.api.CraftDragonAPI; // PaperDragon
+import com.domnian.paperdragon.api.FakePlayer; // PaperDragon
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
@@ -1890,6 +1892,81 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return !this.hiddenEntities.containsKey(entity.getUniqueId());
     }
 
+    // PaperDragon start
+    public final Map<UUID, Set<WeakReference<Plugin>>> hiddenFakePlayers = new HashMap<>();
+
+    @Override
+    public boolean canSee(@NotNull FakePlayer fakePlayer) {
+        return !hiddenFakePlayers.containsKey(fakePlayer.getUniqueId());
+    }
+
+    @Override
+    public void hideFakePlayer(@NotNull Plugin plugin, @NotNull FakePlayer fakePlayer) {
+        if (getHandle().connection == null) {
+            return;
+        }
+        UUID fakeUUID = fakePlayer.getUniqueId();
+        if (fakeUUID != null && fakeUUID.equals(this.getUniqueId())) {
+            return;
+        }
+
+        Set<WeakReference<Plugin>> hidingPlugins = hiddenFakePlayers.get(fakeUUID);
+        if (hidingPlugins != null) {
+            // Some plugins are already hiding the player. Just mark that this
+            // plugin wants the player hidden too and end.
+            hidingPlugins.add(getPluginWeakReference(plugin));
+            return;
+        }
+        hidingPlugins = new HashSet<>();
+        hidingPlugins.add(getPluginWeakReference(plugin));
+        hiddenFakePlayers.put(fakeUUID, hidingPlugins);
+
+        if (CraftDragonAPI.getServer().fakePlayerMap.containsKey(fakeUUID)) {
+            getHandle().connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.REMOVE_PLAYER, fakePlayer));
+        }
+    }
+
+    @Override
+    public void showFakePlayer(@NotNull Plugin plugin, @NotNull FakePlayer fakePlayer) {
+        if (getHandle().connection == null) {
+            return;
+        }
+        UUID fakeUUID = fakePlayer.getUniqueId();
+        if (fakeUUID != null && fakeUUID.equals(this.getUniqueId())) {
+            return;
+        }
+
+        Set<WeakReference<Plugin>> hidingPlugins = hiddenFakePlayers.get(fakeUUID);
+        if (hidingPlugins == null) {
+            return; // Player isn't hidden
+        }
+
+        hidingPlugins.remove(getPluginWeakReference(plugin));
+        if (!hidingPlugins.isEmpty()) {
+            return; // Some other plugins still want the player hidden
+        }
+
+        hiddenFakePlayers.remove(fakeUUID);
+        if (CraftDragonAPI.getServer().fakePlayerMap.containsKey(fakeUUID)) {
+            getHandle().connection.send(new ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action.ADD_PLAYER, fakePlayer));
+        }
+    }
+
+    @NotNull
+    @Override
+    public Set<FakePlayer> getHiddenFakePlayers() {
+        Set<FakePlayer> ret = new HashSet<>();
+        for (UUID uuid : hiddenFakePlayers.keySet()) {
+            FakePlayer fakePlayer = CraftDragonAPI.server.getFakePlayer(uuid);
+            if (fakePlayer != null) {
+                ret.add(fakePlayer);
+            }
+        }
+
+        return java.util.Collections.unmodifiableSet(ret);
+    }
+    // PaperDragon end
+
     @Override
     public Map<String, Object> serialize() {
         Map<String, Object> result = new LinkedHashMap<String, Object>();
