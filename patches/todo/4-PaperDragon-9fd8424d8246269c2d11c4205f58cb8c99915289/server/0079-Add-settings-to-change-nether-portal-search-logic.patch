From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: willies952002 <admin@domnian.com>
Date: Fri, 20 May 2022 20:37:41 -0400
Subject: [PATCH] Add settings to change nether portal search logic

> 'nether-portal.use-vanilla-search': Reverts the logic back to using Vanilla's logic
> 'nether-portal.use-2d-search': Changes the Vanilla logic to ignore the Y value (requires nether-portal.use-vanilla-search to be enabled)

diff --git a/src/main/java/com/domnian/paperdragon/DragonWorldConfig.java b/src/main/java/com/domnian/paperdragon/DragonWorldConfig.java
index 5cf516af8b6275c3c0d89ccc863e48a4b1c95043..eba8cdd2407db2d0979fcd80608434d69fbd4f6a 100644
--- a/src/main/java/com/domnian/paperdragon/DragonWorldConfig.java
+++ b/src/main/java/com/domnian/paperdragon/DragonWorldConfig.java
@@ -78,6 +78,13 @@ public class DragonWorldConfig {
         broadcastAdvancementsToWorld = getBoolean("world-settings.broadcast-advancements-to-world", false);
     }
 
+    public boolean use2DPortalSearch = false;
+    public boolean useVanillaPortalSearch = false;
+    private void portalOverrides() {
+        use2DPortalSearch = getBoolean("nether-portal.use-2d-search", false);
+        useVanillaPortalSearch = getBoolean("nether-portal.use-vanilla-search", true);
+    }
+
     public boolean disableImprovedHopperPerformance = false;
     private void hoppers() {
         disableImprovedHopperPerformance = getBoolean("disable-improved-hopper-performance", false);
diff --git a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
index b7cb9fbb15c83cd4225a241e44132279d9308f96..6e86fa5e6d47e2f992a8796bb523116efea233da 100644
--- a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
+++ b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
@@ -53,6 +53,26 @@ public class PortalForcer {
 
         // Paper start - optimise portals
         Optional<PoiRecord> optional;
+        // PaperDragon start
+        if (level.dragonConfig.useVanillaPortalSearch) {
+            villageplace.ensureLoadedAndValid(this.level, blockposition, i);
+            optional = villageplace.getInSquare(type -> {
+                return type.is(PoiTypes.NETHER_PORTAL);
+            }, blockposition, i, PoiManager.Occupancy.ANY).filter(record -> {
+                return worldborder.isWithinBounds(record.getPos());
+            }).sorted(Comparator.comparingDouble((PoiRecord record) -> {
+                if (level.dragonConfig.use2DPortalSearch) {
+                    return record.getPos().atY(0).distSqr(blockposition.atY(0));
+                } else {
+                    return record.getPos().distSqr(blockposition);
+                }
+            }).thenComparingInt(record -> {
+                return record.getPos().getY();
+            })).filter(record -> {
+                return level.getBlockState(record.getPos()).hasProperty(BlockStateProperties.HORIZONTAL_AXIS);
+            }).findFirst();
+        } else {
+        // PaperDragon End
         java.util.List<PoiRecord> records = new java.util.ArrayList<>();
         io.papermc.paper.util.PoiAccess.findClosestPoiDataRecords(
             villageplace,
@@ -84,6 +104,7 @@ public class PortalForcer {
         // now we're done
         optional = Optional.ofNullable(lowestYRecord);
         // Paper end - optimise portals
+        } // PaperDragon
 
         return optional.map((villageplacerecord) -> {
             BlockPos blockposition1 = villageplacerecord.getPos();
