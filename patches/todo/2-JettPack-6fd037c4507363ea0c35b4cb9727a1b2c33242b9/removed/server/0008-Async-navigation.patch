From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: "tsao-chi@the-lingo.org" <tsao-chi@the-lingo.org>
Date: Tue, 4 Aug 2020 18:29:57 +0200
Subject: [PATCH] Async navigation

Co-Authored By: Mariell Hoversholm <proximyst@proximyst.com>

This is a ported and safer version of Akarin's async navigation.

diff --git a/src/main/java/net/minecraft/server/AsyncNavigationAbstract.java b/src/main/java/net/minecraft/server/AsyncNavigationAbstract.java
new file mode 100644
index 0000000000000000000000000000000000000000..3ecd00f6cb0cbe15a9e3812eee3fce3ea57ec8f3
--- /dev/null
+++ b/src/main/java/net/minecraft/server/AsyncNavigationAbstract.java
@@ -0,0 +1,194 @@
+package net.minecraft.server;
+
+import com.google.common.collect.ImmutableSet;
+
+import java.util.Set;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import net.minecraft.world.level.pathfinder.PathEntity;
+import net.minecraft.world.level.ChunkCache;
+import net.minecraft.core.BlockPosition;
+import net.minecraft.world.level.World;
+import net.minecraft.world.entity.EntityInsentient;
+import net.minecraft.world.entity.ai.navigation.NavigationAbstract;
+import net.minecraft.SystemUtils;
+import net.minecraft.world.level.pathfinder.PathfinderNormal;
+import net.minecraft.world.phys.Vec3D;
+import net.minecraft.core.BaseBlockPosition;
+import net.minecraft.world.entity.ai.attributes.GenericAttributes;
+
+/**
+ * A {@link NavigationAbstract} which supports executing its navigation later on with its own threads.
+ * <p>
+ * The {@link #tick()} method does <i>not</i> force asynchronous navigation. If plugins want to use that, it works.
+ */
+public abstract class AsyncNavigationAbstract extends NavigationAbstract {
+    protected static final ExecutorService NAVIGATION_EXECUTOR = Executors.newFixedThreadPool(
+        Integer.getInteger(
+            "Paper.WorkerThreadCount",
+            Math.min(8, Math.max(Runtime.getRuntime().availableProcessors() - 2, 1))
+        ),
+        runnable -> {
+            Thread thread = new Thread();
+            thread.setDaemon(true); // Don't hinder the server from shutting down.
+            thread.setPriority(Thread.NORM_PRIORITY - 1); // Navigation should not be the 1st concern of the server
+            thread.setName("Navigation thread");
+            return thread;
+        });
+
+    protected long lastPathfindAsync; // NavigationAbstract#n equivalent for async pathfinds
+
+    public AsyncNavigationAbstract(EntityInsentient entityinsentient, World world) {
+        super(entityinsentient, world);
+    }
+
+    public void asyncRecalculatePath() {
+        if (this.getWorld().getTime() - this.lastPathfindAsync <= 20L) {
+            asyncTick(getCurrentPath());
+            return;
+        }
+
+        if (this.getCurrentTarget() == null)
+            return;
+
+        this.lastPathfindAsync = this.getWorld().getTime();
+
+        BlockPosition chunkCoordinates = this.getEntity().getChunkCoordinates();
+        int followRange = (int) Math.floor(this.getEntity().getAttributeValue(GenericAttributes.FOLLOW_RANGE) + 8F);
+        ChunkCache cache = new ChunkCache(
+            this.getWorld(),
+            chunkCoordinates.add(-followRange, -followRange, -followRange),
+            chunkCoordinates.add(followRange, followRange, followRange)
+        );
+
+        if (this.getCurrentPath() != null && !this.getCurrentPath().isDone()) {
+            asyncTick(this.getCurrentPath());
+            return;
+        }
+
+        NAVIGATION_EXECUTOR.execute(() -> {
+            PathEntity path = this.asyncFindPathToAny(cache, ImmutableSet.of(this.getCurrentTarget()), this.getCurrentDistance());
+            this.getWorld().getMinecraftServer().processQueue.add(() -> {
+                if (path != null && path.getDestination() != null)
+                    this.setCurrentTarget(path.getDestination());
+
+                this.setCurrentPath(path);
+            });
+        });
+    }
+
+    // Essentially #a(Set<BlockPosition> set, int i, boolean flag, int j) except without event.
+    // TODO: Add an async pathfinding event
+    public PathEntity asyncFindPathToAny(ChunkCache chunkCache, Set<BlockPosition> positions, int range) {
+        if (this.getEntity().locY() < 0.0D
+            || !this.isAtValidPosition())
+            // Can't path below the world and in invalid positions.
+            return null;
+
+        return this.getPathfinder().findPathToAny(
+            chunkCache,
+            this.getEntity(),
+            positions,
+            this.getCurrentPathStartTime(),
+            range,
+            this.getRangeMultiplier()
+        );
+    }
+
+    public void asyncTick() {
+        incrementTick();
+        asyncRecalculatePath();
+    }
+
+    public void asyncTick(PathEntity path) {
+        if (shouldContinueSearching(path)) return;
+
+        Vec3D vector;
+        if (this.isAtValidPosition())
+            this.applyPath(path);
+        else if (path.getNextIndex() < path.getSize()) {
+            vector = this.getImaginaryEntityPosition();
+            Vec3D position = path.getPosition(this.getEntity(), path.getNextIndex());
+
+            if (vector.getY() > position.getY()
+                && !this.getEntity().isOnGround()
+                && Math.floor(vector.getX()) == Math.floor(vector.getX())
+                && Math.floor(vector.getZ()) == Math.floor(vector.getZ())) {
+                path.setNextIndex(path.getNextIndex() + 1);
+            }
+        }
+
+        if (shouldContinueSearching(path)) return;
+
+        vector = path.getPosition(this.getEntity());
+        BlockPosition pos = new BlockPosition(vector);
+
+        this.getEntity().getControllerMove().setTargetPosition(
+            vector.getX(),
+            this.getWorld().getType(pos.down()).isAir()
+                ? vector.getY()
+                : PathfinderNormal.getFeetY(this.getWorld(), pos),
+            vector.getZ(),
+            this.getSpeed()
+        );
+    }
+
+    protected void applyPath(PathEntity path) {
+        Vec3D vector = this.getImaginaryEntityPosition();
+
+        float entityWidth = this.getEntity().getWidth();
+        this.setChebyshevMinimumReachProximity(
+            entityWidth > 0.75F
+                ? entityWidth / 2F
+                : 0.75F - entityWidth / 2F
+        );
+
+        BaseBlockPosition nextPosition = path.getNext();
+        double x = Math.abs(this.getEntity().locX() - nextPosition.getX() - 0.5D);
+        double y = Math.abs(this.getEntity().locY() - nextPosition.getY());
+        double z = Math.abs(this.getEntity().locZ() - nextPosition.getZ() - 0.5D);
+        boolean hasReachedDestination = x < this.getChebyshevMinimumReachProximity()
+            && z < this.getChebyshevMinimumReachProximity()
+            && y < 1D;
+
+        if (hasReachedDestination || this.getEntity().isAcceptablePathType(path.getCurrentPoint().getType()) && this.shouldTargetNextNodeInDirection(vector))
+            path.setNextIndex(path.getNextIndex() + 1);
+
+        if (this.getCurrentTick() - this.getCurrentPathStartTime() > 100) {
+            if (vector.distanceSquared(this.getCurrentPathStartPosition()) < 2.25D) {
+                this.stopPathfinding();
+            }
+
+            this.setCurrentPathStartTime(this.getCurrentTick());
+            this.setCurrentPathStartPosition(vector);
+        }
+
+        if (shouldContinueSearching(getCurrentPath())) return;
+
+        nextPosition = path.getNext();
+        if (nextPosition.equals(this.getLastNodePosition())) {
+            this.addToCurrentNodeStartTickMs(SystemUtils.getMonotonicMillis() - this.getLastActiveTickMs());
+        } else {
+            this.setLastNodePosition(nextPosition);
+            this.setCurrentNodeTimeout(
+                this.getEntity().getSpeed() > 0F
+                    // TODO: OBFHELPERs
+                    ? vector.f(Vec3D.c(nextPosition)) / (double) this.getEntity().getSpeed() * 1000D
+                    : 0D
+            );
+        }
+
+        if (this.getCurrentNodeTimeout() > 0D
+            && (double) this.getCurrentNodeStartTickMs() > this.getCurrentNodeTimeout() * 3D) {
+            this.resetStuckTimeout();
+            this.stopPathfinding();
+        }
+
+        this.setLastActiveTickMs(SystemUtils.getMonotonicMillis());
+    }
+
+    public final boolean shouldContinueSearching(PathEntity path) {
+        // We must not have more to do in the existing path.
+        return path == null || path.isDone();
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/EntityInsentient.java b/src/main/java/net/minecraft/world/entity/EntityInsentient.java
index e4f5a5ffd25d4d4e427938a633675be46805af66..4c0be3a6a6e016722365b3a600a7aaa051a949fb 100644
--- a/src/main/java/net/minecraft/world/entity/EntityInsentient.java
+++ b/src/main/java/net/minecraft/world/entity/EntityInsentient.java
@@ -90,6 +90,7 @@ import org.bukkit.event.entity.EntityUnleashEvent;
 import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
 import org.bukkit.event.player.PlayerUnleashEntityEvent; // Paper
 // CraftBukkit end
+import net.minecraft.server.AsyncNavigationAbstract;
 
 public abstract class EntityInsentient extends EntityLiving {
 
@@ -185,6 +186,7 @@ public abstract class EntityInsentient extends EntityLiving {
         this.bt.put(pathtype, f);
     }
 
+    public final boolean isAcceptablePathType(PathType pathtype) { return this.b(pathtype); } // Hyalus - OBFHELPER
     public boolean b(PathType pathtype) {
         return pathtype != PathType.DANGER_FIRE && pathtype != PathType.DANGER_CACTUS && pathtype != PathType.DANGER_OTHER && pathtype != PathType.WALKABLE_DOOR;
     }
@@ -880,6 +882,11 @@ public abstract class EntityInsentient extends EntityLiving {
         this.goalSelector.doTick();
         this.world.getMethodProfiler().exit();
         this.world.getMethodProfiler().enter("navigation");
+        // Hyalus start
+        if (this.navigation instanceof AsyncNavigationAbstract)
+            ((AsyncNavigationAbstract) this.navigation).asyncTick();
+        else
+        // Hyalus end
         this.navigation.c();
         this.world.getMethodProfiler().exit();
         this.world.getMethodProfiler().enter("mob tick");
diff --git a/src/main/java/net/minecraft/world/entity/EntityLiving.java b/src/main/java/net/minecraft/world/entity/EntityLiving.java
index 1fb2a90d3120b7d4a1627219d3ff3afd5cfb0608..58db6a5b2072a41a7cf637e53aa301301f0b9c45 100644
--- a/src/main/java/net/minecraft/world/entity/EntityLiving.java
+++ b/src/main/java/net/minecraft/world/entity/EntityLiving.java
@@ -2246,6 +2246,7 @@ public abstract class EntityLiving extends Entity {
         return this.getAttributeMap().a(attributebase);
     }
 
+    public final double getAttributeValue(AttributeBase attributebase) { return this.b(attributebase); } // Hyalus - OBFHELPER
     public double b(AttributeBase attributebase) {
         return this.getAttributeMap().c(attributebase);
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/control/ControllerMove.java b/src/main/java/net/minecraft/world/entity/ai/control/ControllerMove.java
index 434229b146978ba7dc08a83ea55fdb3ab743fbf8..b190dd1a00bd0c5b777af72c6195aa801ab43749 100644
--- a/src/main/java/net/minecraft/world/entity/ai/control/ControllerMove.java
+++ b/src/main/java/net/minecraft/world/entity/ai/control/ControllerMove.java
@@ -38,6 +38,7 @@ public class ControllerMove {
         return this.e;
     }
 
+    public final void setTargetPosition(double x, double y, double z, double speedModifier) { this.a(x, y, z, speedModifier); } // Hyalus - OBFHELPER
     public void a(double d0, double d1, double d2, double d3) {
         this.b = d0;
         this.c = d1;
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/Navigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/Navigation.java
index 703d06b2b29f1500301d82df78dc377141085145..0a4ba7054a06c95fdc1d1591a49ad29156af7525 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/Navigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/Navigation.java
@@ -16,8 +16,9 @@ import net.minecraft.world.level.pathfinder.PathType;
 import net.minecraft.world.level.pathfinder.Pathfinder;
 import net.minecraft.world.level.pathfinder.PathfinderNormal;
 import net.minecraft.world.phys.Vec3D;
+import net.minecraft.server.AsyncNavigationAbstract;
 
-public class Navigation extends NavigationAbstract {
+public class Navigation extends AsyncNavigationAbstract {
 
     private boolean p;
 
@@ -198,7 +199,7 @@ public class Navigation extends NavigationAbstract {
                     double d3 = (double) j2 + 0.5D - vec3d.z;
 
                     if (d2 * d0 + d3 * d1 >= 0.0D) {
-                        PathType pathtype = this.o.a(this.b, i2, j - 1, j2, this.a, l, i1, j1, true, true);
+                        PathType pathtype = this.o.a(this.getNodeCreator().getChunkCache(), i2, j - 1, j2, this.a, l, i1, j1, true, true); // Hyalus - use chunk cache
 
                         if (!this.a(pathtype)) {
                             return false;
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/NavigationAbstract.java b/src/main/java/net/minecraft/world/entity/ai/navigation/NavigationAbstract.java
index 0c8f3e424a631aca98f83f570aff91c833aaf4b9..9930cff69bcb3660aebf93b187092693236598e9 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/NavigationAbstract.java
@@ -31,24 +31,40 @@ import net.minecraft.world.phys.Vec3D;
 public abstract class NavigationAbstract {
 
     protected final EntityInsentient a; public final EntityInsentient getEntity() { return a; } // Paper - OBFHELPER // Tuinity - match types
+
     protected final World b;
+    protected final World getWorld() { return this.b; } // Hyalus - OBFHELPER
     @Nullable
     protected PathEntity c; protected final PathEntity getCurrentPath() { return this.c; } // Paper - OBFHELPER
+    protected final void setCurrentPath(PathEntity path) { this.c = path; } // Hyalus - OBFHELPER
     protected double d;
+    protected final double getSpeed() { return this.d; } // Hyalus - OBFHELPER
     protected int e;
+    protected final int getCurrentTick() { return this.e; } protected final void incrementTick() { ++this.e; } // Hyalus - OBFHELPER
     protected int f;
+    protected final int getCurrentPathStartTime() { return this.f; } protected final void setCurrentPathStartTime(int time) { this.f = time; } // Hyalus - OBFHELPER
     protected Vec3D g;
+    protected final Vec3D getCurrentPathStartPosition() { return this.g; } protected final void setCurrentPathStartPosition(Vec3D position) { this.g = position; } // Hyalus - OBFHELPER
     protected BaseBlockPosition h;
+    protected final BaseBlockPosition getLastNodePosition() { return this.h; } protected final void setLastNodePosition(BaseBlockPosition position) { this.h = position; } // Hyalus - OBFHELPER
     protected long i;
+    protected final long getCurrentNodeStartTickMs() { return this.i; } protected final void addToCurrentNodeStartTickMs(long amount) { this.i += amount; } // Hyalus - OBFHELPER
     protected long j;
+    protected final long getLastActiveTickMs() { return this.j; } protected final void setLastActiveTickMs(long ms) { this.j = ms; } // Hyalus - OBFHELPER
     protected double k;
+    protected final double getCurrentNodeTimeout() { return this.k; } protected final void setCurrentNodeTimeout(double timeout) { this.k = timeout; } // Hyalus - OBFHELPER
     protected float l;
+     protected final float getChebyshevMinimumReachProximity() { return this.l; } protected final void setChebyshevMinimumReachProximity(float proximity) { this.l = proximity; } // Hyalus - OBFHELPER
     protected boolean m; protected final boolean needsPathRecalculation() { return this.m; } // Tuinity - OBFHELPER
     protected long n;
     protected PathfinderAbstract o;
+    protected final PathfinderAbstract getNodeCreator() { return this.o; } // Hyalus - OBFHELPER
     private BlockPosition p;
+    protected final BlockPosition getCurrentTarget() { return this.p; } protected final void setCurrentTarget(BlockPosition target) { this.p = target; } // Hyalus - OBFHELPER
     private int q;
+    protected final int getCurrentDistance() { return this.q; } // Hyalus - OBFHELPER
     private float r;
+    protected final float getRangeMultiplier() { return this.r; } // Hyalus - OBFHELPER
     private final Pathfinder s; public Pathfinder getPathfinder() { return this.s; } // Paper - OBFHELPER
     private boolean t;
     private co.aikar.timings.Timing timing; // Yatopia
@@ -95,6 +111,7 @@ public abstract class NavigationAbstract {
         return this.m;
     }
 
+    public final void recalculatePath() { this.j(); } // Hyalus - OBFHELPER
     public void j() {
         if (this.b.getTime() - this.n > 20L) {
             if (this.p != null) {
@@ -254,6 +271,7 @@ public abstract class NavigationAbstract {
         return this.c;
     }
 
+    public final void tick() { c(); } // Hyalus - OBFHELPER
     public void c() {
         // Yatopia start
         timing.startTiming();
@@ -310,6 +328,7 @@ public abstract class NavigationAbstract {
         this.a(vec3d);
     }
 
+    protected final boolean shouldTargetNextNodeInDirection(Vec3D direction) { return this.b(direction); } // Paper - OBFHELPER
     private boolean b(Vec3D vec3d) {
         if (this.c.f() + 1 >= this.c.e()) {
             return false;
@@ -367,6 +386,7 @@ public abstract class NavigationAbstract {
         this.o();
     }
 
+    protected final void resetStuckTimeout() { this.f(); } // Paper - OBFHELPER
     private void f() {
         this.h = BaseBlockPosition.ZERO;
         this.i = 0L;
@@ -387,8 +407,10 @@ public abstract class NavigationAbstract {
         this.c = null;
     }
 
+    protected final Vec3D getImaginaryEntityPosition() { return this.b(); } // Hyalus - OBFHELPER
     protected abstract Vec3D b();
 
+    protected final boolean isAtValidPosition() { return this.a(); } // Hyalus - OBFHELPER
     protected abstract boolean a();
 
     protected boolean p() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/NavigationFlying.java b/src/main/java/net/minecraft/world/entity/ai/navigation/NavigationFlying.java
index f5664b8c0762f775f3cd106d156eb74b48bcedc2..c9b26e80a45cd8239aa12ed0865a5f746586d473 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/NavigationFlying.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/NavigationFlying.java
@@ -11,8 +11,9 @@ import net.minecraft.world.level.pathfinder.PathEntity;
 import net.minecraft.world.level.pathfinder.Pathfinder;
 import net.minecraft.world.level.pathfinder.PathfinderFlying;
 import net.minecraft.world.phys.Vec3D;
+import net.minecraft.server.AsyncNavigationAbstract;
 
-public class NavigationFlying extends NavigationAbstract {
+public class NavigationFlying extends AsyncNavigationAbstract { // Hyalus - async navigation
 
     public NavigationFlying(EntityInsentient entityinsentient, World world) {
         super(entityinsentient, world);
@@ -67,6 +68,39 @@ public class NavigationFlying extends NavigationAbstract {
         }
     }
 
+    @Override
+    public void asyncTick(PathEntity path) {
+        if (shouldContinueSearching(path)) return;
+
+        Vec3D vector;
+        if (this.isAtValidPosition())
+            this.applyPath(path);
+        else if (path.getNextIndex() < path.getSize()) {
+            vector = this.getImaginaryEntityPosition();
+            Vec3D position = path.getPosition(this.getEntity(), path.getNextIndex());
+
+            if (vector.getY() > position.getY()
+                && !this.getEntity().isOnGround()
+                && Math.floor(this.getEntity().locX()) == Math.floor(vector.getX())
+                && Math.floor(this.getEntity().locY()) == Math.floor(vector.getY())
+                && Math.floor(this.getEntity().locZ()) == Math.floor(vector.getZ())) {
+                path.setNextIndex(path.getNextIndex() + 1);
+            }
+        }
+
+        if (shouldContinueSearching(path)) return;
+
+        vector = path.getPosition(this.getEntity());
+        BlockPosition pos = new BlockPosition(vector);
+
+        this.getEntity().getControllerMove().setTargetPosition(
+            vector.getX(),
+            vector.getY(),
+            vector.getZ(),
+            this.getSpeed()
+        );
+    }
+
     @Override
     protected boolean a(Vec3D vec3d, Vec3D vec3d1, int i, int j, int k) {
         int l = MathHelper.floor(vec3d.x);
diff --git a/src/main/java/net/minecraft/world/entity/animal/EntityBee.java b/src/main/java/net/minecraft/world/entity/animal/EntityBee.java
index 4fb72f73ef4a1131ad91b3edea78a79169202720..6168c58fff34c4756a39096dda9bed8502919928 100644
--- a/src/main/java/net/minecraft/world/entity/animal/EntityBee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/EntityBee.java
@@ -583,6 +583,14 @@ public class EntityBee extends EntityAnimal implements IEntityAngerable, EntityB
                     super.c();
                 }
             }
+            // Hyalus start
+            @Override
+            public void asyncTick() {
+                if (!EntityBee.this.bC.k()) {
+                    super.asyncTick();
+                }
+            }
+            // Hyalus end
         };
 
         navigationflying.a(false);
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathEntity.java b/src/main/java/net/minecraft/world/level/pathfinder/PathEntity.java
index 81c3cb9da3f901d2bcf384f7113bdc5c60f9962f..df5c30f6cf38096894b999582ad26d9f7d6ffa15 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathEntity.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathEntity.java
@@ -32,6 +32,7 @@ public class PathEntity {
         return this.e <= 0;
     }
 
+    public final boolean isDone() { return this.c(); } // Hyalus - OBFHELPER
     public boolean c() {
         return this.e >= this.a.size();
     }
@@ -56,6 +57,7 @@ public class PathEntity {
         this.a.set(i, pathpoint);
     }
 
+    public final int getSize() { return this.e(); } // Hyalus - OBFHELPER
     public int e() {
         return this.a.size();
     }
@@ -64,10 +66,12 @@ public class PathEntity {
         return this.e;
     }
 
+    public final void setNextIndex(int index) { this.c(index); } // Hyalus - OBFHELPER
     public void c(int i) {
         this.e = i;
     }
 
+    public final Vec3D getPosition(Entity entity, int index) { return this.a(entity, index); } // Hyalus - OBFHELPER
     public Vec3D a(Entity entity, int i) {
         PathPoint pathpoint = (PathPoint) this.a.get(i);
         double d0 = (double) pathpoint.a + (double) ((int) (entity.getWidth() + 1.0F)) * 0.5D;
@@ -81,6 +85,7 @@ public class PathEntity {
         return ((PathPoint) this.a.get(i)).a();
     }
 
+    public final Vec3D getPosition(Entity entity) { return this.a(entity); } // Hyalus - OBFHELPER
     public Vec3D a(Entity entity) {
         return this.a(entity, this.e);
     }
@@ -89,6 +94,7 @@ public class PathEntity {
         return ((PathPoint) this.a.get(this.e)).a();
     }
 
+    public final PathPoint getCurrentPoint() { return this.h(); } // Hyalus - OBFHELPER
     public PathPoint h() {
         return (PathPoint) this.a.get(this.e);
     }
@@ -125,6 +131,7 @@ public class PathEntity {
         return "Path(length=" + this.a.size() + ")";
     }
 
+    public final BlockPosition getDestination() { return this.m(); } // Hyalus - OBFHELPER
     public BlockPosition m() {
         return this.f;
     }
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathPoint.java b/src/main/java/net/minecraft/world/level/pathfinder/PathPoint.java
index c260b0ca70cb18811158761c574aee9c3166da28..b56647f64c225ce6c20479acbb8f104ff0fb9467 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathPoint.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathPoint.java
@@ -18,6 +18,7 @@ public class PathPoint {
     public float j;
     public float k;
     public PathType l;
+    public final PathType getType() { return this.l; } // Hyalus - OBFHELPER
 
     public PathPoint(int i, int j, int k) {
         this.l = PathType.BLOCKED;
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/Pathfinder.java b/src/main/java/net/minecraft/world/level/pathfinder/Pathfinder.java
index 76e19f3a4ae988f6f3b59763d639fa5e084fa0bf..e5b332ae75028d1bc7e4fb375f84cfeede4d68d6 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/Pathfinder.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/Pathfinder.java
@@ -28,6 +28,7 @@ public class Pathfinder {
         this.b = i;
     }
 
+    @Nullable public PathEntity findPathToAny(ChunkCache chunkcache, EntityInsentient entityinsentient, Set<BlockPosition> set, float f, int i, float f1) { return a(chunkcache, entityinsentient, set, f, i, f1); } // Hyalus - OBFHELPER
     @Nullable
     public PathEntity a(ChunkCache chunkcache, EntityInsentient entityinsentient, Set<BlockPosition> set, float f, int i, float f1) {
         this.d.a();
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathfinderAbstract.java b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderAbstract.java
index 88be03bd77656235322522c3782b9f9a878b86b1..a75af005ad3c5b1a02a0525323a813aafb56571a 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathfinderAbstract.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderAbstract.java
@@ -11,6 +11,7 @@ import net.minecraft.world.level.IBlockAccess;
 public abstract class PathfinderAbstract {
 
     protected ChunkCache a;
+    public final ChunkCache getChunkCache() { return this.a; } // Hyalus - OBFHELPER
     protected EntityInsentient b;
     protected final Int2ObjectMap<PathPoint> c = new Int2ObjectOpenHashMap();
     protected int d;
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathfinderNormal.java b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderNormal.java
index 9d08094165cf18d99116b5c721fff888f3cb42e2..dc29e77f38703a5e95d8af1fd7c3c1920f8866e6 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathfinderNormal.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderNormal.java
@@ -221,6 +221,7 @@ public class PathfinderNormal extends PathfinderAbstract {
         return true;
     }
 
+    public static double getFeetY(IBlockAccess iblockaccess, BlockPosition blockposition) { return a(iblockaccess, blockposition); } // Hyalus - OBFHELPER
     public static double a(IBlockAccess iblockaccess, BlockPosition blockposition) {
         BlockPosition blockposition1 = blockposition.down();
         VoxelShape voxelshape = iblockaccess.getType(blockposition1).getCollisionShape(iblockaccess, blockposition1);
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathfinderTurtle.java b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderTurtle.java
index 86d849567cc6bc09f33716001ce4a2e8b7bd6188..0ec1ec7f77dcada4e6f72e36d6c0f19d2244f2b8 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathfinderTurtle.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderTurtle.java
@@ -161,7 +161,7 @@ public class PathfinderTurtle extends PathfinderNormal {
                 if (pathtype == PathType.OPEN) {
                     AxisAlignedBB axisalignedbb = new AxisAlignedBB((double) i - d2 + 0.5D, (double) j + 0.001D, (double) k - d2 + 0.5D, (double) i + d2 + 0.5D, (double) ((float) j + this.b.getHeight()), (double) k + d2 + 0.5D);
 
-                    if (!this.b.world.getCubes(this.b, axisalignedbb)) {
+                    if (!this.getChunkCache().getCubes(this.b, axisalignedbb)) { // Hyalus - use chunk cache
                         return null;
                     }
 
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/PathfinderWater.java b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderWater.java
index cd5676aa4a2bce60a57e91c2eb0b88e97ee626f1..1f5ce0ea04442e95cc548444a8eeb3f87f5c0ac1 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/PathfinderWater.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/PathfinderWater.java
@@ -72,7 +72,7 @@ public class PathfinderWater extends PathfinderAbstract {
     @Override
     protected PathPoint a(int i, int j, int k) {
         PathPoint pathpoint = null;
-        PathType pathtype = this.a(this.b.world, i, j, k);
+        PathType pathtype = this.a(this.getChunkCache(), i, j, k); // Hyalus - use chunk cache
         float f = this.b.a(pathtype);
 
         if (f >= 0.0F) {
