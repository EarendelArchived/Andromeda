From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@gmail.com>
Date: Mon, 6 Feb 2023 20:47:37 +0900
Subject: [PATCH] Purpur villager lobotomize tweaks


diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index e37f83c82647cbae93728023a46162f011ad5a9c..d79f799bce0d2192bcf0370517f700e965d2d773 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -207,7 +207,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         }
         if (this.level.getGameTime() % interval == 0) {
             // offset Y for short blocks like dirt_path/farmland
-            this.isLobotomized = !canTravelFrom(new BlockPos(getX(), getY() + 0.0625D, getZ()));
+            this.isLobotomized = isNeedLobotomy(); // Andromeda
 
             if (this.isLobotomized) {
                 this.notLobotomizedCount = 0;
@@ -229,6 +229,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
             return false;
         }
         net.minecraft.world.level.block.Block bottom = state.getBlock();
+        if (this.level.andromedaLevelConfiguration().entity.villager.lobotomizeTweaks.lobotomizeEvenOnBed && bottom instanceof net.minecraft.world.level.block.BedBlock) return true; // Andromeda
         if (bottom instanceof net.minecraft.world.level.block.FenceBlock ||
                 bottom instanceof net.minecraft.world.level.block.FenceGateBlock ||
                 bottom instanceof net.minecraft.world.level.block.WallBlock) {
@@ -241,6 +242,17 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     }
     // Purpur end
 
+    // Andromeda start
+    private boolean isNeedLobotomy() {
+        if (this.level.andromedaLevelConfiguration().entity.villager.lobotomizeTweaks.lobotomizeEvenOnBed) {
+            net.minecraft.world.level.block.state.BlockState state = this.level.getBlockStateIfLoaded(new BlockPos(getX(), getY() + 0.9375D, getZ()));
+            if (state != null)
+                return !(state.getBlock() instanceof net.minecraft.world.level.block.BedBlock);
+        } else if (canTravelFrom(new BlockPos(getX(), getY() + 0.0625D, getZ()))) return false;
+        return this.level.andromedaLevelConfiguration().entity.villager.lobotomizeTweaks.lobotomizeJobless || this.getVillagerData().getProfession() != VillagerProfession.NONE;
+    }
+    // Andromeda end
+
     @Override
     public Brain<Villager> getBrain() {
         return (Brain<Villager>) super.getBrain(); // CraftBukkit - decompile error
@@ -339,6 +351,8 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         // Purpur start
         if (this.level.purpurConfig.villagerLobotomizeEnabled) {
             // treat as inactive if lobotomized
+            if (!this.level.andromedaLevelConfiguration().entity.villager.lobotomizeTweaks.alternativeLobotomizeCheck.enabled
+                    || this.level.getGameTime() % this.level.andromedaLevelConfiguration().entity.villager.lobotomizeTweaks.alternativeLobotomizeCheck.frequency != 0)
             inactive = inactive || checkLobotomized();
         } else {
             // clean up state for API
diff --git a/src/main/java/team/earendel/andromeda/configurations/LevelConfigurations.java b/src/main/java/team/earendel/andromeda/configurations/LevelConfigurations.java
index 5aeb71872a05c423f1bdf2c37d5f53ea075bd5a9..5acbba52235f2ae9ab190087633642f42e5800f6 100644
--- a/src/main/java/team/earendel/andromeda/configurations/LevelConfigurations.java
+++ b/src/main/java/team/earendel/andromeda/configurations/LevelConfigurations.java
@@ -105,6 +105,27 @@ public class LevelConfigurations extends ConfigurationPart {
 
         }
 
+        public Villager villager;
+        public class Villager extends ConfigurationPart {
+
+            public LobotomizeTweaks lobotomizeTweaks;
+            public class LobotomizeTweaks extends ConfigurationPart {
+
+                public boolean lobotomizeEvenOnBed = true;
+                public boolean lobotomizeJobless = false;
+
+                public AlternativeLobotomizeCheck alternativeLobotomizeCheck;
+                public class AlternativeLobotomizeCheck extends ConfigurationPart {
+
+                    public boolean enabled = false;
+                    public int frequency = 3;
+
+                }
+
+            }
+
+        }
+
     }
 
     public Structure structure;
