From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@gmail.com>
Date: Sat, 21 Jan 2023 20:14:38 +0900
Subject: [PATCH] Port PaperMC/Paper#8799


diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java
index a9edfe505667a5b543040b7d8739373a5847f2fe..63b78e153a074fddcca58af2053c35a4cddb0e40 100644
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java
+++ b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java
@@ -223,7 +223,30 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
         bitStorageWriter.setBuffer(chunkPacketInfoAntiXray.getBuffer());
         int numberOfBlocks = presetBlockStateBits.length;
         // Keep the lambda expressions as simple as possible. They are used very frequently.
-        IntSupplier random = numberOfBlocks == 1 ? (() -> 0) : new IntSupplier() {
+        // Andromeda start - Port PaperMC/Paper#8799
+        LayeredIntSupplier random = numberOfBlocks == 1 ? (() -> 0) : engineMode == EngineMode.OBFUSCATE_LAYER ? new LayeredIntSupplier() {
+            // engine-mode: 3
+            private int state;
+            private int next;
+
+            {
+                while ((state = ThreadLocalRandom.current().nextInt()) == 0);
+            }
+
+            @Override
+            public void nextLayer() {
+                state ^= state << 13;
+                state ^= state >>> 17;
+                state ^= state << 5;
+                next = (int) ((Integer.toUnsignedLong(state) * numberOfBlocks) >>> 32);
+            }
+
+            @Override
+            public int getAsInt() {
+                return next;
+            }
+        } : new LayeredIntSupplier() {
+        // Andromeda end
             private int state;
 
             {
@@ -304,6 +327,7 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
                     current = next;
                     next = nextNext;
                     nextNext = temp;
+                    random.nextLayer(); // Andromeda - Port PaperMC/Paper#8799
                     obfuscateLayer(y, bitStorageReader, bitStorageWriter, solidTemp, obfuscateTemp, presetBlockStateBitsTemp, current, next, nextNext, nearbyChunkSections, random);
                 }
 
@@ -329,6 +353,7 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
                         // There is nothing to read anymore
                         bitStorageReader.setBits(0);
                         solid[0] = true;
+                        random.nextLayer(); // Andromeda - Port PaperMC/Paper#8799
                         obfuscateLayer(15, bitStorageReader, bitStorageWriter, solid, obfuscateTemp, presetBlockStateBitsTemp, current, next, nextNext, nearbyChunkSections, random);
                     }
                 } else {
@@ -341,6 +366,7 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
                     current = next;
                     next = nextNext;
                     nextNext = temp;
+                    random.nextLayer(); // Andromeda - Port PaperMC/Paper#8799
                     obfuscateLayer(15, bitStorageReader, bitStorageWriter, solidTemp, obfuscateTemp, presetBlockStateBitsTemp, current, next, nextNext, nearbyChunkSections, random);
                 }
 
@@ -633,4 +659,12 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
             ((ServerLevel) level).getChunkSource().blockChanged(blockPos);
         }
     }
+
+    // Andromeda start - Port PaperMC/Paper#8799
+    @FunctionalInterface
+    public interface LayeredIntSupplier extends IntSupplier {
+        default void nextLayer() {
+        }
+    }
+    // Andromeda end
 }
diff --git a/src/main/java/io/papermc/paper/configuration/type/EngineMode.java b/src/main/java/io/papermc/paper/configuration/type/EngineMode.java
index 99e90636051fa0c770ee2eafb7f0d29c8195f9ae..5d6657939595220a4cf6f1bf3ccfca3619b5bce1 100644
--- a/src/main/java/io/papermc/paper/configuration/type/EngineMode.java
+++ b/src/main/java/io/papermc/paper/configuration/type/EngineMode.java
@@ -5,7 +5,7 @@ import org.spongepowered.configurate.serialize.ScalarSerializer;
 
 public enum EngineMode {
 
-    HIDE(1, "hide ores"), OBFUSCATE(2, "obfuscate");
+    HIDE(1, "hide ores"), OBFUSCATE(2, "obfuscate"), OBFUSCATE_LAYER(3, "obfuscate_layer");
 
     public static final ScalarSerializer<EngineMode> SERIALIZER = new EngineModeSerializer();
 
