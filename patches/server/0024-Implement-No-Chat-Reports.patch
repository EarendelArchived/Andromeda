From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Fri, 6 Jan 2023 15:16:10 +0900
Subject: [PATCH] Implement No Chat Reports


diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPacket.java
index d1d2fc0c57523c1abf1e8bfec913c78927c3dafc..a19e2902778106d4cfa163e24dae63d622b5d412 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatPacket.java
@@ -25,4 +25,12 @@ public record ServerboundChatPacket(String message, Instant timeStamp, long salt
     public void handle(ServerGamePacketListener listener) {
         listener.handleChat(this);
     }
+
+    // Andromeda start
+    @Nullable
+    public MessageSignature signature() {
+        if (team.earendel.andromeda.configurations.AndromedaConfiguration.enableNoChatReports) return null;
+        return this.signature;
+    }
+    // Andromeda end
 }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java
index 9d6db4a378036559efab91c8b7dcf2a6b0c2cce6..bedfd2870cf474934c160e99f57a16be22c4adb5 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundChatSessionUpdatePacket.java
@@ -16,6 +16,16 @@ public record ServerboundChatSessionUpdatePacket(RemoteChatSession.Data chatSess
 
     @Override
     public void handle(ServerGamePacketListener listener) {
+        // Andromeda start
+        if (team.earendel.andromeda.configurations.AndromedaConfiguration.enableNoChatReports) {
+            var impl = (net.minecraft.server.network.ServerGamePacketListenerImpl) listener;
+            if (!impl.getPlayer().getServer().isSingleplayerOwner(impl.getPlayer().getGameProfile())) {
+                if (team.earendel.andromeda.configurations.AndromedaConfiguration.NCRDemandOnClient) {
+                    impl.disconnect(net.minecraft.network.chat.Component.literal(team.earendel.andromeda.configurations.AndromedaConfiguration.NCRDemandOnClientMessage), org.bukkit.event.player.PlayerKickEvent.Cause.CHAT_VALIDATION_FAILED);
+                }
+            }
+        }
+        // Andromeda end
         listener.handleChatSessionUpdate(this);
     }
 }
diff --git a/src/main/java/net/minecraft/network/protocol/status/ServerStatus.java b/src/main/java/net/minecraft/network/protocol/status/ServerStatus.java
index 6e0a3086da142f1c42007a16bbec7edbab17da04..96448f1d5f799c076251ac82ecd920ec386484f8 100644
--- a/src/main/java/net/minecraft/network/protocol/status/ServerStatus.java
+++ b/src/main/java/net/minecraft/network/protocol/status/ServerStatus.java
@@ -69,6 +69,7 @@ public class ServerStatus {
     }
 
     public boolean enforcesSecureChat() {
+        if (team.earendel.andromeda.configurations.AndromedaConfiguration.enableNoChatReports && team.earendel.andromeda.configurations.AndromedaConfiguration.NCRConvertToGameMessage) return true;
         return this.enforcesSecureChat;
     }
 
@@ -196,6 +197,11 @@ public class ServerStatus {
                 jsonObject.addProperty("favicon", serverStatus.getFavicon());
             }
 
+            // Andromeda start
+            if (team.earendel.andromeda.configurations.AndromedaConfiguration.enableNoChatReports && team.earendel.andromeda.configurations.AndromedaConfiguration.NCRAddQueryData)
+                jsonObject.addProperty("preventsChatReports", true);
+            // Andromeda end
+
             return jsonObject;
         }
     }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 500cbe5e1ccd7b7159a691166c89d35a6bcbd134..e84fdbec157e6242159410462d8a63f8db0e88ed 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -681,6 +681,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
 
     @Override
     public boolean enforceSecureProfile() {
+        if (team.earendel.andromeda.configurations.AndromedaConfiguration.enableNoChatReports) return false; // Andromeda - Implement No Chat Reports
         return this.getProperties().enforceSecureProfile && this.getProperties().onlineMode;
     }
 
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 6b1acc83de926948620769759bbe023673e70b11..ff40082f6ac3f08aa5bf8ef34bb963a2d2dae1f8 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2231,10 +2231,36 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
     @Override
     public void send(Packet<?> packet) {
+        // Andromeda start
+        if (team.earendel.andromeda.configurations.AndromedaConfiguration.enableNoChatReports && packet instanceof ClientboundPlayerChatPacket chat) {
+            if (team.earendel.andromeda.configurations.AndromedaConfiguration.NCRDebug)
+                LOGGER.info("Sending message: {}", chat.unsignedContent() != null ? chat.unsignedContent() : chat.body().content());
+
+            if (team.earendel.andromeda.configurations.AndromedaConfiguration.NCRConvertToGameMessage) {
+                packet = new ClientboundSystemChatPacket(
+                        chat.chatType().resolve(this.player.level.registryAccess())
+                                .get().decorate(chat.unsignedContent() != null ? chat.unsignedContent() : Component.literal(chat.body().content())), false);
+                this.send(packet, null);
+                return;
+            }
+        }
+        // Andromeda end
         this.send(packet, (PacketSendListener) null);
     }
 
     public void send(Packet<?> packet, @Nullable PacketSendListener callbacks) {
+        // Andromeda start
+        if (packet instanceof ClientboundPlayerChatPacket chat) {
+            if (team.earendel.andromeda.configurations.AndromedaConfiguration.NCRDebug)
+                LOGGER.info("Sending message: {}", chat.unsignedContent() != null ? chat.unsignedContent() : chat.body().content());
+
+            if (team.earendel.andromeda.configurations.AndromedaConfiguration.NCRConvertToGameMessage) {
+                this.send(chat);
+                return;
+            }
+        }
+        // Andromeda end
+
         // CraftBukkit start
         if (packet == null || this.processedDisconnect) { // Spigot
             return;
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index f32b490a387dd343fe036979a1321690e6c0a838..0008e6ba936f3229a4f40d372c3031ad4afb09d1 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -1433,6 +1433,7 @@ public abstract class PlayerList {
     }
 
     public boolean verifyChatTrusted(PlayerChatMessage message) { // Paper - private -> public
+        if (team.earendel.andromeda.configurations.AndromedaConfiguration.enableNoChatReports) return true; // Andromeda - Implement No Chat Reports
         return message.hasSignature() && !message.hasExpiredServer(Instant.now());
     }
 
diff --git a/src/main/java/team/earendel/andromeda/configurations/AndromedaConfiguration.java b/src/main/java/team/earendel/andromeda/configurations/AndromedaConfiguration.java
index 42edeb98ae832739a83c9083f5b27659a05a7c9b..65b4ea38f254580c38a79349548573ce3322de12 100644
--- a/src/main/java/team/earendel/andromeda/configurations/AndromedaConfiguration.java
+++ b/src/main/java/team/earendel/andromeda/configurations/AndromedaConfiguration.java
@@ -188,4 +188,19 @@ public class AndromedaConfiguration {
     private static void attributeSettings() {
         armorAttributeLimit = (float) getDouble("options.attributes.armor-limit", armorAttributeLimit);
     }
+
+    public static boolean enableNoChatReports = false;
+    public static boolean NCRConvertToGameMessage = false;
+    public static boolean NCRAddQueryData = true;
+    public static boolean NCRDemandOnClient = false;
+    public static String NCRDemandOnClientMessage = "You do not have No Chat Reports, and this server is configured to require it on client!";
+    public static boolean NCRDebug = false;
+    private static void noChatReports() {
+        enableNoChatReports = getBoolean("options.ports.no-chat-reports.enabled", enableNoChatReports);
+        NCRDebug = getBoolean("options.ports.no-chat-reports.debug", NCRDebug);
+        NCRConvertToGameMessage = getBoolean("options.ports.no-chat-reports.convert-to-game-message", NCRConvertToGameMessage);
+        NCRAddQueryData = getBoolean("options.ports.no-chat-reports.add-query-data", NCRAddQueryData);
+        NCRDemandOnClient = getBoolean("options.ports.no-chat-reports.demand-on-client", NCRDemandOnClient);
+        NCRDemandOnClientMessage = getString("options.ports.no-chat-reports.demand-on-client-message", NCRDemandOnClientMessage);
+    }
 }
