From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Thu, 22 Dec 2022 20:05:01 +0900
Subject: [PATCH] Andromeda Configurations


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 46858fb57f122033a68aeb4ad3943132a677fb46..554e092c39c6ac2a6b7ee7ecb5552b46d5486f69 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -227,6 +227,15 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         org.purpurmc.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        // Andromeda start
+        try {
+            team.earendel.andromeda.configurations.AndromedaConfiguration.init((java.io.File) options.valueOf("andromeda-configuration"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load Andromeda configurations", e);
+            return false;
+        }
+        team.earendel.andromeda.configurations.AndromedaConfiguration.registerCommands();
+        // Andromeda end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 2e5f1a231213340bc0084ba8d3478dce9bde3606..da85386de1f3530e3e55193b2fe634ff8c7ce0d3 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -174,6 +174,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public final org.purpurmc.purpur.PurpurWorldConfig purpurConfig; // Purpur
+    public final team.earendel.andromeda.configurations.AndromedaWorldConfiguration andromedaWorldConfiguration; // Andromeda
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
@@ -330,6 +331,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper
         this.purpurConfig = new org.purpurmc.purpur.PurpurWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
+        this.andromedaWorldConfiguration = new team.earendel.andromeda.configurations.AndromedaWorldConfiguration(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Andromeda
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 88fbaf7011d322cec621b7fa66c432e26c586d34..42e4ccbeabb4295f5583c3458734f1d04ca7f535 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1026,6 +1026,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        team.earendel.andromeda.configurations.AndromedaConfiguration.init((File) console.options.valueOf("andromeda-configuration")); // Andromeda
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -1042,6 +1043,7 @@ public final class CraftServer implements Server {
             }
             world.spigotConfig.init(); // Spigot
             world.purpurConfig.init(); // Purpur
+            world.andromedaWorldConfiguration.init(); // Andromeda
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -1058,6 +1060,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
         org.purpurmc.purpur.PurpurConfig.registerCommands(); // Purpur
+        team.earendel.andromeda.configurations.AndromedaConfiguration.registerCommands(); // Andromeda
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2879,6 +2882,13 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Andromeda start
+        @Override
+        public YamlConfiguration getAndromedaConfiguration() {
+            return team.earendel.andromeda.configurations.AndromedaConfiguration.configuration;
+        }
+        // Andromeda end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 576cd8e20982bb20d10213b6c7a229428eec1c2f..ae10c948bbb00bd2b47dfe5beb5ad7b340181561 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -180,6 +180,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Purpur end
 
+                // Andromeda start
+                acceptsAll(asList("andromeda", "andromeda-configuration"), "File for Andromeda configurations")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("andromeda.yml"))
+                        .describedAs("Yml file");
+                // Andromeda end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/team/earendel/andromeda/commands/AndromedaCommand.java b/src/main/java/team/earendel/andromeda/commands/AndromedaCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..d1bb4a054dae700de21293da4c406e29da30c885
--- /dev/null
+++ b/src/main/java/team/earendel/andromeda/commands/AndromedaCommand.java
@@ -0,0 +1,66 @@
+package team.earendel.andromeda.commands;
+
+import net.kyori.adventure.text.Component;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import team.earendel.andromeda.configurations.AndromedaConfiguration;
+import team.earendel.andromeda.constants.AdventureTextColor;
+
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class AndromedaCommand extends Command {
+    public AndromedaCommand(String name) {
+        super(name);
+        this.description = "Andromeda related commands";
+        this.usageMessage = "/andromeda [reload | version]";
+        this.setPermission("bukkit.command.andromeda");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version")
+                    .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                    .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(Component.text("Usage: " + usageMessage).color(AdventureTextColor.RED));
+            return false;
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            Command.broadcastCommandMessage(sender, Component.text("Please note that this command is not supported and may cause issues.").color(AdventureTextColor.RED));
+            Command.broadcastCommandMessage(sender, Component.text("If you encounter any issues please use the /stop command to restart your server.").color(AdventureTextColor.RED));
+
+            MinecraftServer console = MinecraftServer.getServer();
+            AndromedaConfiguration.init((File) console.options.valueOf("andromeda-configuration"));
+            for (ServerLevel level : console.getAllLevels()) {
+                level.andromedaWorldConfiguration.init();
+            }
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, Component.text("Successfully reloaded Andromeda configuration.").color(AdventureTextColor.GREEN));
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) {
+                return verCmd.execute(sender, commandLabel, new String[0]);
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/team/earendel/andromeda/configurations/AndromedaConfiguration.java b/src/main/java/team/earendel/andromeda/configurations/AndromedaConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..54a533aaaad0c515156e4da8d5fd4bc627742796
--- /dev/null
+++ b/src/main/java/team/earendel/andromeda/configurations/AndromedaConfiguration.java
@@ -0,0 +1,158 @@
+package team.earendel.andromeda.configurations;
+
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.level.block.Blocks;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import team.earendel.andromeda.commands.AndromedaCommand;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+@SuppressWarnings("unused")
+public class AndromedaConfiguration {
+    private static final String HEADER = """
+            This is the main configuration file for Andromeda.
+            Some options may impact gameplay, so use with caution,
+            and make sure you know what each option does before configuring.
+            """;
+    private static File CONFIG_FILE;
+    public static YamlConfiguration configuration;
+
+    private static Map<String, Command> commands;
+
+    public static int version;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        configuration = new YamlConfiguration();
+        try {
+            configuration.load(CONFIG_FILE);
+        } catch (IOException ignore) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load andromeda.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        configuration.options().header(HEADER);
+        configuration.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        commands = new HashMap<>();
+        commands.put("andromeda", new AndromedaCommand("andromeda"));
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+
+        readConfig(AndromedaConfiguration.class, null);
+
+        Blocks.rebuildCache();
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Andromeda", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            configuration.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        configuration.addDefault(path, val);
+        configuration.set(path, val);
+    }
+
+    private static String getString(String path, String def) {
+        configuration.addDefault(path, def);
+        return configuration.getString(path, configuration.getString(path));
+    }
+
+    private static int getInt(String path, int def) {
+        configuration.addDefault(path, def);
+        return configuration.getInt(path, configuration.getInt(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        configuration.addDefault(path, def);
+        return configuration.getBoolean(path, configuration.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        configuration.addDefault(path, def);
+        return configuration.getDouble(path, configuration.getDouble(path));
+    }
+
+    private static long getLong(String path, long def) {
+        configuration.addDefault(path, def);
+        return configuration.getLong(path, configuration.getLong(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        configuration.addDefault(path, def);
+        return configuration.getList(path, configuration.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def) {
+        if (def != null && configuration.getConfigurationSection(path) == null) {
+            configuration.addDefault(path, def);
+            return def;
+        }
+        return toMap(configuration.getConfigurationSection(path));
+    }
+
+    private static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        if (section != null) {
+            for (String key : section.getKeys(false)) {
+                Object obj = section.get(key);
+                if (obj != null) {
+                    builder.put(key, obj instanceof ConfigurationSection val ? toMap(val) : obj);
+                }
+            }
+        }
+        return builder.build();
+    }
+}
diff --git a/src/main/java/team/earendel/andromeda/configurations/AndromedaWorldConfiguration.java b/src/main/java/team/earendel/andromeda/configurations/AndromedaWorldConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..f08d6191938ed88c3158554f6a2e1333e93e18d8
--- /dev/null
+++ b/src/main/java/team/earendel/andromeda/configurations/AndromedaWorldConfiguration.java
@@ -0,0 +1,75 @@
+package team.earendel.andromeda.configurations;
+
+import org.bukkit.World;
+import org.bukkit.configuration.ConfigurationSection;
+import java.util.List;
+import java.util.Map;
+import static team.earendel.andromeda.configurations.AndromedaConfiguration.log;
+
+@SuppressWarnings("unused")
+public class AndromedaWorldConfiguration {
+
+    private final String worldName;
+    private final World.Environment environment;
+
+    public AndromedaWorldConfiguration(String worldName, World.Environment environment) {
+        this.worldName = worldName;
+        this.environment = environment;
+        init();
+    }
+
+    public void init() {
+        log("-------- World Configurations For [" + worldName + "] --------");
+        AndromedaConfiguration.readConfig(AndromedaWorldConfiguration.class, this);
+    }
+
+    private void set(String path, Object val) {
+        AndromedaConfiguration.configuration.addDefault("world-configurations.default." + path, val);
+        AndromedaConfiguration.configuration.set("world-configurations.default." + path, val);
+        if (AndromedaConfiguration.configuration.get("world-configurations." + worldName + "." + path) != null) {
+            AndromedaConfiguration.configuration.addDefault("world-configurations." + worldName + "." + path, val);
+            AndromedaConfiguration.configuration.set("world-configurations." + worldName + "." + path, val);
+        }
+    }
+
+    private ConfigurationSection getConfigurationSection(String path) {
+        ConfigurationSection section = AndromedaConfiguration.configuration.getConfigurationSection("world-configurations." + worldName + "." + path);
+        return section != null ? section : AndromedaConfiguration.configuration.getConfigurationSection("world-configurations.default." + path);
+    }
+
+    private String getString(String path, String def) {
+        AndromedaConfiguration.configuration.addDefault("world-configurations.default." + path, def);
+        return AndromedaConfiguration.configuration.getString("world-configurations." + worldName + "." + path, AndromedaConfiguration.configuration.getString("world-configurations.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        AndromedaConfiguration.configuration.addDefault("world-configurations.default." + path, def);
+        return AndromedaConfiguration.configuration.getInt("world-configurations." + worldName + "." + path, AndromedaConfiguration.configuration.getInt("world-configurations.default." + path));
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        AndromedaConfiguration.configuration.addDefault("world-configurations.default." + path, def);
+        return AndromedaConfiguration.configuration.getBoolean("world-configurations." + worldName + "." + path, AndromedaConfiguration.configuration.getBoolean("world-configurations.default." + path));
+    }
+
+    private double getDouble(String path, double def) {
+        AndromedaConfiguration.configuration.addDefault("world-configurations.default." + path, def);
+        return AndromedaConfiguration.configuration.getDouble("world-configurations." + worldName + "." + path, AndromedaConfiguration.configuration.getDouble("world-configurations.default." + path));
+    }
+
+    private double getLong(String path, long def) {
+        AndromedaConfiguration.configuration.addDefault("world-configurations.default." + path, def);
+        return AndromedaConfiguration.configuration.getLong("world-configurations." + worldName + "." + path, AndromedaConfiguration.configuration.getLong("world-configurations.default." + path));
+    }
+
+    private <T> List<?> getList(String path, T def) {
+        AndromedaConfiguration.configuration.addDefault("world-configurations.default." + path, def);
+        return AndromedaConfiguration.configuration.getList("world-configurations." + worldName + "." + path, AndromedaConfiguration.configuration.getList("world-configurations.default." + path));
+    }
+
+    private Map<String, Object> getMap(String path, Map<String, Object> def) {
+        final Map<String, Object> fallback = AndromedaConfiguration.getMap("world-configurations.default." + path, def);
+        final Map<String, Object> value = AndromedaConfiguration.getMap("world-configurations." + worldName + "." + path, null);
+        return value.isEmpty() ? fallback : value;
+    }
+}
diff --git a/src/main/java/team/earendel/andromeda/constants/AdventureTextColor.java b/src/main/java/team/earendel/andromeda/constants/AdventureTextColor.java
new file mode 100644
index 0000000000000000000000000000000000000000..4d2d9a8ad4e46f5a5c09a43f6e0a024c6c9fdb89
--- /dev/null
+++ b/src/main/java/team/earendel/andromeda/constants/AdventureTextColor.java
@@ -0,0 +1,22 @@
+package team.earendel.andromeda.constants;
+
+import net.kyori.adventure.text.format.TextColor;
+
+public final class AdventureTextColor {
+    public static final TextColor BLACK = TextColor.color(0x000000);
+    public static final TextColor DARK_BLUE = TextColor.color(0x0000AA);
+    public static final TextColor DARK_GREEN = TextColor.color(0x00AA00);
+    public static final TextColor DARK_AQUA = TextColor.color(0x00AAAA);
+    public static final TextColor DARK_RED = TextColor.color(0xAA0000);
+    public static final TextColor DARK_PURPLE = TextColor.color(0xAA00AA);
+    public static final TextColor GOLD = TextColor.color(0xFFAA00);
+    public static final TextColor GRAY = TextColor.color(0xAAAAAA);
+    public static final TextColor DARK_GRAY = TextColor.color(0x555555);
+    public static final TextColor BLUE = TextColor.color(0x5555FF);
+    public static final TextColor GREEN = TextColor.color(0x55FF55);
+    public static final TextColor AQUA = TextColor.color(0x55FFFF);
+    public static final TextColor RED = TextColor.color(0xFF5555);
+    public static final TextColor LIGHT_PURPLE = TextColor.color(0xFF55FF);
+    public static final TextColor YELLOW = TextColor.color(0xFFFF55);
+    public static final TextColor WHITE = TextColor.color(0xFFFFFF);
+}
