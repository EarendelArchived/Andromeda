From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sun, 25 Dec 2022 22:37:03 +0900
Subject: [PATCH] Akarin Tweaks

SHA: 5b03eb1aa436438f7fd1a7f880e310642df9743f

Original: Akarin Project
Copyright (C) 2023 Akarin Project

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

[PORTED PATCHES]
0007 - Avoid double I/O operation on load player file
0008 - Don't trigger Lootable Refresh for non player interaction
0011 - Swaps the predicate order of collision

diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 1ae7ef3d94d4d3d8413a5419eeb9fadad89d2f8d..241bd6cb5f5f37e66a11a4be5c71240eb0f1c72d 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -1986,8 +1986,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public void playerTouch(Player player) {}
 
     public void push(Entity entity) {
+        if (entity.noPhysics && this.noPhysics) return; // Andromeda - Akarin tweaks
         if (!this.isPassengerOfSameVehicle(entity)) {
-            if (!entity.noPhysics && !this.noPhysics) {
+            //if (!entity.noPhysics && !this.noPhysics) { // Andromeda - Akarin tweaks
                 if (this.level.paperConfig().collisions.onlyPlayersCollide && !(entity instanceof ServerPlayer || this instanceof ServerPlayer)) return; // Paper
                 double d0 = entity.getX() - this.getX();
                 double d1 = entity.getZ() - this.getZ();
@@ -2015,8 +2016,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                         entity.push(d0, 0.0D, d1);
                     }
                 }
-
-            }
+            //} // Andromeda - Akarin tweaks
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
index 13e749a3c40f0b2cc002f13675a9a56eedbefdac..86a04821f326f026337d70d02c90a1fdb67677a3 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
@@ -69,6 +69,7 @@ public abstract class RandomizableContainerBlockEntity extends BaseContainerBloc
     }
 
     public void unpackLootTable(@Nullable Player player) {
+        if (player == null) return; // Andromeda - Akarin tweaks (Don't trigger LootTable refresh for non player interaction)
         if (this.lootableData.shouldReplenish(player) && this.level.getServer() != null) { // Paper
             LootTable lootTable = this.level.getServer().getLootTables().get(this.lootTable);
             if (player instanceof ServerPlayer) {
diff --git a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
index 601f8099f74e81c17600566b3c9b7a6dd39c9bcb..0aeb372e883ad2bc70683936db5c77deac0dc38d 100644
--- a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -56,8 +56,8 @@ public class PlayerDataStorage {
             File file = new File(this.playerDir, player.getStringUUID() + ".dat");
             // Spigot Start
             boolean usingWrongFile = false;
-            if ( org.bukkit.Bukkit.getOnlineMode() && !file.exists() ) // Paper - Check online mode first
-            {
+            boolean normalFile = file.exists() && file.isFile(); // Andromeda - Akarin Tweaks
+            if (org.bukkit.Bukkit.getOnlineMode() && !normalFile) { // Paper - Check online mode first // Andromeda - Akarin Tweaks (Ensures normal file)
                 file = new File( this.playerDir, java.util.UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + player.getScoreboardName() ).getBytes( "UTF-8" ) ).toString() + ".dat");
                 if ( file.exists() )
                 {
@@ -67,7 +67,7 @@ public class PlayerDataStorage {
             }
             // Spigot End
 
-            if (file.exists() && file.isFile()) {
+            if (normalFile) { // Andromeda - Akarin Tweaks (Avoid double I/O operation)
                 nbttagcompound = NbtIo.readCompressed(file);
             }
             // Spigot Start
