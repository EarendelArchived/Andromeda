From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sun, 8 Jan 2023 11:56:31 +0900
Subject: [PATCH] Port PaperMC/Paper#8425


diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
index 355c9f79fd3132848a00eacde951d1e1bfa92737..7976319d685b7a358d75fc8e544b9ef62dfd6894 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
@@ -93,6 +93,15 @@ public final class CraftPersistentDataTypeRegistry {
     }
 
     private final Map<Class, TagAdapter> adapters = new HashMap<>();
+    // Andromeda start - Port PaperMC/Paper#8425
+    private TagAdapter getAdapter(Class type) {
+        TagAdapter adapter = this.adapters.get(type);
+        if (adapter != null) return adapter;
+        synchronized (this.adapters) {
+            return this.adapters.computeIfAbsent(type, CREATE_ADAPTER);
+        }
+    }
+    // Andromeda end
 
     /**
      * Creates a suitable adapter instance for the primitive class type
@@ -212,7 +221,7 @@ public final class CraftPersistentDataTypeRegistry {
      * type was found
      */
     public <T> Tag wrap(Class<T> type, T value) {
-        return this.adapters.computeIfAbsent(type, CREATE_ADAPTER).build(value);
+        return getAdapter(type).build(value); // Andromeda - Port PaperMC/Paper#8425
     }
 
     /**
@@ -228,7 +237,7 @@ public final class CraftPersistentDataTypeRegistry {
      * type was found
      */
     public <T> boolean isInstanceOf(Class<T> type, Tag base) {
-        return this.adapters.computeIfAbsent(type, CREATE_ADAPTER).isInstance(base);
+        return getAdapter(type).isInstance(base); // Andromeda - Port PaperMC/Paper#8425
     }
 
     /**
@@ -249,7 +258,7 @@ public final class CraftPersistentDataTypeRegistry {
      * type was found
      */
     public <T> T extract(Class<T> type, Tag tag) throws ClassCastException, IllegalArgumentException {
-        TagAdapter adapter = this.adapters.computeIfAbsent(type, CREATE_ADAPTER);
+        TagAdapter adapter = getAdapter(type); // Andromeda - Port PaperMC/Paper#8425
         if (!adapter.isInstance(tag)) {
             throw new IllegalArgumentException(String.format("`The found tag instance cannot store %s as it is a %s", type.getSimpleName(), tag.getClass().getSimpleName()));
         }
