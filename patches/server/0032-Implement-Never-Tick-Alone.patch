From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Sat, 7 Jan 2023 00:12:38 +0900
Subject: [PATCH] Implement Never Tick Alone

Original: Thor12022
Copyright (C) 2023 Thor12022

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 9e9b253423ccc8a302975a631f27a35549dd7fe8..d85cd2019904c6cc419d708ea4eba8188dcf64f7 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1122,6 +1122,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 throw new IllegalStateException("Failed to initialize server");
             }
 
+            // Andromeda start
+            boolean flag1 = team.earendel.andromeda.configurations.GlobalConfiguration.get().neverTickAlone.enabled && this.getPlayerCount() == 0;
+            boolean flag2 = team.earendel.andromeda.configurations.GlobalConfiguration.get().neverTickAlone.unsupportedSettings.doNotTick;
+            if (flag1 || flag2) {
+                this.nextTickTime = this.getNextTickTime() + 333L;
+            }
+            else
+            // Andromeda end
             this.nextTickTime = Util.getMillis();
             this.status.setDescription(Component.literal(this.motd));
             this.status.setVersion(new ServerStatus.Version(SharedConstants.getCurrentVersion().getName(), SharedConstants.getCurrentVersion().getProtocolVersion()));
@@ -1202,13 +1210,19 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 this.tickServer(this::haveTime);
                 //this.profiler.popPush("nextTickWait"); // Purpur
                 this.mayHaveDelayedTasks = true;
-                    // Purpur start - tps catchup
+                // Andromeda start
+                // Purpur start - tps catchup
+                if (flag1 || flag2)
+                    this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + 333L, this.nextTickTime);
+                else {
                     if (org.purpurmc.purpur.PurpurConfig.tpsCatchup) {
                         this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + 50L, this.nextTickTime);
                     } else {
                         this.delayedTasksMaxNextTickTime = this.nextTickTime = curTime / 1000000L + 50L;
                     }
-                    // Purpur end - tps catchup
+                }
+                // Purpur end - tps catchup
+                // Andromeda end
                 this.waitUntilNextTick();
                 //this.profiler.pop(); // Purpur
                 //this.endMetricsRecordingTick(); // Purpur
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 7d07cd021525ede9768ad416a283563e5547c16f..2339f705f1990fe6a45fccb53a42e22f058ed56c 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -646,6 +646,12 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
 
     public void tick(BooleanSupplier shouldKeepTicking) {
+        // Andromeda start
+        if ((team.earendel.andromeda.configurations.GlobalConfiguration.get().neverTickAlone.enabled && this.getServer().getPlayerCount() == 0)
+                || team.earendel.andromeda.configurations.GlobalConfiguration.get().neverTickAlone.unsupportedSettings.doNotTick
+                || (this.andromedaLevelConfiguration().neverTickAlone.enabled && this.players.isEmpty())
+                || this.andromedaLevelConfiguration().neverTickAlone.unsupportedSettings.doNotTick) return;
+        // Andromeda end
         // Paper start - optimise checkDespawn
         this.playersAffectingSpawning.clear();
         for (ServerPlayer player : this.players) {
diff --git a/src/main/java/team/earendel/andromeda/configurations/GlobalConfiguration.java b/src/main/java/team/earendel/andromeda/configurations/GlobalConfiguration.java
index 7c0e76c199bc577fd55f5c33f6cd28e11028abde..d488d370f8afa8076b0363b91b84c4e9a69b0a1e 100644
--- a/src/main/java/team/earendel/andromeda/configurations/GlobalConfiguration.java
+++ b/src/main/java/team/earendel/andromeda/configurations/GlobalConfiguration.java
@@ -107,4 +107,18 @@ public class GlobalConfiguration extends ConfigurationPart {
 
     }
 
+    public NeverTickAlone neverTickAlone;
+    public class NeverTickAlone extends ConfigurationPart {
+
+        public boolean enabled = false;
+
+        public UnsupportedSettings unsupportedSettings;
+        public class UnsupportedSettings extends ConfigurationPart {
+
+            public boolean doNotTick = false;
+
+        }
+
+    }
+
 }
diff --git a/src/main/java/team/earendel/andromeda/configurations/LevelConfigurations.java b/src/main/java/team/earendel/andromeda/configurations/LevelConfigurations.java
index 3b234ea84d27dc1fc5421c3cf7d95c6605ba2e59..3b11421c0ffdb79b158b3589fbefae1ed4ee1083 100644
--- a/src/main/java/team/earendel/andromeda/configurations/LevelConfigurations.java
+++ b/src/main/java/team/earendel/andromeda/configurations/LevelConfigurations.java
@@ -122,4 +122,16 @@ public class LevelConfigurations extends ConfigurationPart {
 
     }
 
+    public NeverTickAlone neverTickAlone;
+    public class NeverTickAlone extends ConfigurationPart {
+
+        public boolean enabled = false;
+
+        public UnsupportedSettings unsupportedSettings;
+        public class UnsupportedSettings extends ConfigurationPart {
+            public boolean doNotTick = false;
+        }
+
+    }
+
 }
