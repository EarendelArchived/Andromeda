From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: AlphaKR93 <alphakr93@outlook.com>
Date: Fri, 6 Jan 2023 18:14:30 +0900
Subject: [PATCH] Faster Random

Original: Xyene (https://gist.github.com/Xyene/4637619)
Copyright (C) 2023 Xyene

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

diff --git a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
index e5ea9f27a1936ed9e329e74317c91c5df89b9fbd..0d52b0d3cb601860d3371713b55c27977ccdc4d4 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
@@ -13,7 +13,7 @@ import java.util.UUID;
 
 public class PaperLootableInventoryData {
 
-    private static final Random RANDOM = new Random();
+    private static final Random RANDOM = team.earendel.andromeda.configurations.GlobalConfiguration.get().misc.useFasterRandom ? new team.earendel.andromeda.utilities.Random() : new Random(); // Andromeda
 
     private long lastFill = -1;
     private long nextRefill = -1;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index de0eb5a673b873e402cb4290f0c67a8f18660860..9e9b253423ccc8a302975a631f27a35549dd7fe8 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -691,7 +691,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             ChunkPos chunkcoordintpair = new ChunkPos(chunkproviderserver.randomState().sampler().findSpawnPosition());
             // CraftBukkit start
             if (world.generator != null) {
-                Random rand = new Random(world.getSeed());
+                Random rand = team.earendel.andromeda.configurations.GlobalConfiguration.get().misc.useFasterRandom ? new team.earendel.andromeda.utilities.Random() : new Random(); // Andromeda
+                rand.setSeed(world.getSeed()); // Andromeda
                 org.bukkit.Location spawn = world.generator.getFixedSpawnLocation(world.getWorld(), rand);
 
                 if (spawn != null) {
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index cd5bc5e82285fe408fe99d51e31874604e658bc9..b15099269c20c655acf58511e350429267d0d719 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -49,7 +49,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
     private static final AtomicInteger UNIQUE_THREAD_ID = new AtomicInteger(0);
     static final Logger LOGGER = LogUtils.getLogger();
     private static final int MAX_TICKS_BEFORE_LOGIN = 600;
-    private static final RandomSource RANDOM = new org.bukkit.craftbukkit.util.RandomSourceWrapper(new java.util.Random()); // Paper - This is called across threads, make safe
+    private static final RandomSource RANDOM = new org.bukkit.craftbukkit.util.RandomSourceWrapper(team.earendel.andromeda.configurations.GlobalConfiguration.get().misc.useFasterRandom ? new team.earendel.andromeda.utilities.Random() : new java.util.Random()); // Paper - This is called across threads, make safe // Andromeda
     private final byte[] challenge;
     final MinecraftServer server;
     public final Connection connection;
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 58210b0fe8d77d0906da46e25863f2a6b20a1919..cf802a69ed84d158af92f6b5c72f4cfd908bad37 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -946,7 +946,7 @@ public class LevelChunk extends ChunkAccess {
             if (this.needsDecoration) {
                 //try (co.aikar.timings.Timing ignored = this.level.timings.chunkLoadPopulate.startTiming()) { // Paper // Purpur
                 this.needsDecoration = false;
-                java.util.Random random = new java.util.Random();
+                java.util.Random random = team.earendel.andromeda.configurations.GlobalConfiguration.get().misc.useFasterRandom ? new team.earendel.andromeda.utilities.Random() : new java.util.Random(); // Andromeda
                 random.setSeed(this.level.getSeed());
                 long xRand = random.nextLong() / 2L * 2L + 1L;
                 long zRand = random.nextLong() / 2L * 2L + 1L;
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
index dcfe090c269d4cbcc2eb1b6f85392848bb34656c..ef797d47c6bbc1c1e3ff6c15c04e1df41f727436 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
@@ -109,7 +109,8 @@ public class RegionFile implements AutoCloseable {
     }
 
     private void backupRegionFile() {
-        Path backup = this.regionFile.getParent().resolve(this.regionFile.getFileName() + "." + new java.util.Random().nextLong() + ".backup");
+        java.util.Random rand = team.earendel.andromeda.configurations.GlobalConfiguration.get().misc.useFasterRandom ? new team.earendel.andromeda.utilities.Random() : new java.util.Random(); // Andromeda
+        Path backup = this.regionFile.getParent().resolve(this.regionFile.getFileName() + "." + rand.nextLong() + ".backup"); // Andromeda
         this.backupRegionFile(backup);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 9b5323edd99848b73ea0e34230e7bec8dc23be8c..1d0a7a79301c1458830d0f9d03b546fbea883cc8 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -226,7 +226,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
     // Paper end
 
-    private static final Random rand = new Random();
+    private static final Random rand = team.earendel.andromeda.configurations.GlobalConfiguration.get().misc.useFasterRandom ? new team.earendel.andromeda.utilities.Random() : new Random(); // Andromeda
 
     public CraftWorld(ServerLevel world, ChunkGenerator gen, BiomeProvider biomeProvider, Environment env) {
         this.world = world;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
index d1c7ab67cba881d96b7a5e9220130d86d0514304..8f47a3ec7440c978cb15a614e48a71694e22791e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
@@ -15,7 +15,7 @@ import org.bukkit.inventory.meta.FireworkMeta;
 
 public class CraftFirework extends CraftProjectile implements Firework {
 
-    private final Random random = new Random();
+    private final Random random = team.earendel.andromeda.configurations.GlobalConfiguration.get().misc.useFasterRandom ? new team.earendel.andromeda.utilities.Random(): new Random(); // Andromeda
     //private CraftItemStack item; // Paper - Remove usage, not accurate representation of current item.
 
     public CraftFirework(CraftServer server, FireworkRocketEntity entity) {
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index a9673a804d597599c35c83f4f245510c83005328..25060824e248b268a06f6fd275c533ecb1014008 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -48,7 +48,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
     private final net.minecraft.world.level.chunk.ChunkGenerator delegate;
     private final ChunkGenerator generator;
     private final ServerLevel world;
-    private final Random random = new Random();
+    private final Random random = team.earendel.andromeda.configurations.GlobalConfiguration.get().misc.useFasterRandom ? new team.earendel.andromeda.utilities.Random() : new Random(); // Andromeda
     private boolean newApi;
     private boolean implementBaseHeight = true;
 
diff --git a/src/main/java/team/earendel/andromeda/configurations/GlobalConfiguration.java b/src/main/java/team/earendel/andromeda/configurations/GlobalConfiguration.java
index b38010344b27b32f7acff9a95b64a34600f99407..e1b0e2ed92b9ef428019774b073c2301128324bd 100644
--- a/src/main/java/team/earendel/andromeda/configurations/GlobalConfiguration.java
+++ b/src/main/java/team/earendel/andromeda/configurations/GlobalConfiguration.java
@@ -119,4 +119,11 @@ public class GlobalConfiguration extends ConfigurationPart {
 
     }
 
+    public Misc misc;
+    public class Misc extends ConfigurationPart {
+
+        public boolean useFasterRandom = true;
+
+    }
+
 }
diff --git a/src/main/java/team/earendel/andromeda/utilities/Random.java b/src/main/java/team/earendel/andromeda/utilities/Random.java
new file mode 100644
index 0000000000000000000000000000000000000000..81d919396e0091ac8afca4ae1e3c38d0cc2dc764
--- /dev/null
+++ b/src/main/java/team/earendel/andromeda/utilities/Random.java
@@ -0,0 +1,394 @@
+package team.earendel.andromeda.utilities;
+
+/**
+ * This is a faster implementation of java.util.Random
+ * Code from https://gist.github.com/Xyene/4637619
+ * Licensed unser GNU LGPL v3.0
+ * <p>
+ * A random number generator based on the simple and fast xor-shift pseudo
+ * random number generator (RNG) specified in:
+ * Marsaglia, George. (2003). Xorshift RNGs.
+ * http://www.jstatsoft.org/v08/i14/xorshift.pdf
+ * Translated from:
+ * http://www.codeproject.com/Articles/9187/A-fast-equivalent-for-System-Random.
+ */
+@SuppressWarnings("SuspiciousNameCombination")
+public class Random extends java.util.Random {
+    final double REAL_UNIT_INT = 1.0 / (0x7FFFFFFFL);
+    final double REAL_UNIT_UINT = 1.0 / (0xFFFFFFFFL);
+    final long Y = 842502087L, Z = 3579807591L, W = 273326509L;
+    long x, y, z, w;
+
+    public Random() {
+        seed((int) System.currentTimeMillis());
+    }
+
+    @Override
+    public void setSeed(long seed) {
+        seed((int) seed);
+    }
+
+    public void seed(int seed) {
+        // The only stipulation stated for the xorshift RNG is that at least one of
+        // the seeds x,y,z,w is non-zero. We fulfill that requirement by only allowing
+        // resetting of the x seed
+        x = seed;
+        y = Y;
+        z = Z;
+        w = W;
+    }
+
+    long boolBuffer;
+    int boolBufferBits = 0;
+
+    @Override
+    public boolean nextBoolean() {
+        if (boolBufferBits == 0) {
+            boolBuffer = nextUInt();
+            boolBufferBits = 32;
+        }
+        boolBuffer >>= 1;
+        boolean bit = (boolBuffer & 1) == 0;
+        --boolBufferBits;
+        return bit;
+    }
+
+    @Override
+    public void nextBytes(byte[] buffer) {
+        // Fill up the bulk of the buffer in chunks of 4 bytes at a time.
+        long x = this.x, y = this.y, z = this.z, w = this.w;
+        int i = 0;
+        long t;
+        for (int bound = buffer.length - 3; i < bound; ) {
+            // Generate 4 bytes.
+            // Increased performance is achieved by generating 4 random bytes per loop.
+            // Also note that no mask needs to be applied to zero out the higher order bytes before
+            // casting because the cast ignores thos bytes. Thanks to Stefan Trosch黷z for pointing this out.
+            t = (x ^ (x << 11));
+            x = y;
+            y = z;
+            z = w;
+            w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
+
+            buffer[i++] = (byte) w;
+            buffer[i++] = (byte) (w >> 8);
+            buffer[i++] = (byte) (w >> 16);
+            buffer[i++] = (byte) (w >> 24);
+        }
+
+        // Fill up any remaining bytes in the buffer.
+        if (i < buffer.length) {
+            // Generate 4 bytes.
+            t = (x ^ (x << 11));
+            x = y;
+            y = z;
+            z = w;
+            w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
+
+            buffer[i++] = (byte) w;
+            if (i < buffer.length) {
+                buffer[i++] = (byte) (w >> 8);
+                if (i < buffer.length) {
+                    buffer[i++] = (byte) (w >> 16);
+                    if (i < buffer.length) {
+                        buffer[i] = (byte) (w >> 24);
+                    }
+                }
+            }
+        }
+        this.x = x;
+        this.y = y;
+        this.z = z;
+        this.w = w;
+    }
+
+    @Override
+    public double nextDouble() {
+        long t = (x ^ (x << 11));
+        x = y;
+        y = z;
+        z = w;
+
+        // Here we can gain a 2x speed improvement by generating a value that can be cast to
+        // an int instead of the more easily available uint. If we then explicitly cast to an
+        // int the compiler will then cast the int to a double to perform the multiplication,
+        // this final cast is a lot faster than casting from a uint to a double. The extra cast
+        // to an int is very fast (the allocated bits remain the same) and so the overall effect
+        // of the extra cast is a significant performance improvement.
+        //
+        // Also note that the loss of one bit of precision is equivalent to what occurs within
+        // System.Random.
+        return (REAL_UNIT_INT * (int) (0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))));
+    }
+
+    public double random() {
+        return nextDouble();
+    }
+
+    @Override
+    public float nextFloat() {
+        return (float) nextDouble();
+    }
+
+    @Override
+    public int nextInt() {
+        long t = (x ^ (x << 11));
+        x = y;
+        y = z;
+        z = w;
+        return (int) (0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))));
+    }
+
+    @Override
+    public int nextInt(int upperBound) {
+        if (upperBound < 0)
+            throw new IllegalArgumentException("upperBound must be >=0");
+
+        long t = (x ^ (x << 11));
+        x = y;
+        y = z;
+        z = w;
+
+        return (int) ((REAL_UNIT_INT * (int) (0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * upperBound);
+    }
+
+    public int nextInt(int lowerBound, int upperBound) {
+        if (lowerBound > upperBound)
+            throw new IllegalArgumentException("upperBound must be >=lowerBound");
+
+        long t = (x ^ (x << 11));
+        x = y;
+        y = z;
+        z = w;
+
+        // The explicit int cast before the first multiplication gives better performance.
+        // See comments in NextDouble.
+        int range = upperBound - lowerBound;
+        if (range < 0) {
+            // If range is <0 then an overflow has occured and must resort to using long integer arithmetic instead (slower).
+            // We also must use all 32 bits of precision, instead of the normal 31, which again is slower.
+            return lowerBound + (int) ((REAL_UNIT_UINT * (double) (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))) * (double) ((long) upperBound - (long) lowerBound));
+        }
+        // 31 bits of precision will suffice if range<=int.MaxValue. This allows us to cast to an int and gain
+        // a little more performance.
+        return lowerBound + (int) ((REAL_UNIT_INT * (double) (int) (0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * (double) range);
+    }
+
+    public long nextUInt() {
+        long t = (x ^ (x << 11));
+        x = y;
+        y = z;
+        z = w;
+        return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))) & (0xFFFFFFFFL);
+    }
+
+    @Override
+    public long nextLong() {
+        return nextUInt() << 32 + nextUInt();
+    }
+
+    double gaussNext;
+    boolean hasGaussNext;
+    final double TWOPI = Math.PI * 2;
+
+    /**
+     * Get a random number in the range [min, max) or [min, max] depending on rounding.
+     *
+     * @param min Low bound
+     * @param max High bound
+     * @return A uniformly distributed double
+     */
+    public double uniform(double min, double max) {
+        return min + (max - min) * nextDouble();
+    }
+
+    /**
+     * Triangular distribution.
+     * <p/>
+     * Continuous distribution bounded by given lower and upper limits,
+     * and having a given mode value in-between.
+     * http://en.wikipedia.org/wiki/Triangular_distribution
+     *
+     * @param low  Low bound
+     * @param high High bound
+     * @param mode Mode
+     * @return A number from the triangular distribution specified
+     */
+    public double triangular(int low, int high, int mode) {
+        double u = nextDouble();
+        double c = (mode - low) / (high - low);
+        if (u > c) {
+            u = 1.0 - u;
+            c = 1.0 - c;
+            int k = low;
+            low = high;
+            high = k;
+        }
+        return low + (high - low) * Math.sqrt(u * c);
+    }
+
+    /**
+     * Gaussian distribution, mean is 0 and standard deviation is 1.
+     * <p/>
+     * mu is the mean, and sigma is the standard deviation.
+     *
+     * @return A double in Gaussian distribution
+     */
+    public double gauss() {
+        return nextGaussian();
+    }
+
+    /**
+     * Gaussian distribution, with user-specified mean and standard deviation.
+     * <p/>
+     * mu is the mean, and sigma is the standard deviation.
+     *
+     * @return A double in Gaussian distribution
+     */
+    public double gauss(double mu, double sigma) {
+        return mu + sigma * nextGaussian();
+    }
+
+    public double gaussUnsigned(double mu, double sigma) {
+        double out = gauss(mu, sigma);
+        return out > 1 ? out : 1;
+    }
+
+    /**
+     * Log normal distribution.
+     * <p/>
+     * If you take the natural logarithm of this distribution, you'll get a
+     * normal distribution with mean mu and standard deviation sigma.
+     * mu can have any value, and sigma must be greater than zero.
+     *
+     * @param mu    Mean
+     * @param sigma Standard deviation
+     * @return A number from the log normal distribution specified
+     */
+    public double logNormal(double mu, double sigma) {
+        return Math.exp(gauss(mu, sigma));
+    }
+
+    /**
+     * Exponential distribution.
+     * <p/>
+     * lambda is 1.0 divided by the desired mean.  It should be
+     * nonzero. Returned values range from 0 to positive infinity
+     * if lambda is positive, and from negative infinity to 0
+     * if lambda is negative.
+     *
+     * @param lambda A non-zero value
+     */
+    public double exponential(double lambda) {
+        return -Math.log(1.0 - random()) / lambda;
+    }
+
+    /**
+     * Circular data distribution.
+     * <p/>
+     * If kappa is equal to zero, this distribution reduces
+     * to a uniform random angle over the range 0 to 2*pi.
+     *
+     * @param mu    the mean angle, expressed in radians between 0 and 2*pi.
+     * @param kappa the concentration parameter, which must be greater than or
+     *              equal to zero.
+     * @return A number from the circular data distribution specified
+     */
+    public double circularData(double mu, double kappa) {
+        if (kappa <= 1e-6)
+            return TWOPI * nextDouble();
+
+        double a = 1.0 + Math.sqrt(1.0 + 4.0 * kappa * kappa);
+        double b = (a - Math.sqrt(2.0 * a)) / (2.0 * kappa);
+        double r = (1.0 + b * b) / (2.0 * b);
+        double u1, u2, u3, f, c, z, theta = 0;
+
+        while (true) {
+            u1 = nextDouble();
+
+            z = Math.cos(Math.PI * u1);
+            f = (1.0 + r * z) / (r + z);
+            c = kappa * (r - f);
+
+            u2 = nextDouble();
+
+            if (u2 < c * (2.0 - c) || u2 <= c * Math.exp(1.0 - c))
+                break;
+
+            u3 = nextDouble();
+            if (u3 > 0.5)
+                theta = (mu % TWOPI) + Math.acos(f);
+            else
+                theta = (mu % TWOPI) - Math.acos(f);
+        }
+        return theta;
+    }
+
+
+    final double LOG4 = Math.log(4);
+    final double SG_MAGICCONST = 1.0 + Math.log(4.5);
+
+    /**
+     * Gamma distribution.  Not the gamma function!
+     * Conditions on the parameters are alpha > 0 and beta > 0.
+     * <p/>
+     * The probability distribution function is:
+     * pdf(x) = (x ** (alpha - 1) * math.exp(-x / beta)) / (math.gamma(alpha) * beta ** alpha)
+     *
+     * @param alpha Alpha
+     * @param beta  Beta
+     * @return A number from the gamma distribution specified
+     */
+    public double gamma(double alpha, double beta) {
+        if (alpha <= 0.0 || beta <= 0.0)
+            throw new IllegalArgumentException("alpha and beta must be > 0.0");
+
+        if (alpha > 1.0) {
+            double ainv = Math.sqrt(2.0 * alpha - 1.0);
+            double bbb = alpha - LOG4;
+            double ccc = alpha + ainv;
+            double u1, u2, v, x, z, r;
+
+            while (true) {
+                u1 = random();
+                if (!(1e-7 < u1 && u1 < .9999999))
+                    continue;
+                u2 = 1.0 - random();
+                v = Math.log(u1 / (1.0 - u1)) / ainv;
+                x = alpha * Math.exp(v);
+                z = u1 * u1 * u2;
+                r = bbb + ccc * v - x;
+                if (r + SG_MAGICCONST - 4.5 * z >= 0.0 || r >= Math.log(z))
+                    return x * beta;
+            }
+        } else if (alpha == 1.0) {
+            // exponential(1)
+            double u;
+            u = random();
+            while (u <= 1e-7)
+                u = random();
+            return -Math.log(u) * beta;
+        } else {
+            // alpha is between 0 and 1 (exclusive)
+            // Uses ALGORITHM GS of Statistical Computing -Kennedy & Gentle
+
+            double u, b, p, x, u1;
+            while (true) {
+                u = random();
+                b = (Math.E + alpha) / Math.E;
+                p = b * u;
+                if (p <= 1.0)
+                    x = Math.pow(p, (1.0 / alpha));
+                else
+                    x = -Math.log((b - p) / alpha);
+                u1 = random();
+                if (p > 1.0) {
+                    if (u1 <= Math.pow(x, (alpha - 1.0)))
+                        break;
+                } else if (u1 <= Math.exp(-x))
+                    break;
+            }
+            return x * beta;
+        }
+    }
+}
